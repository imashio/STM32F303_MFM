ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.draw_indicators,"ax",%progbits
  18              		.align	1
  19              		.p2align 2,,3
  20              		.global	draw_indicators
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	draw_indicators:
  27              	.LFB126:
  28              		.file 1 "Src/main.c"
   1:Src/main.c    **** /* USER CODE BEGIN Header */
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   * @attention
   8:Src/main.c    ****   *
   9:Src/main.c    ****   * <h2><center>&copy; Copyright (c) 2019 STMicroelectronics.
  10:Src/main.c    ****   * All rights reserved.</center></h2>
  11:Src/main.c    ****   *
  12:Src/main.c    ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Src/main.c    ****   * the "License"; You may not use this file except in compliance with the
  14:Src/main.c    ****   * License. You may obtain a copy of the License at:
  15:Src/main.c    ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Src/main.c    ****   *
  17:Src/main.c    ****   ******************************************************************************
  18:Src/main.c    ****   */
  19:Src/main.c    **** /* USER CODE END Header */
  20:Src/main.c    **** 
  21:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  22:Src/main.c    **** #include "main.h"
  23:Src/main.c    **** #include "adc.h"
  24:Src/main.c    **** #include "can.h"
  25:Src/main.c    **** #include "dma.h"
  26:Src/main.c    **** #include "i2c.h"
  27:Src/main.c    **** #include "spi.h"
  28:Src/main.c    **** #include "tim.h"
  29:Src/main.c    **** #include "usart.h"
  30:Src/main.c    **** #include "gpio.h"
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s 			page 2


  31:Src/main.c    **** 
  32:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  33:Src/main.c    **** /* USER CODE BEGIN Includes */
  34:Src/main.c    **** #include <stdio.h>
  35:Src/main.c    **** #include <math.h>
  36:Src/main.c    **** 
  37:Src/main.c    **** // #include "basic.h"  // original library
  38:Src/main.c    **** #include "usart_transmit_printf.h"
  39:Src/main.c    **** #include "u8g2.h"		// graphic display library
  40:Src/main.c    **** #include "u8x8_gpio_STM32F303.h"
  41:Src/main.c    **** #include "u8x8_byte_4wire_hw_spi.h"
  42:Src/main.c    **** #include "draw_Value.h"
  43:Src/main.c    **** #include "draw_BarGraph.h"
  44:Src/main.c    **** #include "draw_IndicatorBox.h"
  45:Src/main.c    **** //#include "draw_Rotary.h"
  46:Src/main.c    **** 
  47:Src/main.c    **** #include "flag.h"
  48:Src/main.c    **** #include "defi_decoder.h"
  49:Src/main.c    **** #include "pulse_counter.h"
  50:Src/main.c    **** #include "can_obd.h"
  51:Src/main.c    **** #include "gsens_ADXL345.h"
  52:Src/main.c    **** 
  53:Src/main.c    **** /* USER CODE END Includes */
  54:Src/main.c    **** 
  55:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  56:Src/main.c    **** /* USER CODE BEGIN PTD */
  57:Src/main.c    **** 
  58:Src/main.c    **** /* USER CODE END PTD */
  59:Src/main.c    **** 
  60:Src/main.c    **** /* Private define ------------------------------------------------------------*/
  61:Src/main.c    **** /* USER CODE BEGIN PD */
  62:Src/main.c    **** /* USER CODE END PD */
  63:Src/main.c    **** 
  64:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
  65:Src/main.c    **** /* USER CODE BEGIN PM */
  66:Src/main.c    **** /* USER CODE END PM */
  67:Src/main.c    **** 
  68:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  69:Src/main.c    **** 
  70:Src/main.c    **** /* USER CODE BEGIN PV */
  71:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  72:Src/main.c    **** 
  73:Src/main.c    **** // Debug
  74:Src/main.c    **** #define DEBUG_USBserial       1
  75:Src/main.c    **** 
  76:Src/main.c    **** // mode definition
  77:Src/main.c    **** #define N_mode                5
  78:Src/main.c    **** 
  79:Src/main.c    **** #define MODE_BAR_METER        0
  80:Src/main.c    **** #define MODE_CIRCULAR_METER   1
  81:Src/main.c    **** #define MODE_ROTARY           2
  82:Src/main.c    **** #define MODE_SCOPE_MAP        3
  83:Src/main.c    **** #define MODE_SCOPE_Gsens      4
  84:Src/main.c    **** #define MODE_SETTING          5
  85:Src/main.c    **** 
  86:Src/main.c    **** // RPM bar graph parameter definition
  87:Src/main.c    **** #define	rpmbar_x		          0
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s 			page 3


  88:Src/main.c    **** #define	rpmbar_y		          0
  89:Src/main.c    **** #define	rpmbar_width	        128
  90:Src/main.c    **** #define	rpmbar_height	        14
  91:Src/main.c    **** #define	rpm_min			          0
  92:Src/main.c    **** #define	rpm_max			          9000
  93:Src/main.c    **** 
  94:Src/main.c    **** // measurements display parameter definition
  95:Src/main.c    **** // Bar graph
  96:Src/main.c    **** #define	N_meas			      6
  97:Src/main.c    **** #define	meas_x			      0
  98:Src/main.c    **** #define	meas_y			      16
  99:Src/main.c    **** #define	meas_x_offset   	2
 100:Src/main.c    **** #define	meas_width1		    70
 101:Src/main.c    **** #define	meas_width2		    56
 102:Src/main.c    **** #define	meas_height		    12
 103:Src/main.c    **** // Circular Meter
 104:Src/main.c    **** #define	N_meas_C			    4
 105:Src/main.c    **** #define	meas_C_x			    68
 106:Src/main.c    **** #define	meas_C_y			    2
 107:Src/main.c    **** #define	meas_C_x_offset		2
 108:Src/main.c    **** #define	meas_C_width		  60
 109:Src/main.c    **** #define	meas_C_height		  13
 110:Src/main.c    **** 
 111:Src/main.c    **** // indicators parameter definition
 112:Src/main.c    **** #define	N_idct			      2
 113:Src/main.c    **** #define	idct_x			      72
 114:Src/main.c    **** #define	idct_y			      53
 115:Src/main.c    ****  #define	idct_width		    27 // 2-items
 116:Src/main.c    **** // #define	idct_width		    17 // 3-item
 117:Src/main.c    **** #define	idct_height		    9
 118:Src/main.c    **** 
 119:Src/main.c    **** //  Fuel Pump Voltage display parameter definition
 120:Src/main.c    **** #define	FP_x		    	    0
 121:Src/main.c    **** #define	FP_y              52
 122:Src/main.c    **** #define	FP_height	        12
 123:Src/main.c    **** #define	FP_volt_width	    45
 124:Src/main.c    **** #define	FP_duty_width	    70
 125:Src/main.c    **** 
 126:Src/main.c    **** // wave display parameter definition
 127:Src/main.c    **** #define	wave_x			      0
 128:Src/main.c    **** #define	wave_y			      13
 129:Src/main.c    **** #define	wave_width		    128
 130:Src/main.c    **** #define	wave_height		    52
 131:Src/main.c    **** #define	wave_value_min	  -100
 132:Src/main.c    **** #define	wave_value_max	  +200
 133:Src/main.c    **** 
 134:Src/main.c    **** 
 135:Src/main.c    **** // measurements display parameter definition
 136:Src/main.c    **** #define	meas_width_NSX    128
 137:Src/main.c    **** #define	meas_height_NSX   24
 138:Src/main.c    **** 
 139:Src/main.c    **** // einfini logo definition (small 'enfini' logo)
 140:Src/main.c    **** #define enfini_logo_width        48
 141:Src/main.c    **** #define enfini_logo_height       48
 142:Src/main.c    **** const unsigned char enfini_logo[] = {
 143:Src/main.c    ****   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 144:Src/main.c    ****   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s 			page 4


 145:Src/main.c    ****   0x00, 0x00, 0xF0, 0x0F, 0x00, 0x00, 0x00, 0xFC, 0xFF, 0xFF, 0x3F, 0x00,
 146:Src/main.c    ****   0x80, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0xE0, 0x1F, 0x00, 0x80, 0xFF, 0x07,
 147:Src/main.c    ****   0xE0, 0x01, 0x00, 0x80, 0x81, 0x07, 0xE0, 0x01, 0x00, 0x80, 0x81, 0x07,
 148:Src/main.c    ****   0xC0, 0xE1, 0x07, 0xC0, 0x80, 0x03, 0x00, 0xFC, 0x1F, 0xE0, 0x80, 0x03,
 149:Src/main.c    ****   0x00, 0xFE, 0x7F, 0x70, 0xC0, 0x01, 0x00, 0x0F, 0xFE, 0x39, 0xE0, 0x00,
 150:Src/main.c    ****   0x00, 0x07, 0xF8, 0x1F, 0xF0, 0x00, 0x00, 0x0E, 0xE0, 0x1F, 0x78, 0x00,
 151:Src/main.c    ****   0x00, 0x0C, 0xC0, 0xFF, 0x3F, 0x00, 0x00, 0x18, 0x00, 0xFF, 0x1F, 0x00,
 152:Src/main.c    ****   0x00, 0x38, 0xC0, 0xFF, 0x0F, 0x00, 0x00, 0x70, 0xE0, 0xF1, 0x03, 0x00,
 153:Src/main.c    ****   0x00, 0xE0, 0x78, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x3F, 0xE0, 0x01, 0x00,
 154:Src/main.c    ****   0x00, 0x80, 0x1F, 0xF0, 0x01, 0x00, 0x00, 0x00, 0x07, 0xF8, 0x00, 0x00,
 155:Src/main.c    ****   0x00, 0x00, 0x1E, 0x7C, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x1F, 0x00, 0x00,
 156:Src/main.c    ****   0x00, 0x00, 0xF0, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00,
 157:Src/main.c    ****   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 158:Src/main.c    ****   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 159:Src/main.c    ****   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4C, 0x1C, 0x00, 0x00, 0x00,
 160:Src/main.c    ****   0x00, 0x32, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC6, 0x00, 0x18, 0x00,
 161:Src/main.c    ****   0x00, 0x7C, 0xEF, 0xFC, 0x39, 0x00, 0x00, 0x4E, 0xC6, 0xB8, 0x31, 0x00,
 162:Src/main.c    ****   0x00, 0x3E, 0xC6, 0x98, 0x31, 0x00, 0x00, 0x3C, 0xC6, 0x98, 0x31, 0x00,
 163:Src/main.c    ****   0x00, 0x0E, 0xC6, 0x98, 0x31, 0x00, 0x00, 0x4E, 0xCE, 0x99, 0x31, 0x00,
 164:Src/main.c    ****   0x00, 0x7C, 0xEF, 0xFD, 0x7B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 165:Src/main.c    ****   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 166:Src/main.c    ****   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 167:Src/main.c    ****   };
 168:Src/main.c    **** 
 169:Src/main.c    **** /*
 170:Src/main.c    **** // enfini logo definition (meidium 'enfini' logo)
 171:Src/main.c    **** #define logo_width        54
 172:Src/main.c    **** #define logo_height       48
 173:Src/main.c    **** static unsigned char enfini_logo[] = {
 174:Src/main.c    ****   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0xFF, 0x0F,
 175:Src/main.c    ****   0x00, 0x00, 0x00, 0xFC, 0xFF, 0xFF, 0xFF, 0x1F, 0x00, 0xE0, 0xFF, 0xFF,
 176:Src/main.c    ****   0xFF, 0xFF, 0xFF, 0x01, 0xF8, 0x3F, 0x00, 0x00, 0xF0, 0xFF, 0x07, 0xF8,
 177:Src/main.c    ****   0x01, 0x00, 0x00, 0x70, 0xE0, 0x0F, 0x7C, 0x00, 0x00, 0x00, 0x70, 0x80,
 178:Src/main.c    ****   0x0F, 0x7C, 0x00, 0x00, 0x00, 0x70, 0x00, 0x07, 0xF8, 0x00, 0x00, 0x00,
 179:Src/main.c    ****   0x38, 0x80, 0x07, 0x00, 0xF8, 0x3F, 0x00, 0x38, 0x80, 0x07, 0x00, 0xFE,
 180:Src/main.c    ****   0xFF, 0x00, 0x1C, 0xC0, 0x03, 0x80, 0xFF, 0xFF, 0x01, 0x0E, 0xC0, 0x01,
 181:Src/main.c    ****   0xC0, 0x07, 0xFC, 0x07, 0x07, 0xE0, 0x01, 0x80, 0x03, 0xF0, 0x9F, 0x03,
 182:Src/main.c    ****   0xF0, 0x00, 0x80, 0x03, 0xC0, 0xFF, 0x03, 0x78, 0x00, 0x00, 0x07, 0x80,
 183:Src/main.c    ****   0xFF, 0x01, 0x3C, 0x00, 0x00, 0x06, 0x00, 0xFE, 0x87, 0x3F, 0x00, 0x00,
 184:Src/main.c    ****   0x0E, 0x00, 0xF8, 0xFF, 0x1F, 0x00, 0x00, 0x1C, 0x00, 0xF8, 0xFF, 0x07,
 185:Src/main.c    ****   0x00, 0x00, 0x38, 0x00, 0xDE, 0xFF, 0x03, 0x00, 0x00, 0x70, 0x00, 0x0F,
 186:Src/main.c    ****   0x7E, 0x00, 0x00, 0x00, 0xE0, 0xC0, 0x07, 0x00, 0x00, 0x00, 0x00, 0xC0,
 187:Src/main.c    ****   0xF1, 0x01, 0x00, 0x00, 0x00, 0x00, 0x80, 0xFF, 0x00, 0x7C, 0x00, 0x00,
 188:Src/main.c    ****   0x00, 0x00, 0x3F, 0x00, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x1F,
 189:Src/main.c    ****   0x00, 0x00, 0x00, 0x00, 0x3C, 0x80, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x78,
 190:Src/main.c    ****   0xE0, 0x07, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xFF, 0x03, 0x00, 0x00, 0x00,
 191:Src/main.c    ****   0x00, 0xC0, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x00, 0x00,
 192:Src/main.c    ****   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00,
 193:Src/main.c    ****   0x00, 0x00, 0x00, 0x00, 0x4E, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39,
 194:Src/main.c    ****   0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x00,
 195:Src/main.c    ****   0x00, 0x7E, 0x3E, 0xC7, 0x3D, 0x1C, 0x00, 0x00, 0x6F, 0x3E, 0xC7, 0x7F,
 196:Src/main.c    ****   0x1C, 0x00, 0x00, 0x03, 0x1C, 0x86, 0x73, 0x18, 0x00, 0x00, 0x07, 0x1C,
 197:Src/main.c    ****   0x86, 0x71, 0x18, 0x00, 0x00, 0x3E, 0x1C, 0x86, 0x71, 0x18, 0x00, 0x00,
 198:Src/main.c    ****   0x1F, 0x1C, 0x86, 0x71, 0x18, 0x00, 0x00, 0x03, 0x1C, 0x86, 0x71, 0x18,
 199:Src/main.c    ****   0x00, 0x00, 0x47, 0x1C, 0x86, 0x71, 0x18, 0x00, 0x00, 0x7F, 0x3E, 0xCF,
 200:Src/main.c    ****   0xFB, 0x3C, 0x00, 0x00, 0x3C, 0x3E, 0xCF, 0xFB, 0x3C, 0x00, 0x00, 0x00,
 201:Src/main.c    ****   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s 			page 5


 202:Src/main.c    ****   };
 203:Src/main.c    **** */
 204:Src/main.c    **** 
 205:Src/main.c    **** u8g2_t    u8g2; // a structure which will contain all the data for one display
 206:Src/main.c    **** 
 207:Src/main.c    **** uint8_t   update_display = 0;
 208:Src/main.c    **** 
 209:Src/main.c    **** // uint16_t	rpm = 0;
 210:Src/main.c    **** // uint16_t	speed = 240;
 211:Src/main.c    **** uint8_t		gear = 0;
 212:Src/main.c    **** double		MT[5] = {3.483, 2.015, 1.391, 1.000, 0.806};
 213:Src/main.c    **** 
 214:Src/main.c    **** // UI
 215:Src/main.c    **** uint8_t   mode;
 216:Src/main.c    **** uint8_t   setting;
 217:Src/main.c    **** uint8_t   cursor = 0;
 218:Src/main.c    **** 
 219:Src/main.c    **** 
 220:Src/main.c    **** // variables for indicators
 221:Src/main.c    **** const unsigned char idct_name[N_idct][5] = { // length must be (text length + 1)
 222:Src/main.c    **** 		"CAN"	,
 223:Src/main.c    **** 		"GSENS"	,
 224:Src/main.c    **** };
 225:Src/main.c    **** 
 226:Src/main.c    **** uint8_t	idct_status[N_idct] = {
 227:Src/main.c    **** 		0	,
 228:Src/main.c    **** 		0
 229:Src/main.c    **** };
 230:Src/main.c    **** 
 231:Src/main.c    **** // variables for measurement
 232:Src/main.c    **** const unsigned char meas_name[N_meas][7] = { // length must be (text length + 1)
 233:Src/main.c    **** 		"MAP"         ,
 234:Src/main.c    **** 		"OILP"        ,
 235:Src/main.c    **** 		"FPV"         ,
 236:Src/main.c    **** 		"ECT"         ,
 237:Src/main.c    **** 		"OILT"        ,
 238:Src/main.c    **** 		"O2"          
 239:Src/main.c    **** };
 240:Src/main.c    **** 
 241:Src/main.c    **** const unsigned char meas_unit[N_meas][5] = {
 242:Src/main.c    **** 		"kpa"			    ,	// MAP
 243:Src/main.c    **** 		"kpa"			    ,	// OILP
 244:Src/main.c    **** 		"V  "         ,	// FuelPump Voltage
 245:Src/main.c    **** 		{176, 67, 0}  ,	// ECT  degC...{176, 67, 0}
 246:Src/main.c    **** 		{176, 67, 0}	,	// OILT  degC...{176, 67, 0}
 247:Src/main.c    **** 		"V"					    // O2
 248:Src/main.c    **** };
 249:Src/main.c    **** 
 250:Src/main.c    **** const uint8_t	meas_digit[N_meas] = {
 251:Src/main.c    **** 		3	,	// MAP
 252:Src/main.c    **** 		3	,	// OILP
 253:Src/main.c    **** 		3	,	// FuelPump Voltage
 254:Src/main.c    **** 		3	,	// ECT
 255:Src/main.c    **** 		3	,	// OILT
 256:Src/main.c    **** 		3		// O2
 257:Src/main.c    **** };
 258:Src/main.c    **** 
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s 			page 6


 259:Src/main.c    **** const uint8_t	meas_frac[N_meas] = {
 260:Src/main.c    **** 		2	,	// MAP
 261:Src/main.c    **** 		1	,	// OILP
 262:Src/main.c    **** 		1	,	// FuelPump Voltage
 263:Src/main.c    **** 		0	,	// ECT
 264:Src/main.c    **** 		0	,	// OILT
 265:Src/main.c    **** 		2		// O2
 266:Src/main.c    **** };
 267:Src/main.c    **** 
 268:Src/main.c    **** const uint8_t	meas_sign[N_meas] = {
 269:Src/main.c    **** 		1	,	// MAP
 270:Src/main.c    **** 		0	,	// OILP
 271:Src/main.c    **** 		0	,	// FuelPump Voltage
 272:Src/main.c    **** 		0	,	// ECT
 273:Src/main.c    **** 		0	,	// OILT
 274:Src/main.c    **** 		0		// O2
 275:Src/main.c    **** };
 276:Src/main.c    **** 
 277:Src/main.c    **** int16_t	meas_value[N_meas] = {
 278:Src/main.c    **** 		105	,	// MAP
 279:Src/main.c    **** 		235	,	// OILP
 280:Src/main.c    **** 		645	,	// FuelPump Voltage
 281:Src/main.c    **** 		89	,	// ECT
 282:Src/main.c    **** 		73	,	// OILT
 283:Src/main.c    **** 		143		// O2
 284:Src/main.c    **** };
 285:Src/main.c    **** 
 286:Src/main.c    **** // O2 senser Voltage
 287:Src/main.c    **** int16_t   O2_volt = 330;
 288:Src/main.c    **** 
 289:Src/main.c    **** // Fuel Pump Voltage
 290:Src/main.c    **** int16_t   FP_volt = 330;
 291:Src/main.c    **** int16_t   FP_duty = 100;
 292:Src/main.c    **** 
 293:Src/main.c    **** // CAN Tranceiver --------------------------------------------------
 294:Src/main.c    **** uint8_t   CAN_EN;
 295:Src/main.c    **** 
 296:Src/main.c    **** // ADXL345 3-axis acceration sensor --------------------------------
 297:Src/main.c    **** uint8_t   Gsens_EN;
 298:Src/main.c    **** // uint8_t   Gsens_X1;
 299:Src/main.c    **** // uint8_t   Gsens_X0;
 300:Src/main.c    **** int16_t   Gsens_X;
 301:Src/main.c    **** // uint8_t   Gsens_Y1;
 302:Src/main.c    **** // uint8_t   Gsens_Y0;
 303:Src/main.c    **** int16_t   Gsens_Y;
 304:Src/main.c    **** // uint8_t   Gsens_Z1;
 305:Src/main.c    **** // uint8_t   Gsens_Z0;
 306:Src/main.c    **** int16_t   Gsens_Z;
 307:Src/main.c    **** 
 308:Src/main.c    **** #define ADXL0_ADDR 0x1D
 309:Src/main.c    **** // ADXL345     I2C
 310:Src/main.c    **** // SDO/ALT   Address
 311:Src/main.c    **** //    H        0x1D
 312:Src/main.c    **** //    L        0x53
 313:Src/main.c    **** 
 314:Src/main.c    **** /*
 315:Src/main.c    **** void ADXL345_RegWrite(uint8_t slv_addr, uint8_t addr, uint8_t data){
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s 			page 7


 316:Src/main.c    ****   uint8_t i2c_buf[2];
 317:Src/main.c    ****   i2c_buf[0] = addr;
 318:Src/main.c    ****   i2c_buf[1] = data;  
 319:Src/main.c    ****   HAL_I2C_Master_Transmit(&hi2c1, slv_addr << 1, &i2c_buf, 2, 10);
 320:Src/main.c    **** }
 321:Src/main.c    **** 
 322:Src/main.c    **** int8_t ADXL345_RegRead_1byte(uint8_t slv_addr, uint8_t addr){
 323:Src/main.c    ****   uint8_t data;
 324:Src/main.c    ****   HAL_I2C_Master_Transmit(&hi2c1, slv_addr << 1, &addr, 1, 10);
 325:Src/main.c    ****   HAL_I2C_Master_Receive(&hi2c1, slv_addr << 1, &data, 1, 10);
 326:Src/main.c    ****   return data;
 327:Src/main.c    **** }
 328:Src/main.c    **** */
 329:Src/main.c    **** 
 330:Src/main.c    **** /* USER CODE END PV */
 331:Src/main.c    **** 
 332:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
 333:Src/main.c    **** void SystemClock_Config(void);
 334:Src/main.c    **** /* USER CODE BEGIN PFP */
 335:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
 336:Src/main.c    **** 
 337:Src/main.c    **** /* USER CODE END PFP */
 338:Src/main.c    **** 
 339:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
 340:Src/main.c    **** /* USER CODE BEGIN 0 */
 341:Src/main.c    **** void draw_indicators(){
  29              		.loc 1 341 0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              	.LVL0:
  34 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 20
  37              		.cfi_offset 4, -20
  38              		.cfi_offset 5, -16
  39              		.cfi_offset 6, -12
  40              		.cfi_offset 7, -8
  41              		.cfi_offset 14, -4
 342:Src/main.c    ****   uint8_t n;
 343:Src/main.c    ****   uint8_t x, y;
 344:Src/main.c    ****   // draw indicators
 345:Src/main.c    **** 
 346:Src/main.c    ****   for( n=0; n<N_idct; n++ ){
 347:Src/main.c    ****     draw_IndicatorBox(&u8g2, idct_x+(idct_width+2)*n, idct_y, idct_width, idct_height, idct_status[
  42              		.loc 1 347 0
  43 0002 0E4F     		ldr	r7, .L4
  44 0004 0E4D     		ldr	r5, .L4+4
  45 0006 3B78     		ldrb	r3, [r7]	@ zero_extendqisi2
  46 0008 0E4C     		ldr	r4, .L4+8
 341:Src/main.c    ****   uint8_t n;
  47              		.loc 1 341 0
  48 000a 85B0     		sub	sp, sp, #20
  49              	.LCFI1:
  50              		.cfi_def_cfa_offset 40
  51              		.loc 1 347 0
  52 000c 0926     		movs	r6, #9
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s 			page 8


  53 000e 0193     		str	r3, [sp, #4]
  54 0010 2846     		mov	r0, r5
  55 0012 0294     		str	r4, [sp, #8]
  56 0014 0096     		str	r6, [sp]
  57 0016 1B23     		movs	r3, #27
  58 0018 3522     		movs	r2, #53
  59 001a 4821     		movs	r1, #72
  60 001c FFF7FEFF 		bl	draw_IndicatorBox
  61              	.LVL1:
  62 0020 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
  63 0022 0096     		str	r6, [sp]
  64 0024 0534     		adds	r4, r4, #5
  65 0026 CDE90134 		strd	r3, r4, [sp, #4]
  66 002a 2846     		mov	r0, r5
  67 002c 1B23     		movs	r3, #27
  68 002e 3522     		movs	r2, #53
  69 0030 6521     		movs	r1, #101
  70 0032 FFF7FEFF 		bl	draw_IndicatorBox
  71              	.LVL2:
 348:Src/main.c    ****   }
 349:Src/main.c    **** }
  72              		.loc 1 349 0
  73 0036 05B0     		add	sp, sp, #20
  74              	.LCFI2:
  75              		.cfi_def_cfa_offset 20
  76              		@ sp needed
  77 0038 F0BD     		pop	{r4, r5, r6, r7, pc}
  78              	.L5:
  79 003a 00BF     		.align	2
  80              	.L4:
  81 003c 00000000 		.word	.LANCHOR1
  82 0040 00000000 		.word	u8g2
  83 0044 00000000 		.word	.LANCHOR0
  84              		.cfi_endproc
  85              	.LFE126:
  87              		.section	.text.draw_MeasLabels,"ax",%progbits
  88              		.align	1
  89              		.p2align 2,,3
  90              		.global	draw_MeasLabels
  91              		.syntax unified
  92              		.thumb
  93              		.thumb_func
  94              		.fpu fpv4-sp-d16
  96              	draw_MeasLabels:
  97              	.LFB127:
 350:Src/main.c    **** 
 351:Src/main.c    **** void draw_MeasLabels(){
  98              		.loc 1 351 0
  99              		.cfi_startproc
 100              		@ args = 0, pretend = 0, frame = 0
 101              		@ frame_needed = 0, uses_anonymous_args = 0
 102              	.LVL3:
 103 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 104              	.LCFI3:
 105              		.cfi_def_cfa_offset 20
 106              		.cfi_offset 4, -20
 107              		.cfi_offset 5, -16
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s 			page 9


 108              		.cfi_offset 6, -12
 109              		.cfi_offset 7, -8
 110              		.cfi_offset 14, -4
 352:Src/main.c    ****   uint8_t n;
 353:Src/main.c    ****   uint8_t x, y;
 354:Src/main.c    ****   // draw measurements label & unit
 355:Src/main.c    ****   for( n=0; n<3; n++ ){
 356:Src/main.c    ****     x = meas_x;
 357:Src/main.c    **** 	  y = (n % 3) * meas_height	+ meas_y;
 358:Src/main.c    **** 	  draw_MeasLabelUnit(&u8g2, x, y, meas_width1, meas_height, meas_name[n], meas_unit[n]);
 111              		.loc 1 358 0
 112 0002 334C     		ldr	r4, .L8
 113 0004 334E     		ldr	r6, .L8+4
 114 0006 344F     		ldr	r7, .L8+8
 351:Src/main.c    ****   uint8_t n;
 115              		.loc 1 351 0
 116 0008 87B0     		sub	sp, sp, #28
 117              	.LCFI4:
 118              		.cfi_def_cfa_offset 48
 119              		.loc 1 358 0
 120 000a 0C25     		movs	r5, #12
 121 000c 0297     		str	r7, [sp, #8]
 122 000e 2046     		mov	r0, r4
 123 0010 CDE90056 		strd	r5, r6, [sp]
 124 0014 4623     		movs	r3, #70
 125 0016 1022     		movs	r2, #16
 126 0018 0021     		movs	r1, #0
 127 001a FFF7FEFF 		bl	draw_MeasLabelUnit
 128              	.LVL4:
 129 001e 7A1D     		adds	r2, r7, #5
 130 0020 F31D     		adds	r3, r6, #7
 131 0022 CDE90132 		strd	r3, r2, [sp, #4]
 132 0026 2046     		mov	r0, r4
 133 0028 0095     		str	r5, [sp]
 134 002a 4623     		movs	r3, #70
 135 002c 1C22     		movs	r2, #28
 136 002e 0021     		movs	r1, #0
 137 0030 FFF7FEFF 		bl	draw_MeasLabelUnit
 138              	.LVL5:
 139 0034 07F10A02 		add	r2, r7, #10
 140 0038 06F10E03 		add	r3, r6, #14
 141 003c CDE90132 		strd	r3, r2, [sp, #4]
 142 0040 2046     		mov	r0, r4
 143 0042 0095     		str	r5, [sp]
 144 0044 4623     		movs	r3, #70
 145 0046 2822     		movs	r2, #40
 146 0048 0021     		movs	r1, #0
 147 004a FFF7FEFF 		bl	draw_MeasLabelUnit
 148              	.LVL6:
 359:Src/main.c    ****   }
 360:Src/main.c    ****   for( n=3; n<N_meas; n++ ){
 361:Src/main.c    **** 	  x = meas_width1 + meas_x + meas_x_offset;
 362:Src/main.c    **** 	  y = (n % 3) * meas_height	+ meas_y;
 363:Src/main.c    **** 	  draw_MeasLabelUnit(&u8g2, x, y, meas_width2, meas_height, meas_name[n], meas_unit[n]);
 149              		.loc 1 363 0
 150 004e 07F10F02 		add	r2, r7, #15
 151 0052 06F11503 		add	r3, r6, #21
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s 			page 10


 152 0056 CDE90132 		strd	r3, r2, [sp, #4]
 153 005a 2046     		mov	r0, r4
 154 005c 0095     		str	r5, [sp]
 155 005e 3823     		movs	r3, #56
 156 0060 1022     		movs	r2, #16
 157 0062 4821     		movs	r1, #72
 158 0064 FFF7FEFF 		bl	draw_MeasLabelUnit
 159              	.LVL7:
 160 0068 07F11402 		add	r2, r7, #20
 161 006c 06F11C03 		add	r3, r6, #28
 162 0070 CDE90132 		strd	r3, r2, [sp, #4]
 163 0074 2046     		mov	r0, r4
 164 0076 0095     		str	r5, [sp]
 165 0078 3823     		movs	r3, #56
 166 007a 1C22     		movs	r2, #28
 167 007c 4821     		movs	r1, #72
 168 007e 1937     		adds	r7, r7, #25
 169 0080 2336     		adds	r6, r6, #35
 170 0082 FFF7FEFF 		bl	draw_MeasLabelUnit
 171              	.LVL8:
 172 0086 CDE90167 		strd	r6, r7, [sp, #4]
 173 008a 2046     		mov	r0, r4
 174 008c 0095     		str	r5, [sp]
 175 008e 3823     		movs	r3, #56
 176 0090 2822     		movs	r2, #40
 177 0092 4821     		movs	r1, #72
 178 0094 FFF7FEFF 		bl	draw_MeasLabelUnit
 179              	.LVL9:
 364:Src/main.c    ****   }
 365:Src/main.c    **** 
 366:Src/main.c    ****   // Fuel Pump voltage & duty
 367:Src/main.c    ****   draw_MeasLabelUnit(&u8g2, FP_x, FP_y, FP_duty_width, FP_height, "DUTY", "%  ");
 180              		.loc 1 367 0
 181 0098 104E     		ldr	r6, .L8+12
 182 009a 114B     		ldr	r3, .L8+16
 183 009c 0095     		str	r5, [sp]
 184 009e 2046     		mov	r0, r4
 185 00a0 CDE90136 		strd	r3, r6, [sp, #4]
 186 00a4 3422     		movs	r2, #52
 187 00a6 4623     		movs	r3, #70
 188 00a8 0021     		movs	r1, #0
 189 00aa FFF7FEFF 		bl	draw_MeasLabelUnit
 190              	.LVL10:
 368:Src/main.c    ****   draw_Value(&u8g2, FP_x, FP_y, FP_duty_width, FP_height, 100, 3, 0, 0, "%  ");
 191              		.loc 1 368 0
 192 00ae 0021     		movs	r1, #0
 193 00b0 0322     		movs	r2, #3
 194 00b2 6423     		movs	r3, #100
 195 00b4 CDE90132 		strd	r3, r2, [sp, #4]
 196 00b8 0596     		str	r6, [sp, #20]
 197 00ba 0095     		str	r5, [sp]
 198 00bc 2046     		mov	r0, r4
 199 00be CDE90311 		strd	r1, r1, [sp, #12]
 200 00c2 4623     		movs	r3, #70
 201 00c4 3422     		movs	r2, #52
 202 00c6 FFF7FEFF 		bl	draw_Value
 203              	.LVL11:
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s 			page 11


 369:Src/main.c    **** }
 204              		.loc 1 369 0
 205 00ca 07B0     		add	sp, sp, #28
 206              	.LCFI5:
 207              		.cfi_def_cfa_offset 20
 208              		@ sp needed
 209 00cc F0BD     		pop	{r4, r5, r6, r7, pc}
 210              	.L9:
 211 00ce 00BF     		.align	2
 212              	.L8:
 213 00d0 00000000 		.word	u8g2
 214 00d4 00000000 		.word	.LANCHOR3
 215 00d8 00000000 		.word	.LANCHOR2
 216 00dc 00000000 		.word	.LC0
 217 00e0 04000000 		.word	.LC1
 218              		.cfi_endproc
 219              	.LFE127:
 221              		.section	.text.draw_MeasLabels_Rotary,"ax",%progbits
 222              		.align	1
 223              		.p2align 2,,3
 224              		.global	draw_MeasLabels_Rotary
 225              		.syntax unified
 226              		.thumb
 227              		.thumb_func
 228              		.fpu fpv4-sp-d16
 230              	draw_MeasLabels_Rotary:
 231              	.LFB128:
 370:Src/main.c    **** 
 371:Src/main.c    **** void draw_MeasLabels_Rotary(){
 232              		.loc 1 371 0
 233              		.cfi_startproc
 234              		@ args = 0, pretend = 0, frame = 0
 235              		@ frame_needed = 0, uses_anonymous_args = 0
 236              	.LVL12:
 237 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 238              	.LCFI6:
 239              		.cfi_def_cfa_offset 24
 240              		.cfi_offset 4, -24
 241              		.cfi_offset 5, -20
 242              		.cfi_offset 6, -16
 243              		.cfi_offset 7, -12
 244              		.cfi_offset 8, -8
 245              		.cfi_offset 14, -4
 246 0004 0D4E     		ldr	r6, .L14
 247 0006 0E4D     		ldr	r5, .L14+4
 372:Src/main.c    ****   uint8_t n;
 373:Src/main.c    ****   uint8_t x, y;
 374:Src/main.c    ****   // draw measurements label & unit
 375:Src/main.c    ****   for( n=0; n<4; n++ ){
 376:Src/main.c    **** 	  x = meas_x;
 377:Src/main.c    **** 	  y = (n % 4) * meas_height	+ meas_y;
 378:Src/main.c    **** 	  draw_MeasLabelUnit(&u8g2, x, y, meas_width1, meas_height, meas_name[n], meas_unit[n]);
 248              		.loc 1 378 0
 249 0008 DFF83880 		ldr	r8, .L14+8
 371:Src/main.c    ****   uint8_t n;
 250              		.loc 1 371 0
 251 000c 84B0     		sub	sp, sp, #16
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s 			page 12


 252              	.LCFI7:
 253              		.cfi_def_cfa_offset 40
 371:Src/main.c    ****   uint8_t n;
 254              		.loc 1 371 0
 255 000e 1024     		movs	r4, #16
 256              		.loc 1 378 0
 257 0010 0C27     		movs	r7, #12
 258              	.LVL13:
 259              	.L11:
 260              		.loc 1 378 0 is_stmt 0 discriminator 3
 261 0012 2246     		mov	r2, r4
 262 0014 0C34     		adds	r4, r4, #12
 263              	.LVL14:
 264 0016 CDE90165 		strd	r6, r5, [sp, #4]
 265 001a 0097     		str	r7, [sp]
 266 001c 4623     		movs	r3, #70
 267 001e 0021     		movs	r1, #0
 268 0020 4046     		mov	r0, r8
 269 0022 E4B2     		uxtb	r4, r4
 270 0024 FFF7FEFF 		bl	draw_MeasLabelUnit
 271              	.LVL15:
 375:Src/main.c    **** 	  x = meas_x;
 272              		.loc 1 375 0 is_stmt 1 discriminator 3
 273 0028 402C     		cmp	r4, #64
 274 002a 06F10706 		add	r6, r6, #7
 275 002e 05F10505 		add	r5, r5, #5
 276 0032 EED1     		bne	.L11
 379:Src/main.c    ****   }
 380:Src/main.c    **** }
 277              		.loc 1 380 0
 278 0034 04B0     		add	sp, sp, #16
 279              	.LCFI8:
 280              		.cfi_def_cfa_offset 24
 281              		@ sp needed
 282 0036 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 283              	.L15:
 284 003a 00BF     		.align	2
 285              	.L14:
 286 003c 00000000 		.word	.LANCHOR3
 287 0040 00000000 		.word	.LANCHOR2
 288 0044 00000000 		.word	u8g2
 289              		.cfi_endproc
 290              	.LFE128:
 292              		.section	.text.HAL_ADC_ConvCpltCallback,"ax",%progbits
 293              		.align	1
 294              		.p2align 2,,3
 295              		.global	HAL_ADC_ConvCpltCallback
 296              		.syntax unified
 297              		.thumb
 298              		.thumb_func
 299              		.fpu fpv4-sp-d16
 301              	HAL_ADC_ConvCpltCallback:
 302              	.LFB129:
 381:Src/main.c    **** 
 382:Src/main.c    **** 
 383:Src/main.c    **** // ADC buffer definition
 384:Src/main.c    **** enum{ ADC_BUFFER_LENGTH = 10 };
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s 			page 13


 385:Src/main.c    **** uint16_t g_ADCBuffer[ADC_BUFFER_LENGTH];
 386:Src/main.c    **** uint16_t adc[ADC_BUFFER_LENGTH];  
 387:Src/main.c    **** 
 388:Src/main.c    **** void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 303              		.loc 1 388 0
 304              		.cfi_startproc
 305              		@ args = 0, pretend = 0, frame = 0
 306              		@ frame_needed = 0, uses_anonymous_args = 0
 307              		@ link register save eliminated.
 308              	.LVL16:
 309 0000 054B     		ldr	r3, .L19
 310 0002 064A     		ldr	r2, .L19+4
 311 0004 03F11400 		add	r0, r3, #20
 312              	.LVL17:
 313              	.L17:
 314              	.LBB28:
 389:Src/main.c    **** 	for (unsigned int i =0; i<ADC_BUFFER_LENGTH; i++){
 390:Src/main.c    **** 	   adc[i] = g_ADCBuffer[i];  // store the values in adc[]
 315              		.loc 1 390 0 discriminator 3
 316 0008 33F8021B 		ldrh	r1, [r3], #2
 317 000c 22F8021B 		strh	r1, [r2], #2	@ movhi
 389:Src/main.c    **** 	for (unsigned int i =0; i<ADC_BUFFER_LENGTH; i++){
 318              		.loc 1 389 0 discriminator 3
 319 0010 8342     		cmp	r3, r0
 320 0012 F9D1     		bne	.L17
 321              	.LBE28:
 391:Src/main.c    **** 	}
 392:Src/main.c    **** }
 322              		.loc 1 392 0
 323 0014 7047     		bx	lr
 324              	.L20:
 325 0016 00BF     		.align	2
 326              	.L19:
 327 0018 00000000 		.word	g_ADCBuffer
 328 001c 00000000 		.word	adc
 329              		.cfi_endproc
 330              	.LFE129:
 332              		.section	.text.SystemClock_Config,"ax",%progbits
 333              		.align	1
 334              		.p2align 2,,3
 335              		.global	SystemClock_Config
 336              		.syntax unified
 337              		.thumb
 338              		.thumb_func
 339              		.fpu fpv4-sp-d16
 341              	SystemClock_Config:
 342              	.LFB131:
 393:Src/main.c    **** 
 394:Src/main.c    **** /* USER CODE END 0 */
 395:Src/main.c    **** 
 396:Src/main.c    **** /**
 397:Src/main.c    ****   * @brief  The application entry point.
 398:Src/main.c    ****   * @retval int
 399:Src/main.c    ****   */
 400:Src/main.c    **** int main(void)
 401:Src/main.c    **** {
 402:Src/main.c    ****   /* USER CODE BEGIN 1 */
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s 			page 14


 403:Src/main.c    **** 
 404:Src/main.c    ****   /* USER CODE END 1 */
 405:Src/main.c    ****   
 406:Src/main.c    **** 
 407:Src/main.c    ****   /* MCU Configuration--------------------------------------------------------*/
 408:Src/main.c    **** 
 409:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 410:Src/main.c    ****   HAL_Init();
 411:Src/main.c    **** 
 412:Src/main.c    ****   /* USER CODE BEGIN Init */
 413:Src/main.c    ****   uint8_t n;
 414:Src/main.c    ****   uint8_t x, y;
 415:Src/main.c    **** 
 416:Src/main.c    ****   uint8_t a = 0; // for dummy data
 417:Src/main.c    ****   uint8_t b = 0; // for dummy data
 418:Src/main.c    **** 
 419:Src/main.c    ****   // ROTARY
 420:Src/main.c    ****   uint16_t  rpm_integral;
 421:Src/main.c    ****   uint8_t   index_animation;
 422:Src/main.c    **** 
 423:Src/main.c    ****   // circular buffer for ADC data
 424:Src/main.c    ****   uint16_t  circular_buffer_index = 0;
 425:Src/main.c    ****   int16_t   circular_buffer[128]={};
 426:Src/main.c    **** 
 427:Src/main.c    ****   /* USER CODE END Init */
 428:Src/main.c    **** 
 429:Src/main.c    ****   /* Configure the system clock */
 430:Src/main.c    ****   SystemClock_Config();
 431:Src/main.c    **** 
 432:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 433:Src/main.c    **** 
 434:Src/main.c    ****   /* USER CODE END SysInit */
 435:Src/main.c    **** 
 436:Src/main.c    ****   /* Initialize all configured peripherals */
 437:Src/main.c    ****   MX_GPIO_Init();
 438:Src/main.c    ****   MX_DMA_Init();
 439:Src/main.c    ****   MX_ADC1_Init();
 440:Src/main.c    ****   MX_CAN_Init();
 441:Src/main.c    ****   MX_I2C1_Init();
 442:Src/main.c    ****   MX_SPI1_Init();
 443:Src/main.c    ****   MX_TIM1_Init();
 444:Src/main.c    ****   MX_TIM2_Init();
 445:Src/main.c    ****   MX_TIM3_Init();
 446:Src/main.c    ****   MX_TIM6_Init();
 447:Src/main.c    ****   MX_USART1_UART_Init();
 448:Src/main.c    ****   MX_USART2_UART_Init();
 449:Src/main.c    ****   MX_TIM7_Init();
 450:Src/main.c    ****   MX_TIM16_Init();
 451:Src/main.c    ****   /* USER CODE BEGIN 2 */
 452:Src/main.c    **** 
 453:Src/main.c    ****   ///// PWM initialize ----------------------------------------------------------------
 454:Src/main.c    **** 
 455:Src/main.c    ****   ///// Timer /////
 456:Src/main.c    ****   // TIM1 - PWM for Fuel Pump Driver (Cycle 100kHz = 1MHz / 100count)
 457:Src/main.c    ****   //  if (HAL_TIM_Base_Start_IT(&htim1) != HAL_OK){
 458:Src/main.c    ****   if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1) != HAL_OK){
 459:Src/main.c    ****     Error_Handler();
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s 			page 15


 460:Src/main.c    ****   }
 461:Src/main.c    **** 
 462:Src/main.c    ****   // TIM2 - display (Cycle 20ms = 1/100kHz x 2,000count)
 463:Src/main.c    ****   if (HAL_TIM_Base_Start_IT(&htim2) != HAL_OK){
 464:Src/main.c    ****     Error_Handler();
 465:Src/main.c    ****   }
 466:Src/main.c    **** 
 467:Src/main.c    ****   // TIM3 - Pulse counter for Tacho (f 200kHz, count 65535)
 468:Src/main.c    ****   if (HAL_TIM_Base_Start_IT(&htim3) != HAL_OK){
 469:Src/main.c    ****     Error_Handler();
 470:Src/main.c    ****   }
 471:Src/main.c    **** 
 472:Src/main.c    ****   // TIM6 - Pulse counter for Speed (f 200kHz, count 65535)
 473:Src/main.c    ****   if (HAL_TIM_Base_Start_IT(&htim6) != HAL_OK){
 474:Src/main.c    ****     Error_Handler();
 475:Src/main.c    ****   }
 476:Src/main.c    **** 
 477:Src/main.c    ****   // TIM7 - SW interrupt control (Cycle 100ms = 1/100kHz x 10,000count)
 478:Src/main.c    ****   if (HAL_TIM_Base_Start_IT(&htim7) != HAL_OK){
 479:Src/main.c    ****     Error_Handler();
 480:Src/main.c    ****   }
 481:Src/main.c    **** 
 482:Src/main.c    ****   // TIM16 - Status control (Cycle 1000ms = 1/32.757kHz x 32,768count)
 483:Src/main.c    ****   if (HAL_TIM_Base_Start_IT(&htim16) != HAL_OK){
 484:Src/main.c    ****     Error_Handler();
 485:Src/main.c    ****   }
 486:Src/main.c    **** 
 487:Src/main.c    **** 
 488:Src/main.c    ****   // ADC
 489:Src/main.c    ****   HAL_ADC_Start_DMA(&hadc1, g_ADCBuffer, ADC_BUFFER_LENGTH);
 490:Src/main.c    **** 
 491:Src/main.c    ****   // UART1 interrupt setup for DEFI decoder
 492:Src/main.c    ****   HAL_UART_Receive_IT(&huart1, &UART1_Data, 1);
 493:Src/main.c    ****   // variables is defined in 'defi.h'
 494:Src/main.c    **** 
 495:Src/main.c    ****   // CAN initialization
 496:Src/main.c    ****   CAN_OBD_Init();
 497:Src/main.c    **** 
 498:Src/main.c    ****   // OLED diaplay initialization
 499:Src/main.c    ****   // 128x64 2.42inch SPI
 500:Src/main.c    ****    u8g2_Setup_ssd1309_128x64_noname2_f(&u8g2, U8G2_R0, u8x8_byte_4wire_hw_spi, u8x8_gpio_and_delay_
 501:Src/main.c    ****   // 128x64 1.3inch SPI
 502:Src/main.c    ****   //u8g2_Setup_sh1106_128x64_noname_f(&u8g2, U8G2_R0, u8x8_byte_4wire_hw_spi, u8x8_gpio_and_delay_S
 503:Src/main.c    **** 
 504:Src/main.c    ****   // OLED display Reset (must be more than 3us!!)
 505:Src/main.c    ****   HAL_GPIO_WritePin( GPIOB, GPIO_PIN_3, 0); // Set RES=L (OLED Reset)
 506:Src/main.c    ****   HAL_Delay(5);
 507:Src/main.c    ****   HAL_GPIO_WritePin( GPIOB, GPIO_PIN_3, 1); // Set RES=H (OLED activate)
 508:Src/main.c    ****   u8g2_InitDisplay(&u8g2); // send init sequence to the display, display is in sleep mode after thi
 509:Src/main.c    ****   u8g2_SetPowerSave(&u8g2, 0); // wake up display
 510:Src/main.c    ****   u8g2_SetContrast(&u8g2, 255); // set contrast
 511:Src/main.c    ****   u8g2_ClearDisplay(&u8g2);
 512:Src/main.c    **** 
 513:Src/main.c    ****   // draw opening
 514:Src/main.c    ****   u8g2_DrawXBMP(&u8g2, 40, 0, enfini_logo_width, enfini_logo_height, enfini_logo );
 515:Src/main.c    **** 
 516:Src/main.c    ****   u8g2_SetFont(&u8g2, u8g2_font_5x7_tf);
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s 			page 16


 517:Src/main.c    ****   u8g2_DrawStr(&u8g2, 16, 63 - 8, "Multi Function Meter");
 518:Src/main.c    ****   u8g2_DrawStr(&u8g2, 40, 64, "Rev. 0.2c");
 519:Src/main.c    ****   u8g2_SendBuffer(&u8g2);
 520:Src/main.c    **** 
 521:Src/main.c    ****   HAL_Delay(1000);
 522:Src/main.c    **** 
 523:Src/main.c    ****   u8g2_ClearBuffer(&u8g2);
 524:Src/main.c    **** 
 525:Src/main.c    ****   HAL_UART_Transmit_printf(&huart2, "Hello. This is MFM.\n");
 526:Src/main.c    **** 
 527:Src/main.c    ****   // Set PWM Duty for Timer1 / Output1 (Asymmetric PWM2)
 528:Src/main.c    ****   TIM1->CCR1 = (100 - FP_duty);
 529:Src/main.c    **** 
 530:Src/main.c    ****   /* USER CODE END 2 */
 531:Src/main.c    **** 
 532:Src/main.c    ****   /* Infinite loop */
 533:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 534:Src/main.c    **** 
 535:Src/main.c    ****   draw_MeasLabels();
 536:Src/main.c    ****   draw_indicators();
 537:Src/main.c    ****   u8g2_SendBuffer(&u8g2);
 538:Src/main.c    **** 
 539:Src/main.c    ****   // I2C communication to ADXL345(3-axis G-sensor)
 540:Src/main.c    ****   Gsens_EN = Gsens_ADXL345_Init(0);
 541:Src/main.c    **** 
 542:Src/main.c    ****   while(1){
 543:Src/main.c    ****     /* USER CODE END WHILE */
 544:Src/main.c    **** 
 545:Src/main.c    ****     /* USER CODE BEGIN 3 */
 546:Src/main.c    **** 
 547:Src/main.c    ****     ///// STATUS ----------------------------------------------------------------
 548:Src/main.c    ****     if( flag_status ){
 549:Src/main.c    ****       CAN_EN = 0;
 550:Src/main.c    ****       flag_status = 0;
 551:Src/main.c    ****     }
 552:Src/main.c    **** 
 553:Src/main.c    ****     if( CAN_EN == 0 ){
 554:Src/main.c    ****       CAN_EN = CAN_Received;
 555:Src/main.c    ****     }
 556:Src/main.c    **** 
 557:Src/main.c    ****     idct_status[0] = CAN_EN;
 558:Src/main.c    ****     idct_status[1] = Gsens_EN;
 559:Src/main.c    **** 
 560:Src/main.c    **** 
 561:Src/main.c    ****     ///// ADC ----------------------------------------------------------------
 562:Src/main.c    **** 
 563:Src/main.c    **** 		// read O2 sensor ADC output
 564:Src/main.c    **** 		O2_volt = (int16_t)(100.0 * 3.3 * (float)adc[0]/255.0);
 565:Src/main.c    ****     // Resister attenation ratio
 566:Src/main.c    ****     //    O2 amp : 1
 567:Src/main.c    ****     //    MFM Board : 1
 568:Src/main.c    ****     // Fractional digit : 0.01 = 100.0
 569:Src/main.c    **** 
 570:Src/main.c    **** 		// read Fuel Pump Voltage ADC output
 571:Src/main.c    **** 		FP_volt = (int16_t)(5.0 * 10.0 * 3.3 * (float)adc[1]/255.0);
 572:Src/main.c    ****     // Resister attenation ratio
 573:Src/main.c    ****     //    Fuel Pump driver : 1/5
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s 			page 17


 574:Src/main.c    ****     //    MFM Board : 1
 575:Src/main.c    ****     // Fractional digit : 0.1 = 10.0
 576:Src/main.c    **** 
 577:Src/main.c    ****     ///// Fuel Pump Driver ----------------------------------------------------------------
 578:Src/main.c    ****     // Duty calculation
 579:Src/main.c    ****     if( (rpm >= 3000)|(DEFI_value[0] > 0) ){ // DEFI_value[0] .. MAP
 580:Src/main.c    ****       FP_duty = 100;
 581:Src/main.c    ****     }else{
 582:Src/main.c    ****       FP_duty = (uint16_t)((float)rpm/3000.0*100.0);
 583:Src/main.c    ****     }
 584:Src/main.c    ****     // Saturation process
 585:Src/main.c    ****     if( FP_duty > 100 ){
 586:Src/main.c    ****       FP_duty = 100;
 587:Src/main.c    ****     }else if( FP_duty < 60 ){
 588:Src/main.c    ****       FP_duty = 60;
 589:Src/main.c    ****     }
 590:Src/main.c    **** 
 591:Src/main.c    **** 
 592:Src/main.c    ****     ///// CAN ----------------------------------------------------------------
 593:Src/main.c    **** 
 594:Src/main.c    ****     //CAN_OBD_Response(MAP, rpm, SPEED, THROTTLE, FUELPRESS);
 595:Src/main.c    ****     CAN_OBD_Response(DEFI_value[0], rpm, 0x00, 0x00, 0x00);
 596:Src/main.c    **** 
 597:Src/main.c    ****     ///// Measure data  ----------------------------------------------------------------
 598:Src/main.c    ****     defi_decoder(UART1_RxData); // DEFI decoder
 599:Src/main.c    **** 
 600:Src/main.c    ****     if( flag_meas == 1 ){
 601:Src/main.c    **** 
 602:Src/main.c    **** //      CAN_EN = 0;
 603:Src/main.c    **** 
 604:Src/main.c    ****       // I2C communication to ADXL345(3-axis G-sensor)
 605:Src/main.c    ****       if( Gsens_EN == 1 ){
 606:Src/main.c    ****         // Acceration 1G = 100
 607:Src/main.c    ****         Gsens_X = Gsens_ADXL345_Read_G('x', 0);
 608:Src/main.c    ****         Gsens_Y = Gsens_ADXL345_Read_G('y', 0);
 609:Src/main.c    ****         Gsens_Z = Gsens_ADXL345_Read_G('z', 0);
 610:Src/main.c    **** 
 611:Src/main.c    **** //        HAL_UART_Transmit_printf(&huart2, "(%d,%d,%d)\n", Gsens_X, Gsens_Y, Gsens_Z); // debug
 612:Src/main.c    ****         
 613:Src/main.c    ****       }
 614:Src/main.c    **** 
 615:Src/main.c    **** /*
 616:Src/main.c    ****   	  // start of create dummy data for debug
 617:Src/main.c    ****       if( rpm <= 8200 ){
 618:Src/main.c    ****           rpm = rpm + (int)(20*MT[gear]);
 619:Src/main.c    ****           //rpm=rpm+10;
 620:Src/main.c    ****       }else{
 621:Src/main.c    ****         if( gear < 4 ){
 622:Src/main.c    ****           gear++;
 623:Src/main.c    ****           rpm = (double)speed / (0.002*60.0) * (MT[gear]*4.1);
 624:Src/main.c    ****         }else{
 625:Src/main.c    ****           gear = 0;
 626:Src/main.c    ****           rpm = 1000;
 627:Src/main.c    ****         }
 628:Src/main.c    ****       }
 629:Src/main.c    ****       speed = (double)rpm*0.002*60.0/MT[gear]/4.1;
 630:Src/main.c    **** 
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s 			page 18


 631:Src/main.c    ****       if( a >= 150){
 632:Src/main.c    ****         a = 0;
 633:Src/main.c    ****       }else{
 634:Src/main.c    ****         a++;
 635:Src/main.c    ****       }
 636:Src/main.c    ****   	  // end of create dummy data for debug
 637:Src/main.c    **** */
 638:Src/main.c    **** 
 639:Src/main.c    ****       meas_value[0] = DEFI_value[0];  // MAP
 640:Src/main.c    **** 		  meas_value[1] = DEFI_value[2];  // OILP
 641:Src/main.c    **** 			meas_value[2] = FP_volt;        // FuelPump Voltage
 642:Src/main.c    **** 		  meas_value[3] = DEFI_value[6];  // ECT
 643:Src/main.c    **** 			meas_value[4] = DEFI_value[5];  // OILT
 644:Src/main.c    **** 		  meas_value[5] = O2_volt;        // O2
 645:Src/main.c    **** 
 646:Src/main.c    ****       flag_meas = 0; // enable again by TIM2 interrupt
 647:Src/main.c    ****     }
 648:Src/main.c    **** 
 649:Src/main.c    **** 
 650:Src/main.c    ****     ///// FP driver ----------------------------------------------------------------
 651:Src/main.c    ****     // Set PWM Duty for Timer1 / Output1 (Asymmetric PWM2)
 652:Src/main.c    ****     TIM1->CCR1 = (100 - FP_duty);
 653:Src/main.c    **** 
 654:Src/main.c    **** 
 655:Src/main.c    ****     ///// Switch ----------------------------------------------------------------
 656:Src/main.c    ****     if( flag_sw != 0 ){
 657:Src/main.c    ****       switch( flag_sw ){
 658:Src/main.c    ****         case 1: // SW "UP"
 659:Src/main.c    ****           #if DEBUG_USBserial
 660:Src/main.c    ****           HAL_UART_Transmit_printf(&huart2, "UP "); // debug
 661:Src/main.c    ****           HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 662:Src/main.c    ****           #endif
 663:Src/main.c    ****           if( mode < MODE_SETTING ){
 664:Src/main.c    ****             if( mode == N_mode-1 ){
 665:Src/main.c    ****               mode = 0;
 666:Src/main.c    ****             }else{
 667:Src/main.c    ****               mode++;
 668:Src/main.c    ****             }
 669:Src/main.c    ****           }
 670:Src/main.c    ****           break;
 671:Src/main.c    ****         case 2: // SW "DOWN"
 672:Src/main.c    ****           #if DEBUG_USBserial
 673:Src/main.c    ****           HAL_UART_Transmit_printf(&huart2, "DOWN "); // debug
 674:Src/main.c    ****           #endif
 675:Src/main.c    ****           HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 676:Src/main.c    ****           if( mode < MODE_SETTING ){
 677:Src/main.c    ****             if( mode == 0 ){
 678:Src/main.c    ****               mode = N_mode-1;
 679:Src/main.c    ****             }else{
 680:Src/main.c    ****               mode--;
 681:Src/main.c    ****             }
 682:Src/main.c    ****           }
 683:Src/main.c    ****           break;
 684:Src/main.c    ****         case 3: // SW "ENTER"
 685:Src/main.c    ****           #if DEBUG_USBserial
 686:Src/main.c    ****           HAL_UART_Transmit_printf(&huart2, "ENTER "); // debug
 687:Src/main.c    ****           #endif
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s 			page 19


 688:Src/main.c    ****           HAL_NVIC_DisableIRQ (EXTI1_IRQn);
 689:Src/main.c    **** 
 690:Src/main.c    ****           // if( setting == 0 ){
 691:Src/main.c    ****           //   mode = cursor;
 692:Src/main.c    ****           //   u8g2_ClearBuffer(&u8g2);
 693:Src/main.c    ****           // }else{
 694:Src/main.c    ****           //   mode = 10;
 695:Src/main.c    ****           // }
 696:Src/main.c    ****           // break;
 697:Src/main.c    **** 
 698:Src/main.c    ****         default:
 699:Src/main.c    ****           break;
 700:Src/main.c    ****       }
 701:Src/main.c    ****       u8g2_ClearBuffer(&u8g2);
 702:Src/main.c    ****       if( mode == MODE_BAR_METER ){
 703:Src/main.c    ****         draw_MeasLabels();
 704:Src/main.c    ****         draw_indicators();
 705:Src/main.c    **** 
 706:Src/main.c    ****       }else if( mode == MODE_CIRCULAR_METER ){
 707:Src/main.c    ****         for( n=0; n<N_meas_C; n++ ){
 708:Src/main.c    ****           x = meas_C_x;
 709:Src/main.c    ****           y = n * meas_C_height	+ meas_C_y;
 710:Src/main.c    ****           draw_MeasLabelUnit(&u8g2, x, y, meas_C_width, meas_C_height, meas_name[n], meas_unit[n]);
 711:Src/main.c    ****         }
 712:Src/main.c    ****         // draw indicators
 713:Src/main.c    ****         for( n=0; n<4; n++ ){
 714:Src/main.c    ****           draw_IndicatorBox(&u8g2, idct_x+(idct_width+2)*n, idct_y, idct_width, idct_height, idct_s
 715:Src/main.c    ****         }
 716:Src/main.c    ****         draw_CircularMeter_Init(32, 32, 31, 3, -60, 300, 10, 20, -1, -80, 120);
 717:Src/main.c    **** //        draw_CircularMeter_Init(26, 26, 26, 3, -60, 300, 10, 20, -1, -80, 120);
 718:Src/main.c    ****         draw_CircularMeter(&u8g2, 0);
 719:Src/main.c    **** 
 720:Src/main.c    ****       }else if( mode == MODE_ROTARY ){
 721:Src/main.c    ****         draw_MeasLabels_Rotary();
 722:Src/main.c    ****         draw_MeasLabelUnit(&u8g2, 0, 2, meas_width1, meas_height, "TACHO", "rpm");
 723:Src/main.c    **** 
 724:Src/main.c    ****       }else if( mode == MODE_SCOPE_MAP ){
 725:Src/main.c    ****         draw_Wave_axis(&u8g2, wave_x, wave_y, wave_width, wave_height, wave_value_min, wave_value_m
 726:Src/main.c    ****         draw_MeasLabelUnit(&u8g2, 0, 0, 64, 13, "MAP", "kPa");
 727:Src/main.c    **** 
 728:Src/main.c    ****       }else if( mode == MODE_SCOPE_Gsens ){
 729:Src/main.c    ****         draw_Wave_axis(&u8g2, wave_x, wave_y, wave_width, wave_height, -200, 200, 4);
 730:Src/main.c    ****         draw_MeasLabelUnit(&u8g2, 0, 0, 64, 13, "LatG", "G");
 731:Src/main.c    **** 
 732:Src/main.c    ****       }
 733:Src/main.c    ****       u8g2_SendBuffer(&u8g2);
 734:Src/main.c    **** 
 735:Src/main.c    ****       TIM6->CNT = 0;
 736:Src/main.c    ****       
 737:Src/main.c    ****       flag_sw = 0;
 738:Src/main.c    ****     }
 739:Src/main.c    **** 
 740:Src/main.c    **** 
 741:Src/main.c    ****     ///// Display sequence ----------------------------------------------------------------
 742:Src/main.c    ****     if( flag_disp ){
 743:Src/main.c    **** 
 744:Src/main.c    ****       ///// multi meter /////
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s 			page 20


 745:Src/main.c    ****       if( mode == MODE_BAR_METER ){
 746:Src/main.c    ****         // update Fuel Pump Voltage
 747:Src/main.c    ****         draw_Value(&u8g2, FP_x, FP_y, FP_duty_width, FP_height, FP_duty, 3, 0, 0, "%  ");
 748:Src/main.c    **** 
 749:Src/main.c    ****         // draw bar graph
 750:Src/main.c    ****         draw_BarGraph(&u8g2, rpmbar_x, rpmbar_y, rpmbar_width, rpmbar_height, rpm, rpm_min, rpm_max
 751:Src/main.c    **** 
 752:Src/main.c    ****         // draw measurement data
 753:Src/main.c    ****         for( n=0; n<3; n++ ){
 754:Src/main.c    ****           x = meas_x;
 755:Src/main.c    ****           y = (n % 3) * meas_height	+ meas_y;
 756:Src/main.c    ****           draw_Value(&u8g2, x, y, meas_width1, meas_height, meas_value[n], meas_digit[n], meas_frac
 757:Src/main.c    ****         }
 758:Src/main.c    ****         for( n=3; n<N_meas; n++ ){
 759:Src/main.c    ****           x = meas_width1 + meas_x + meas_x_offset;
 760:Src/main.c    ****           y = (n % 3) * meas_height	+ meas_y;
 761:Src/main.c    ****           draw_Value(&u8g2, x, y, meas_width2, meas_height, meas_value[n], meas_digit[n], meas_frac
 762:Src/main.c    ****         }
 763:Src/main.c    ****         
 764:Src/main.c    ****         draw_indicators();
 765:Src/main.c    **** 
 766:Src/main.c    ****       ///// Circular Meter /////
 767:Src/main.c    ****       }else if( mode == MODE_CIRCULAR_METER ){
 768:Src/main.c    **** 
 769:Src/main.c    ****         draw_CircularMeter(&u8g2, meas_value[0]);
 770:Src/main.c    ****         
 771:Src/main.c    ****         draw_Value(&u8g2, 36, 33, 30, 16, meas_value[0], 3, 2, 1, "");
 772:Src/main.c    ****         draw_MeasUnit(&u8g2, 38, 40, 28, 16, "kPa");
 773:Src/main.c    **** /*        
 774:Src/main.c    ****         draw_Value(&u8g2, 34, 28, 30, 16, meas_value[0], 3, 2, 1, "");
 775:Src/main.c    ****         draw_MeasUnit(&u8g2, 36, 36, 28, 16, "kPa");
 776:Src/main.c    **** */
 777:Src/main.c    **** 
 778:Src/main.c    ****         // draw measurement data
 779:Src/main.c    ****         for( n=0; n<N_meas_C; n++ ){
 780:Src/main.c    ****           x = meas_C_x;
 781:Src/main.c    ****           y = n * meas_C_height	+ meas_C_y;
 782:Src/main.c    ****           draw_Value(&u8g2, x, y, meas_C_width, meas_C_height, meas_value[n], meas_digit[n], meas_f
 783:Src/main.c    ****         }
 784:Src/main.c    **** 
 785:Src/main.c    **** 
 786:Src/main.c    ****       }else if( mode == MODE_ROTARY ){
 787:Src/main.c    **** 
 788:Src/main.c    ****         rpm_integral = rpm_integral + rpm;
 789:Src/main.c    ****         if( rpm_integral > 10000 ){
 790:Src/main.c    ****           rpm_integral = rpm_integral - 10000;
 791:Src/main.c    ****         }
 792:Src/main.c    ****         index_animation = (uint8_t)( (float)rpm_integral / 1000.0 );
 793:Src/main.c    **** 
 794:Src/main.c    ****         draw_Rotary(&u8g2, 58, 2, index_animation);
 795:Src/main.c    **** 
 796:Src/main.c    ****         draw_MeasLabelUnit(&u8g2, 0, 2, meas_width1, meas_height, "TACHO", "rpm");
 797:Src/main.c    ****         draw_Value(&u8g2, 0, 2, meas_width1, meas_height, rpm, 4, 0, 0, "rpm");
 798:Src/main.c    **** 
 799:Src/main.c    ****         draw_MeasLabels_Rotary();
 800:Src/main.c    ****         // draw measurement data
 801:Src/main.c    ****         for( n=0; n<4; n++ ){
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s 			page 21


 802:Src/main.c    ****           x = meas_x;
 803:Src/main.c    ****           y = (n % 4) * meas_height	+ meas_y;
 804:Src/main.c    ****           draw_Value(&u8g2, x, y, meas_width1, meas_height, meas_value[n], meas_digit[n], meas_frac
 805:Src/main.c    ****         }
 806:Src/main.c    **** 
 807:Src/main.c    **** 
 808:Src/main.c    ****       ///// Scope /////
 809:Src/main.c    ****       }else if( mode == MODE_SCOPE_MAP ){
 810:Src/main.c    **** 
 811:Src/main.c    ****         if( circular_buffer_index > 0 ){
 812:Src/main.c    ****           circular_buffer_index--;
 813:Src/main.c    ****         }else{
 814:Src/main.c    ****           circular_buffer_index = 128;
 815:Src/main.c    ****         }
 816:Src/main.c    ****         circular_buffer[circular_buffer_index] = meas_value[0];
 817:Src/main.c    **** 
 818:Src/main.c    ****         // draw wave
 819:Src/main.c    ****         draw_Wave(&u8g2, wave_x, wave_y, wave_width, wave_height, wave_value_min, wave_value_max, c
 820:Src/main.c    ****         draw_Value(&u8g2, 0, 0, 64, 13, circular_buffer[circular_buffer_index], 3, 2, 1, "kPa");
 821:Src/main.c    **** 
 822:Src/main.c    ****       ///// G-Scope /////
 823:Src/main.c    ****       }else if( mode == MODE_SCOPE_Gsens ){
 824:Src/main.c    **** 
 825:Src/main.c    ****         if( circular_buffer_index > 0 ){
 826:Src/main.c    ****           circular_buffer_index--;
 827:Src/main.c    ****         }else{
 828:Src/main.c    ****           circular_buffer_index = 128;
 829:Src/main.c    ****         }
 830:Src/main.c    ****         circular_buffer[circular_buffer_index] = Gsens_Y;
 831:Src/main.c    **** 
 832:Src/main.c    ****         // draw wave
 833:Src/main.c    ****         draw_Wave(&u8g2, wave_x, wave_y, wave_width, wave_height, -200, +200, circular_buffer, circ
 834:Src/main.c    ****         draw_Value(&u8g2, 0, 0, 64, 13, circular_buffer[circular_buffer_index], 3, 2, 1, "G");
 835:Src/main.c    **** 
 836:Src/main.c    ****       // mode setting
 837:Src/main.c    ****       }else if( mode == MODE_SETTING ){
 838:Src/main.c    **** 
 839:Src/main.c    ****         u8g2_ClearBuffer(&u8g2);
 840:Src/main.c    ****         u8g2_SetFont(&u8g2, u8g2_font_7x14B_tf);
 841:Src/main.c    ****         u8g2_DrawStr(&u8g2, 2, 15, "Mode Setting" );
 842:Src/main.c    ****         if( cursor == 0 ){
 843:Src/main.c    ****           u8g2_DrawStr(&u8g2, 2, 30, ">" );
 844:Src/main.c    ****         }else{
 845:Src/main.c    ****           u8g2_DrawStr(&u8g2, 2, 30, " " );
 846:Src/main.c    ****         }
 847:Src/main.c    ****         u8g2_DrawStr(&u8g2,10, 30, "Multi-Meter" );
 848:Src/main.c    ****         if( cursor == 1 ){
 849:Src/main.c    ****           u8g2_DrawStr(&u8g2, 2, 45, ">" );
 850:Src/main.c    ****         }else{
 851:Src/main.c    ****           u8g2_DrawStr(&u8g2, 2, 45, " " );
 852:Src/main.c    ****         }
 853:Src/main.c    ****         u8g2_DrawStr(&u8g2,10, 45, "Scope" );
 854:Src/main.c    ****         u8g2_SendBuffer(&u8g2);
 855:Src/main.c    **** 
 856:Src/main.c    ****       }
 857:Src/main.c    ****       // send buffer
 858:Src/main.c    ****       u8g2_SendBuffer(&u8g2);
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s 			page 22


 859:Src/main.c    **** 
 860:Src/main.c    ****       flag_disp = 0; // enable again by TIM2 interrupt
 861:Src/main.c    ****     }
 862:Src/main.c    **** 
 863:Src/main.c    ****   }
 864:Src/main.c    ****   /* USER CODE END 3 */
 865:Src/main.c    **** }
 866:Src/main.c    **** 
 867:Src/main.c    **** /**
 868:Src/main.c    ****   * @brief System Clock Configuration
 869:Src/main.c    ****   * @retval None
 870:Src/main.c    ****   */
 871:Src/main.c    **** void SystemClock_Config(void)
 872:Src/main.c    **** {
 343              		.loc 1 872 0
 344              		.cfi_startproc
 345              		@ args = 0, pretend = 0, frame = 88
 346              		@ frame_needed = 0, uses_anonymous_args = 0
 347 0000 30B5     		push	{r4, r5, lr}
 348              	.LCFI9:
 349              		.cfi_def_cfa_offset 12
 350              		.cfi_offset 4, -12
 351              		.cfi_offset 5, -8
 352              		.cfi_offset 14, -4
 353 0002 97B0     		sub	sp, sp, #92
 354              	.LCFI10:
 355              		.cfi_def_cfa_offset 104
 873:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 356              		.loc 1 873 0
 357 0004 0023     		movs	r3, #0
 874:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 875:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 876:Src/main.c    **** 
 877:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 878:Src/main.c    ****   */
 879:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 358              		.loc 1 879 0
 359 0006 0324     		movs	r4, #3
 880:Src/main.c    ****   RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 360              		.loc 1 880 0
 361 0008 4FF4A022 		mov	r2, #327680
 881:Src/main.c    ****   RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 882:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 362              		.loc 1 882 0
 363 000c 0120     		movs	r0, #1
 873:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 364              		.loc 1 873 0
 365 000e CDE90E33 		strd	r3, r3, [sp, #56]
 366 0012 1293     		str	r3, [sp, #72]
 874:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 367              		.loc 1 874 0
 368 0014 0193     		str	r3, [sp, #4]
 875:Src/main.c    **** 
 369              		.loc 1 875 0
 370 0016 0693     		str	r3, [sp, #24]
 874:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 371              		.loc 1 874 0
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s 			page 23


 372 0018 CDE90233 		strd	r3, r3, [sp, #8]
 373 001c CDE90433 		strd	r3, r3, [sp, #16]
 875:Src/main.c    **** 
 374              		.loc 1 875 0
 375 0020 CDE90733 		strd	r3, r3, [sp, #28]
 376 0024 CDE90933 		strd	r3, r3, [sp, #36]
 377 0028 0B93     		str	r3, [sp, #44]
 883:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 378              		.loc 1 883 0
 379 002a 1021     		movs	r1, #16
 879:Src/main.c    ****   RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 380              		.loc 1 879 0
 381 002c 0C94     		str	r4, [sp, #48]
 880:Src/main.c    ****   RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 382              		.loc 1 880 0
 383 002e 0D92     		str	r2, [sp, #52]
 884:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 384              		.loc 1 884 0
 385 0030 0224     		movs	r4, #2
 885:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 386              		.loc 1 885 0
 387 0032 4FF48032 		mov	r2, #65536
 882:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 388              		.loc 1 882 0
 389 0036 1090     		str	r0, [sp, #64]
 886:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 390              		.loc 1 886 0
 391 0038 4FF4E013 		mov	r3, #1835008
 887:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 392              		.loc 1 887 0
 393 003c 0CA8     		add	r0, sp, #48
 883:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 394              		.loc 1 883 0
 395 003e 1191     		str	r1, [sp, #68]
 885:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 396              		.loc 1 885 0
 397 0040 CDE91342 		strd	r4, r2, [sp, #76]
 886:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 398              		.loc 1 886 0
 399 0044 1593     		str	r3, [sp, #84]
 400              		.loc 1 887 0
 401 0046 FFF7FEFF 		bl	HAL_RCC_OscConfig
 402              	.LVL18:
 403 004a 00B1     		cbz	r0, .L22
 404              	.L23:
 405 004c FEE7     		b	.L23
 406              	.L22:
 407 004e 0346     		mov	r3, r0
 888:Src/main.c    ****   {
 889:Src/main.c    ****     Error_Handler();
 890:Src/main.c    ****   }
 891:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 892:Src/main.c    ****   */
 893:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 894:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 895:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 896:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s 			page 24


 897:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 408              		.loc 1 897 0
 409 0050 4FF48062 		mov	r2, #1024
 898:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 899:Src/main.c    **** 
 900:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 410              		.loc 1 900 0
 411 0054 01A8     		add	r0, sp, #4
 412 0056 2146     		mov	r1, r4
 893:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 413              		.loc 1 893 0
 414 0058 0F25     		movs	r5, #15
 896:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 415              		.loc 1 896 0
 416 005a 0393     		str	r3, [sp, #12]
 898:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 417              		.loc 1 898 0
 418 005c 0593     		str	r3, [sp, #20]
 895:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 419              		.loc 1 895 0
 420 005e 0294     		str	r4, [sp, #8]
 893:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 421              		.loc 1 893 0
 422 0060 0195     		str	r5, [sp, #4]
 897:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 423              		.loc 1 897 0
 424 0062 0492     		str	r2, [sp, #16]
 425              		.loc 1 900 0
 426 0064 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 427              	.LVL19:
 428 0068 0346     		mov	r3, r0
 429 006a 00B1     		cbz	r0, .L24
 430              	.L25:
 431 006c FEE7     		b	.L25
 432              	.L24:
 901:Src/main.c    ****   {
 902:Src/main.c    ****     Error_Handler();
 903:Src/main.c    ****   }
 904:Src/main.c    ****   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 433              		.loc 1 904 0
 434 006e 41F22102 		movw	r2, #4129
 905:Src/main.c    ****                               |RCC_PERIPHCLK_TIM1;
 906:Src/main.c    ****   PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 907:Src/main.c    ****   PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 908:Src/main.c    ****   PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 909:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 435              		.loc 1 909 0
 436 0072 06A8     		add	r0, sp, #24
 907:Src/main.c    ****   PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 437              		.loc 1 907 0
 438 0074 CDE90833 		strd	r3, r3, [sp, #32]
 908:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 439              		.loc 1 908 0
 440 0078 0B93     		str	r3, [sp, #44]
 904:Src/main.c    ****                               |RCC_PERIPHCLK_TIM1;
 441              		.loc 1 904 0
 442 007a 0692     		str	r2, [sp, #24]
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s 			page 25


 443              		.loc 1 909 0
 444 007c FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 445              	.LVL20:
 446 0080 00B1     		cbz	r0, .L21
 447              	.L27:
 448 0082 FEE7     		b	.L27
 449              	.L21:
 910:Src/main.c    ****   {
 911:Src/main.c    ****     Error_Handler();
 912:Src/main.c    ****   }
 913:Src/main.c    **** }
 450              		.loc 1 913 0
 451 0084 17B0     		add	sp, sp, #92
 452              	.LCFI11:
 453              		.cfi_def_cfa_offset 12
 454              		@ sp needed
 455 0086 30BD     		pop	{r4, r5, pc}
 456              		.cfi_endproc
 457              	.LFE131:
 459              		.global	__aeabi_f2d
 460              		.global	__aeabi_dmul
 461              		.global	__aeabi_ddiv
 462              		.global	__aeabi_d2iz
 463              		.global	__aeabi_d2uiz
 464              		.section	.text.startup.main,"ax",%progbits
 465              		.align	1
 466              		.p2align 2,,3
 467              		.global	main
 468              		.syntax unified
 469              		.thumb
 470              		.thumb_func
 471              		.fpu fpv4-sp-d16
 473              	main:
 474              	.LFB130:
 401:Src/main.c    ****   /* USER CODE BEGIN 1 */
 475              		.loc 1 401 0
 476              		.cfi_startproc
 477              		@ args = 0, pretend = 0, frame = 272
 478              		@ frame_needed = 0, uses_anonymous_args = 0
 479 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 480              	.LCFI12:
 481              		.cfi_def_cfa_offset 36
 482              		.cfi_offset 4, -36
 483              		.cfi_offset 5, -32
 484              		.cfi_offset 6, -28
 485              		.cfi_offset 7, -24
 486              		.cfi_offset 8, -20
 487              		.cfi_offset 9, -16
 488              		.cfi_offset 10, -12
 489              		.cfi_offset 11, -8
 490              		.cfi_offset 14, -4
 491 0004 CDB0     		sub	sp, sp, #308
 492              	.LCFI13:
 493              		.cfi_def_cfa_offset 344
 410:Src/main.c    **** 
 494              		.loc 1 410 0
 495 0006 FFF7FEFF 		bl	HAL_Init
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s 			page 26


 496              	.LVL21:
 425:Src/main.c    **** 
 497              		.loc 1 425 0
 498 000a 0021     		movs	r1, #0
 499 000c 4FF48072 		mov	r2, #256
 500 0010 0CA8     		add	r0, sp, #48
 501 0012 FFF7FEFF 		bl	memset
 502              	.LVL22:
 430:Src/main.c    **** 
 503              		.loc 1 430 0
 504 0016 FFF7FEFF 		bl	SystemClock_Config
 505              	.LVL23:
 437:Src/main.c    ****   MX_DMA_Init();
 506              		.loc 1 437 0
 507 001a FFF7FEFF 		bl	MX_GPIO_Init
 508              	.LVL24:
 438:Src/main.c    ****   MX_ADC1_Init();
 509              		.loc 1 438 0
 510 001e FFF7FEFF 		bl	MX_DMA_Init
 511              	.LVL25:
 439:Src/main.c    ****   MX_CAN_Init();
 512              		.loc 1 439 0
 513 0022 FFF7FEFF 		bl	MX_ADC1_Init
 514              	.LVL26:
 440:Src/main.c    ****   MX_I2C1_Init();
 515              		.loc 1 440 0
 516 0026 FFF7FEFF 		bl	MX_CAN_Init
 517              	.LVL27:
 441:Src/main.c    ****   MX_SPI1_Init();
 518              		.loc 1 441 0
 519 002a FFF7FEFF 		bl	MX_I2C1_Init
 520              	.LVL28:
 442:Src/main.c    ****   MX_TIM1_Init();
 521              		.loc 1 442 0
 522 002e FFF7FEFF 		bl	MX_SPI1_Init
 523              	.LVL29:
 443:Src/main.c    ****   MX_TIM2_Init();
 524              		.loc 1 443 0
 525 0032 FFF7FEFF 		bl	MX_TIM1_Init
 526              	.LVL30:
 444:Src/main.c    ****   MX_TIM3_Init();
 527              		.loc 1 444 0
 528 0036 FFF7FEFF 		bl	MX_TIM2_Init
 529              	.LVL31:
 445:Src/main.c    ****   MX_TIM6_Init();
 530              		.loc 1 445 0
 531 003a FFF7FEFF 		bl	MX_TIM3_Init
 532              	.LVL32:
 446:Src/main.c    ****   MX_USART1_UART_Init();
 533              		.loc 1 446 0
 534 003e FFF7FEFF 		bl	MX_TIM6_Init
 535              	.LVL33:
 447:Src/main.c    ****   MX_USART2_UART_Init();
 536              		.loc 1 447 0
 537 0042 FFF7FEFF 		bl	MX_USART1_UART_Init
 538              	.LVL34:
 448:Src/main.c    ****   MX_TIM7_Init();
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s 			page 27


 539              		.loc 1 448 0
 540 0046 FFF7FEFF 		bl	MX_USART2_UART_Init
 541              	.LVL35:
 449:Src/main.c    ****   MX_TIM16_Init();
 542              		.loc 1 449 0
 543 004a FFF7FEFF 		bl	MX_TIM7_Init
 544              	.LVL36:
 450:Src/main.c    ****   /* USER CODE BEGIN 2 */
 545              		.loc 1 450 0
 546 004e FFF7FEFF 		bl	MX_TIM16_Init
 547              	.LVL37:
 458:Src/main.c    ****     Error_Handler();
 548              		.loc 1 458 0
 549 0052 0021     		movs	r1, #0
 550 0054 B848     		ldr	r0, .L122+32
 551 0056 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 552              	.LVL38:
 553 005a 00B1     		cbz	r0, .L30
 554              	.L31:
 555 005c FEE7     		b	.L31
 556              	.L30:
 463:Src/main.c    ****     Error_Handler();
 557              		.loc 1 463 0
 558 005e B748     		ldr	r0, .L122+36
 559 0060 FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 560              	.LVL39:
 561 0064 00B1     		cbz	r0, .L32
 562              	.L33:
 563 0066 FEE7     		b	.L33
 564              	.L32:
 468:Src/main.c    ****     Error_Handler();
 565              		.loc 1 468 0
 566 0068 B548     		ldr	r0, .L122+40
 567 006a FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 568              	.LVL40:
 569 006e 00B1     		cbz	r0, .L34
 570              	.L35:
 571 0070 FEE7     		b	.L35
 572              	.L34:
 473:Src/main.c    ****     Error_Handler();
 573              		.loc 1 473 0
 574 0072 B448     		ldr	r0, .L122+44
 575 0074 FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 576              	.LVL41:
 577 0078 00B1     		cbz	r0, .L36
 578              	.L37:
 579 007a FEE7     		b	.L37
 580              	.L36:
 478:Src/main.c    ****     Error_Handler();
 581              		.loc 1 478 0
 582 007c B248     		ldr	r0, .L122+48
 583 007e FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 584              	.LVL42:
 585 0082 00B1     		cbz	r0, .L38
 586              	.L39:
 587 0084 FEE7     		b	.L39
 588              	.L38:
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s 			page 28


 483:Src/main.c    ****     Error_Handler();
 589              		.loc 1 483 0
 590 0086 B148     		ldr	r0, .L122+52
 591 0088 FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 592              	.LVL43:
 593 008c 0546     		mov	r5, r0
 594 008e 00B1     		cbz	r0, .L40
 595              	.L41:
 596 0090 FEE7     		b	.L41
 597              	.L40:
 489:Src/main.c    **** 
 598              		.loc 1 489 0
 599 0092 0A22     		movs	r2, #10
 600 0094 AE49     		ldr	r1, .L122+56
 601 0096 AF48     		ldr	r0, .L122+60
 528:Src/main.c    **** 
 602              		.loc 1 528 0
 603 0098 DFF830B3 		ldr	fp, .L122+180
 604 009c DFF83093 		ldr	r9, .L122+184
 605 00a0 DFF83083 		ldr	r8, .L122+188
 606 00a4 AC4C     		ldr	r4, .L122+64
 607 00a6 DFF830A3 		ldr	r10, .L122+192
 489:Src/main.c    **** 
 608              		.loc 1 489 0
 609 00aa FFF7FEFF 		bl	HAL_ADC_Start_DMA
 610              	.LVL44:
 492:Src/main.c    ****   // variables is defined in 'defi.h'
 611              		.loc 1 492 0
 612 00ae 0122     		movs	r2, #1
 613 00b0 AA49     		ldr	r1, .L122+68
 614 00b2 AB48     		ldr	r0, .L122+72
 615 00b4 FFF7FEFF 		bl	HAL_UART_Receive_IT
 616              	.LVL45:
 496:Src/main.c    **** 
 617              		.loc 1 496 0
 618 00b8 FFF7FEFF 		bl	CAN_OBD_Init
 619              	.LVL46:
 500:Src/main.c    ****   // 128x64 1.3inch SPI
 620              		.loc 1 500 0
 621 00bc A94B     		ldr	r3, .L122+76
 622 00be AA4A     		ldr	r2, .L122+80
 623 00c0 AA49     		ldr	r1, .L122+84
 624 00c2 AB48     		ldr	r0, .L122+88
 625 00c4 FFF7FEFF 		bl	u8g2_Setup_ssd1309_128x64_noname2_f
 626              	.LVL47:
 505:Src/main.c    ****   HAL_Delay(5);
 627              		.loc 1 505 0
 628 00c8 2A46     		mov	r2, r5
 629 00ca 0821     		movs	r1, #8
 630 00cc A948     		ldr	r0, .L122+92
 631 00ce FFF7FEFF 		bl	HAL_GPIO_WritePin
 632              	.LVL48:
 506:Src/main.c    ****   HAL_GPIO_WritePin( GPIOB, GPIO_PIN_3, 1); // Set RES=H (OLED activate)
 633              		.loc 1 506 0
 634 00d2 0520     		movs	r0, #5
 635 00d4 FFF7FEFF 		bl	HAL_Delay
 636              	.LVL49:
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s 			page 29


 507:Src/main.c    ****   u8g2_InitDisplay(&u8g2); // send init sequence to the display, display is in sleep mode after thi
 637              		.loc 1 507 0
 638 00d8 0122     		movs	r2, #1
 639 00da 0821     		movs	r1, #8
 640 00dc A548     		ldr	r0, .L122+92
 641 00de FFF7FEFF 		bl	HAL_GPIO_WritePin
 642              	.LVL50:
 508:Src/main.c    ****   u8g2_SetPowerSave(&u8g2, 0); // wake up display
 643              		.loc 1 508 0
 644 00e2 A348     		ldr	r0, .L122+88
 645 00e4 FFF7FEFF 		bl	u8x8_InitDisplay
 646              	.LVL51:
 509:Src/main.c    ****   u8g2_SetContrast(&u8g2, 255); // set contrast
 647              		.loc 1 509 0
 648 00e8 2946     		mov	r1, r5
 649 00ea A148     		ldr	r0, .L122+88
 650 00ec FFF7FEFF 		bl	u8x8_SetPowerSave
 651              	.LVL52:
 510:Src/main.c    ****   u8g2_ClearDisplay(&u8g2);
 652              		.loc 1 510 0
 653 00f0 FF21     		movs	r1, #255
 654 00f2 9F48     		ldr	r0, .L122+88
 655 00f4 FFF7FEFF 		bl	u8x8_SetContrast
 656              	.LVL53:
 511:Src/main.c    **** 
 657              		.loc 1 511 0
 658 00f8 9D48     		ldr	r0, .L122+88
 659 00fa FFF7FEFF 		bl	u8g2_ClearDisplay
 660              	.LVL54:
 514:Src/main.c    **** 
 661              		.loc 1 514 0
 662 00fe 9E4B     		ldr	r3, .L122+96
 663 0100 0193     		str	r3, [sp, #4]
 664 0102 3023     		movs	r3, #48
 665 0104 0093     		str	r3, [sp]
 666 0106 2A46     		mov	r2, r5
 667 0108 2821     		movs	r1, #40
 668 010a 9948     		ldr	r0, .L122+88
 669 010c FFF7FEFF 		bl	u8g2_DrawXBMP
 670              	.LVL55:
 516:Src/main.c    ****   u8g2_DrawStr(&u8g2, 16, 63 - 8, "Multi Function Meter");
 671              		.loc 1 516 0
 672 0110 9A49     		ldr	r1, .L122+100
 673 0112 9748     		ldr	r0, .L122+88
 674 0114 FFF7FEFF 		bl	u8g2_SetFont
 675              	.LVL56:
 517:Src/main.c    ****   u8g2_DrawStr(&u8g2, 40, 64, "Rev. 0.2c");
 676              		.loc 1 517 0
 677 0118 994B     		ldr	r3, .L122+104
 678 011a 9548     		ldr	r0, .L122+88
 679 011c 3722     		movs	r2, #55
 680 011e 1021     		movs	r1, #16
 681 0120 FFF7FEFF 		bl	u8g2_DrawStr
 682              	.LVL57:
 518:Src/main.c    ****   u8g2_SendBuffer(&u8g2);
 683              		.loc 1 518 0
 684 0124 974B     		ldr	r3, .L122+108
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s 			page 30


 685 0126 9248     		ldr	r0, .L122+88
 686 0128 4022     		movs	r2, #64
 687 012a 2821     		movs	r1, #40
 688 012c FFF7FEFF 		bl	u8g2_DrawStr
 689              	.LVL58:
 519:Src/main.c    **** 
 690              		.loc 1 519 0
 691 0130 8F48     		ldr	r0, .L122+88
 692 0132 FFF7FEFF 		bl	u8g2_SendBuffer
 693              	.LVL59:
 521:Src/main.c    **** 
 694              		.loc 1 521 0
 695 0136 4FF47A70 		mov	r0, #1000
 696 013a FFF7FEFF 		bl	HAL_Delay
 697              	.LVL60:
 523:Src/main.c    **** 
 698              		.loc 1 523 0
 699 013e 8C48     		ldr	r0, .L122+88
 700 0140 FFF7FEFF 		bl	u8g2_ClearBuffer
 701              	.LVL61:
 525:Src/main.c    **** 
 702              		.loc 1 525 0
 703 0144 9049     		ldr	r1, .L122+112
 704 0146 9148     		ldr	r0, .L122+116
 705 0148 FFF7FEFF 		bl	HAL_UART_Transmit_printf
 706              	.LVL62:
 528:Src/main.c    **** 
 707              		.loc 1 528 0
 708 014c BBF90030 		ldrsh	r3, [fp]
 709 0150 8F4A     		ldr	r2, .L122+120
 710 0152 C3F16403 		rsb	r3, r3, #100
 711 0156 5363     		str	r3, [r2, #52]
 535:Src/main.c    ****   draw_indicators();
 712              		.loc 1 535 0
 713 0158 FFF7FEFF 		bl	draw_MeasLabels
 714              	.LVL63:
 536:Src/main.c    ****   u8g2_SendBuffer(&u8g2);
 715              		.loc 1 536 0
 716 015c FFF7FEFF 		bl	draw_indicators
 717              	.LVL64:
 537:Src/main.c    **** 
 718              		.loc 1 537 0
 719 0160 8348     		ldr	r0, .L122+88
 720 0162 FFF7FEFF 		bl	u8g2_SendBuffer
 721              	.LVL65:
 540:Src/main.c    **** 
 722              		.loc 1 540 0
 723 0166 2846     		mov	r0, r5
 724 0168 FFF7FEFF 		bl	Gsens_ADXL345_Init
 725              	.LVL66:
 726 016c 894B     		ldr	r3, .L122+124
 424:Src/main.c    ****   int16_t   circular_buffer[128]={};
 727              		.loc 1 424 0
 728 016e 0995     		str	r5, [sp, #36]
 540:Src/main.c    **** 
 729              		.loc 1 540 0
 730 0170 1870     		strb	r0, [r3]
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s 			page 31


 731 0172 A8E0     		b	.L67
 732              	.LVL67:
 733              	.L113:
 734              	.LBB29:
 550:Src/main.c    ****     }
 735              		.loc 1 550 0
 736 0174 0023     		movs	r3, #0
 737 0176 C9F80030 		str	r3, [r9]
 738              	.L43:
 554:Src/main.c    ****     }
 739              		.loc 1 554 0
 740 017a 874B     		ldr	r3, .L122+128
 741 017c 874A     		ldr	r2, .L122+132
 742 017e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 743 0180 DBB2     		uxtb	r3, r3
 744 0182 1370     		strb	r3, [r2]
 745              	.L44:
 564:Src/main.c    ****     // Resister attenation ratio
 746              		.loc 1 564 0
 747 0184 864D     		ldr	r5, .L122+136
 558:Src/main.c    **** 
 748              		.loc 1 558 0
 749 0186 834A     		ldr	r2, .L122+124
 564:Src/main.c    ****     // Resister attenation ratio
 750              		.loc 1 564 0
 751 0188 2888     		ldrh	r0, [r5]
 557:Src/main.c    ****     idct_status[1] = Gsens_EN;
 752              		.loc 1 557 0
 753 018a 8649     		ldr	r1, .L122+140
 558:Src/main.c    **** 
 754              		.loc 1 558 0
 755 018c 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 557:Src/main.c    ****     idct_status[1] = Gsens_EN;
 756              		.loc 1 557 0
 757 018e 0B70     		strb	r3, [r1]
 564:Src/main.c    ****     // Resister attenation ratio
 758              		.loc 1 564 0
 759 0190 07EE900A 		vmov	s15, r0	@ int
 760 0194 F8EE677A 		vcvt.f32.u32	s15, s15
 558:Src/main.c    **** 
 761              		.loc 1 558 0
 762 0198 4A70     		strb	r2, [r1, #1]
 564:Src/main.c    ****     // Resister attenation ratio
 763              		.loc 1 564 0
 764 019a 17EE900A 		vmov	r0, s15
 765 019e FFF7FEFF 		bl	__aeabi_f2d
 766              	.LVL68:
 767 01a2 5DA3     		adr	r3, .L122
 768 01a4 D3E90023 		ldrd	r2, [r3]
 769 01a8 FFF7FEFF 		bl	__aeabi_dmul
 770              	.LVL69:
 771 01ac 5CA3     		adr	r3, .L122+8
 772 01ae D3E90023 		ldrd	r2, [r3]
 773 01b2 FFF7FEFF 		bl	__aeabi_ddiv
 774              	.LVL70:
 775 01b6 FFF7FEFF 		bl	__aeabi_d2iz
 776              	.LVL71:
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s 			page 32


 571:Src/main.c    ****     // Resister attenation ratio
 777              		.loc 1 571 0
 778 01ba 6B88     		ldrh	r3, [r5, #2]
 564:Src/main.c    ****     // Resister attenation ratio
 779              		.loc 1 564 0
 780 01bc 7A4A     		ldr	r2, .L122+144
 571:Src/main.c    ****     // Resister attenation ratio
 781              		.loc 1 571 0
 782 01be 07EE903A 		vmov	s15, r3	@ int
 783 01c2 F8EE677A 		vcvt.f32.u32	s15, s15
 564:Src/main.c    ****     // Resister attenation ratio
 784              		.loc 1 564 0
 785 01c6 1080     		strh	r0, [r2]	@ movhi
 571:Src/main.c    ****     // Resister attenation ratio
 786              		.loc 1 571 0
 787 01c8 17EE900A 		vmov	r0, s15
 788 01cc FFF7FEFF 		bl	__aeabi_f2d
 789              	.LVL72:
 790 01d0 55A3     		adr	r3, .L122+16
 791 01d2 D3E90023 		ldrd	r2, [r3]
 792 01d6 FFF7FEFF 		bl	__aeabi_dmul
 793              	.LVL73:
 794 01da 51A3     		adr	r3, .L122+8
 795 01dc D3E90023 		ldrd	r2, [r3]
 796 01e0 FFF7FEFF 		bl	__aeabi_ddiv
 797              	.LVL74:
 798 01e4 FFF7FEFF 		bl	__aeabi_d2iz
 799              	.LVL75:
 579:Src/main.c    ****       FP_duty = 100;
 800              		.loc 1 579 0
 801 01e8 B8F80030 		ldrh	r3, [r8]
 571:Src/main.c    ****     // Resister attenation ratio
 802              		.loc 1 571 0
 803 01ec 6F49     		ldr	r1, .L122+148
 579:Src/main.c    ****       FP_duty = 100;
 804              		.loc 1 579 0
 805 01ee 2288     		ldrh	r2, [r4]
 571:Src/main.c    ****     // Resister attenation ratio
 806              		.loc 1 571 0
 807 01f0 0880     		strh	r0, [r1]	@ movhi
 579:Src/main.c    ****       FP_duty = 100;
 808              		.loc 1 579 0
 809 01f2 1BB2     		sxth	r3, r3
 810 01f4 40F6B731 		movw	r1, #2999
 811 01f8 8B42     		cmp	r3, r1
 812 01fa 12B2     		sxth	r2, r2
 813 01fc 1DDC     		bgt	.L48
 814 01fe 002A     		cmp	r2, #0
 815 0200 1BDC     		bgt	.L48
 582:Src/main.c    ****     }
 816              		.loc 1 582 0
 817 0202 B8F80030 		ldrh	r3, [r8]
 818 0206 18B2     		sxth	r0, r3
 819 0208 07EE900A 		vmov	s15, r0	@ int
 820 020c F8EEE77A 		vcvt.f32.s32	s15, s15
 821 0210 17EE900A 		vmov	r0, s15
 822 0214 FFF7FEFF 		bl	__aeabi_f2d
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s 			page 33


 823              	.LVL76:
 824 0218 45A3     		adr	r3, .L122+24
 825 021a D3E90023 		ldrd	r2, [r3]
 826 021e FFF7FEFF 		bl	__aeabi_ddiv
 827              	.LVL77:
 828 0222 0022     		movs	r2, #0
 829 0224 624B     		ldr	r3, .L122+152
 830 0226 FFF7FEFF 		bl	__aeabi_dmul
 831              	.LVL78:
 832 022a FFF7FEFF 		bl	__aeabi_d2uiz
 833              	.LVL79:
 834 022e 00B2     		sxth	r0, r0
 585:Src/main.c    ****       FP_duty = 100;
 835              		.loc 1 585 0
 836 0230 6428     		cmp	r0, #100
 582:Src/main.c    ****     }
 837              		.loc 1 582 0
 838 0232 ABF80000 		strh	r0, [fp]	@ movhi
 585:Src/main.c    ****       FP_duty = 100;
 839              		.loc 1 585 0
 840 0236 40F3C883 		ble	.L104
 841              	.L48:
 580:Src/main.c    ****     }else{
 842              		.loc 1 580 0
 843 023a 6423     		movs	r3, #100
 844 023c ABF80030 		strh	r3, [fp]	@ movhi
 845              	.L47:
 595:Src/main.c    **** 
 846              		.loc 1 595 0
 847 0240 2088     		ldrh	r0, [r4]
 848 0242 B8F80010 		ldrh	r1, [r8]
 849 0246 0023     		movs	r3, #0
 850 0248 0093     		str	r3, [sp]
 851 024a 1A46     		mov	r2, r3
 852 024c C0B2     		uxtb	r0, r0
 853 024e FFF7FEFF 		bl	CAN_OBD_Response
 854              	.LVL80:
 598:Src/main.c    **** 
 855              		.loc 1 598 0
 856 0252 5848     		ldr	r0, .L122+156
 857 0254 FFF7FEFF 		bl	defi_decoder
 858              	.LVL81:
 600:Src/main.c    **** 
 859              		.loc 1 600 0
 860 0258 574B     		ldr	r3, .L122+160
 861 025a 1B68     		ldr	r3, [r3]
 862 025c 012B     		cmp	r3, #1
 863 025e 3DD0     		beq	.L105
 864              	.L49:
 652:Src/main.c    **** 
 865              		.loc 1 652 0
 866 0260 BBF90030 		ldrsh	r3, [fp]
 867 0264 4A4A     		ldr	r2, .L122+120
 868 0266 C3F16403 		rsb	r3, r3, #100
 869 026a 5363     		str	r3, [r2, #52]
 656:Src/main.c    ****       switch( flag_sw ){
 870              		.loc 1 656 0
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s 			page 34


 871 026c 534B     		ldr	r3, .L122+164
 872 026e 1B68     		ldr	r3, [r3]
 873 0270 23B3     		cbz	r3, .L51
 657:Src/main.c    ****         case 1: // SW "UP"
 874              		.loc 1 657 0
 875 0272 022B     		cmp	r3, #2
 876 0274 00F0DA80 		beq	.L53
 877 0278 032B     		cmp	r3, #3
 878 027a 00F0CF80 		beq	.L54
 879 027e 012B     		cmp	r3, #1
 880 0280 00F0E680 		beq	.L106
 881              	.L52:
 701:Src/main.c    ****       if( mode == MODE_BAR_METER ){
 882              		.loc 1 701 0
 883 0284 3A48     		ldr	r0, .L122+88
 884 0286 FFF7FEFF 		bl	u8g2_ClearBuffer
 885              	.LVL82:
 702:Src/main.c    ****         draw_MeasLabels();
 886              		.loc 1 702 0
 887 028a 4D4B     		ldr	r3, .L122+168
 888 028c 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2
 889 028e 002D     		cmp	r5, #0
 890 0290 00F0A480 		beq	.L107
 706:Src/main.c    ****         for( n=0; n<N_meas_C; n++ ){
 891              		.loc 1 706 0
 892 0294 012D     		cmp	r5, #1
 893 0296 00F0ED80 		beq	.L108
 720:Src/main.c    ****         draw_MeasLabels_Rotary();
 894              		.loc 1 720 0
 895 029a 022D     		cmp	r5, #2
 896 029c 00F04481 		beq	.L109
 724:Src/main.c    ****         draw_Wave_axis(&u8g2, wave_x, wave_y, wave_width, wave_height, wave_value_min, wave_value_m
 897              		.loc 1 724 0
 898 02a0 032D     		cmp	r5, #3
 899 02a2 00F05081 		beq	.L110
 728:Src/main.c    ****         draw_Wave_axis(&u8g2, wave_x, wave_y, wave_width, wave_height, -200, 200, 4);
 900              		.loc 1 728 0
 901 02a6 042D     		cmp	r5, #4
 902 02a8 00F06881 		beq	.L111
 903              	.L61:
 733:Src/main.c    **** 
 904              		.loc 1 733 0
 905 02ac 3048     		ldr	r0, .L122+88
 906 02ae FFF7FEFF 		bl	u8g2_SendBuffer
 907              	.LVL83:
 735:Src/main.c    ****       
 908              		.loc 1 735 0
 909 02b2 444B     		ldr	r3, .L122+172
 910 02b4 0022     		movs	r2, #0
 911 02b6 5A62     		str	r2, [r3, #36]
 737:Src/main.c    ****     }
 912              		.loc 1 737 0
 913 02b8 404B     		ldr	r3, .L122+164
 914 02ba 1A60     		str	r2, [r3]
 915              	.L51:
 742:Src/main.c    **** 
 916              		.loc 1 742 0
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s 			page 35


 917 02bc 424B     		ldr	r3, .L122+176
 918 02be 1B68     		ldr	r3, [r3]
 919 02c0 002B     		cmp	r3, #0
 920 02c2 40F09080 		bne	.L112
 921              	.L67:
 548:Src/main.c    ****       CAN_EN = 0;
 922              		.loc 1 548 0
 923 02c6 D9F80030 		ldr	r3, [r9]
 924 02ca 002B     		cmp	r3, #0
 925 02cc 7FF452AF 		bne	.L113
 553:Src/main.c    ****       CAN_EN = CAN_Received;
 926              		.loc 1 553 0
 927 02d0 324B     		ldr	r3, .L122+132
 928 02d2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 929 02d4 002B     		cmp	r3, #0
 930 02d6 7FF455AF 		bne	.L44
 931 02da 4EE7     		b	.L43
 932              	.L105:
 605:Src/main.c    ****         // Acceration 1G = 100
 933              		.loc 1 605 0
 934 02dc 2D4B     		ldr	r3, .L122+124
 935 02de 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 936 02e0 012B     		cmp	r3, #1
 937 02e2 00F00E81 		beq	.L114
 938              	.L50:
 641:Src/main.c    **** 		  meas_value[3] = DEFI_value[6];  // ECT
 939              		.loc 1 641 0
 940 02e6 314B     		ldr	r3, .L122+148
 639:Src/main.c    **** 		  meas_value[1] = DEFI_value[2];  // OILP
 941              		.loc 1 639 0
 942 02e8 2288     		ldrh	r2, [r4]
 641:Src/main.c    **** 		  meas_value[3] = DEFI_value[6];  // ECT
 943              		.loc 1 641 0
 944 02ea 1B88     		ldrh	r3, [r3]
 639:Src/main.c    **** 		  meas_value[1] = DEFI_value[2];  // OILP
 945              		.loc 1 639 0
 946 02ec AAF80020 		strh	r2, [r10]	@ movhi
 641:Src/main.c    **** 		  meas_value[3] = DEFI_value[6];  // ECT
 947              		.loc 1 641 0
 948 02f0 AAF80430 		strh	r3, [r10, #4]	@ movhi
 640:Src/main.c    **** 			meas_value[2] = FP_volt;        // FuelPump Voltage
 949              		.loc 1 640 0
 950 02f4 A288     		ldrh	r2, [r4, #4]
 644:Src/main.c    **** 
 951              		.loc 1 644 0
 952 02f6 2C4B     		ldr	r3, .L122+144
 646:Src/main.c    ****     }
 953              		.loc 1 646 0
 954 02f8 2F49     		ldr	r1, .L122+160
 640:Src/main.c    **** 			meas_value[2] = FP_volt;        // FuelPump Voltage
 955              		.loc 1 640 0
 956 02fa AAF80220 		strh	r2, [r10, #2]	@ movhi
 642:Src/main.c    **** 			meas_value[4] = DEFI_value[5];  // OILT
 957              		.loc 1 642 0
 958 02fe A289     		ldrh	r2, [r4, #12]
 959 0300 AAF80620 		strh	r2, [r10, #6]	@ movhi
 646:Src/main.c    ****     }
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s 			page 36


 960              		.loc 1 646 0
 961 0304 0020     		movs	r0, #0
 643:Src/main.c    **** 		  meas_value[5] = O2_volt;        // O2
 962              		.loc 1 643 0
 963 0306 6289     		ldrh	r2, [r4, #10]
 644:Src/main.c    **** 
 964              		.loc 1 644 0
 965 0308 1B88     		ldrh	r3, [r3]
 646:Src/main.c    ****     }
 966              		.loc 1 646 0
 967 030a 0860     		str	r0, [r1]
 643:Src/main.c    **** 		  meas_value[5] = O2_volt;        // O2
 968              		.loc 1 643 0
 969 030c AAF80820 		strh	r2, [r10, #8]	@ movhi
 644:Src/main.c    **** 
 970              		.loc 1 644 0
 971 0310 AAF80A30 		strh	r3, [r10, #10]	@ movhi
 972 0314 A4E7     		b	.L49
 973              	.L123:
 974 0316 00BF     		.align	3
 975              	.L122:
 976 0318 00000000 		.word	0
 977 031c 00A07440 		.word	1081384960
 978 0320 00000000 		.word	0
 979 0324 00E06F40 		.word	1081073664
 980 0328 00000000 		.word	0
 981 032c 00A06440 		.word	1080336384
 982 0330 00000000 		.word	0
 983 0334 0070A740 		.word	1084715008
 984 0338 00000000 		.word	htim1
 985 033c 00000000 		.word	htim2
 986 0340 00000000 		.word	htim3
 987 0344 00000000 		.word	htim6
 988 0348 00000000 		.word	htim7
 989 034c 00000000 		.word	htim16
 990 0350 00000000 		.word	g_ADCBuffer
 991 0354 00000000 		.word	hadc1
 992 0358 00000000 		.word	DEFI_value
 993 035c 00000000 		.word	UART1_Data
 994 0360 00000000 		.word	huart1
 995 0364 00000000 		.word	u8x8_gpio_and_delay_STM32F303
 996 0368 00000000 		.word	u8x8_byte_4wire_hw_spi
 997 036c 00000000 		.word	u8g2_cb_r0
 998 0370 00000000 		.word	u8g2
 999 0374 00040048 		.word	1207960576
 1000 0378 00000000 		.word	.LANCHOR4
 1001 037c 00000000 		.word	u8g2_font_5x7_tf
 1002 0380 00000000 		.word	.LC2
 1003 0384 18000000 		.word	.LC3
 1004 0388 24000000 		.word	.LC4
 1005 038c 00000000 		.word	huart2
 1006 0390 002C0140 		.word	1073818624
 1007 0394 00000000 		.word	Gsens_EN
 1008 0398 00000000 		.word	CAN_Received
 1009 039c 00000000 		.word	CAN_EN
 1010 03a0 00000000 		.word	adc
 1011 03a4 00000000 		.word	.LANCHOR1
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s 			page 37


 1012 03a8 00000000 		.word	.LANCHOR6
 1013 03ac 00000000 		.word	.LANCHOR7
 1014 03b0 00005940 		.word	1079574528
 1015 03b4 00000000 		.word	UART1_RxData
 1016 03b8 00000000 		.word	flag_meas
 1017 03bc 00000000 		.word	flag_sw
 1018 03c0 00000000 		.word	mode
 1019 03c4 00100040 		.word	1073745920
 1020 03c8 00000000 		.word	flag_disp
 1021 03cc 00000000 		.word	.LANCHOR5
 1022 03d0 00000000 		.word	flag_status
 1023 03d4 00000000 		.word	rpm
 1024 03d8 00000000 		.word	.LANCHOR8
 1025              	.L107:
 703:Src/main.c    ****         draw_indicators();
 1026              		.loc 1 703 0
 1027 03dc FFF7FEFF 		bl	draw_MeasLabels
 1028              	.LVL84:
 704:Src/main.c    **** 
 1029              		.loc 1 704 0
 1030 03e0 FFF7FEFF 		bl	draw_indicators
 1031              	.LVL85:
 1032 03e4 62E7     		b	.L61
 1033              	.L112:
 745:Src/main.c    ****         // update Fuel Pump Voltage
 1034              		.loc 1 745 0
 1035 03e6 8A4B     		ldr	r3, .L124
 1036 03e8 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2
 1037 03ea 002D     		cmp	r5, #0
 1038 03ec 00F03881 		beq	.L115
 767:Src/main.c    **** 
 1039              		.loc 1 767 0
 1040 03f0 012D     		cmp	r5, #1
 1041 03f2 00F02382 		beq	.L116
 786:Src/main.c    **** 
 1042              		.loc 1 786 0
 1043 03f6 022D     		cmp	r5, #2
 1044 03f8 00F0B381 		beq	.L117
 809:Src/main.c    **** 
 1045              		.loc 1 809 0
 1046 03fc 032D     		cmp	r5, #3
 1047 03fe 00F0D580 		beq	.L118
 823:Src/main.c    **** 
 1048              		.loc 1 823 0
 1049 0402 042D     		cmp	r5, #4
 1050 0404 00F06382 		beq	.L119
 837:Src/main.c    **** 
 1051              		.loc 1 837 0
 1052 0408 052D     		cmp	r5, #5
 1053 040a 00F0A982 		beq	.L120
 1054              	.L71:
 1055              	.LVL86:
 858:Src/main.c    **** 
 1056              		.loc 1 858 0
 1057 040e 8148     		ldr	r0, .L124+4
 1058 0410 FFF7FEFF 		bl	u8g2_SendBuffer
 1059              	.LVL87:
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s 			page 38


 860:Src/main.c    ****     }
 1060              		.loc 1 860 0
 1061 0414 804B     		ldr	r3, .L124+8
 1062 0416 0022     		movs	r2, #0
 1063 0418 1A60     		str	r2, [r3]
 1064 041a 54E7     		b	.L67
 1065              	.LVL88:
 1066              	.L54:
 686:Src/main.c    ****           #endif
 1067              		.loc 1 686 0
 1068 041c 7F49     		ldr	r1, .L124+12
 1069 041e 8048     		ldr	r0, .L124+16
 1070 0420 FFF7FEFF 		bl	HAL_UART_Transmit_printf
 1071              	.LVL89:
 688:Src/main.c    **** 
 1072              		.loc 1 688 0
 1073 0424 0720     		movs	r0, #7
 1074 0426 FFF7FEFF 		bl	HAL_NVIC_DisableIRQ
 1075              	.LVL90:
 1076 042a 2BE7     		b	.L52
 1077              	.L53:
 673:Src/main.c    ****           #endif
 1078              		.loc 1 673 0
 1079 042c 7D49     		ldr	r1, .L124+20
 1080 042e 7C48     		ldr	r0, .L124+16
 1081 0430 FFF7FEFF 		bl	HAL_UART_Transmit_printf
 1082              	.LVL91:
 675:Src/main.c    ****           if( mode < MODE_SETTING ){
 1083              		.loc 1 675 0
 1084 0434 1720     		movs	r0, #23
 1085 0436 FFF7FEFF 		bl	HAL_NVIC_DisableIRQ
 1086              	.LVL92:
 676:Src/main.c    ****             if( mode == 0 ){
 1087              		.loc 1 676 0
 1088 043a 754A     		ldr	r2, .L124
 1089 043c 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 1090 043e 042B     		cmp	r3, #4
 1091 0440 3FF620AF 		bhi	.L52
 677:Src/main.c    ****               mode = N_mode-1;
 1092              		.loc 1 677 0
 1093 0444 002B     		cmp	r3, #0
 1094 0446 40F0AD80 		bne	.L59
 678:Src/main.c    ****             }else{
 1095              		.loc 1 678 0
 1096 044a 0423     		movs	r3, #4
 1097 044c 1370     		strb	r3, [r2]
 1098 044e 19E7     		b	.L52
 1099              	.L106:
 660:Src/main.c    ****           HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 1100              		.loc 1 660 0
 1101 0450 7549     		ldr	r1, .L124+24
 1102 0452 7348     		ldr	r0, .L124+16
 1103 0454 FFF7FEFF 		bl	HAL_UART_Transmit_printf
 1104              	.LVL93:
 661:Src/main.c    ****           #endif
 1105              		.loc 1 661 0
 1106 0458 1720     		movs	r0, #23
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s 			page 39


 1107 045a FFF7FEFF 		bl	HAL_NVIC_DisableIRQ
 1108              	.LVL94:
 663:Src/main.c    ****             if( mode == N_mode-1 ){
 1109              		.loc 1 663 0
 1110 045e 6C4B     		ldr	r3, .L124
 1111 0460 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1112 0462 042B     		cmp	r3, #4
 1113 0464 3FF60EAF 		bhi	.L52
 664:Src/main.c    ****               mode = 0;
 1114              		.loc 1 664 0
 1115 0468 00F0E381 		beq	.L121
 667:Src/main.c    ****             }
 1116              		.loc 1 667 0
 1117 046c 684A     		ldr	r2, .L124
 1118 046e 0133     		adds	r3, r3, #1
 1119 0470 1370     		strb	r3, [r2]
 1120 0472 07E7     		b	.L52
 1121              	.L108:
 1122 0474 6D4F     		ldr	r7, .L124+28
 1123 0476 6E4E     		ldr	r6, .L124+32
 706:Src/main.c    ****         for( n=0; n<N_meas_C; n++ ){
 1124              		.loc 1 706 0
 1125 0478 0225     		movs	r5, #2
 1126              	.L63:
 1127              	.LVL95:
 1128              	.LBB30:
 710:Src/main.c    ****         }
 1129              		.loc 1 710 0 discriminator 3
 1130 047a 0D23     		movs	r3, #13
 1131 047c 2A46     		mov	r2, r5
 1132 047e 0D35     		adds	r5, r5, #13
 1133              	.LVL96:
 1134 0480 CDE90176 		strd	r7, r6, [sp, #4]
 1135 0484 0093     		str	r3, [sp]
 1136 0486 4421     		movs	r1, #68
 1137 0488 3C23     		movs	r3, #60
 1138 048a 6248     		ldr	r0, .L124+4
 1139 048c EDB2     		uxtb	r5, r5
 1140 048e FFF7FEFF 		bl	draw_MeasLabelUnit
 1141              	.LVL97:
 707:Src/main.c    ****           x = meas_C_x;
 1142              		.loc 1 707 0 discriminator 3
 1143 0492 362D     		cmp	r5, #54
 1144 0494 07F10707 		add	r7, r7, #7
 1145 0498 06F10506 		add	r6, r6, #5
 1146 049c EDD1     		bne	.L63
 1147 049e 654F     		ldr	r7, .L124+36
 1148 04a0 654E     		ldr	r6, .L124+40
 707:Src/main.c    ****           x = meas_C_x;
 1149              		.loc 1 707 0 is_stmt 0
 1150 04a2 4825     		movs	r5, #72
 1151              	.L64:
 1152              	.LVL98:
 714:Src/main.c    ****         }
 1153              		.loc 1 714 0 is_stmt 1 discriminator 3
 1154 04a4 17F8013B 		ldrb	r3, [r7], #1	@ zero_extendqisi2
 1155              	.LVL99:
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s 			page 40


 1156 04a8 5A48     		ldr	r0, .L124+4
 1157 04aa 0296     		str	r6, [sp, #8]
 1158 04ac 0922     		movs	r2, #9
 1159 04ae 2946     		mov	r1, r5
 1160 04b0 1D35     		adds	r5, r5, #29
 1161 04b2 CDE90023 		strd	r2, r3, [sp]
 1162 04b6 EDB2     		uxtb	r5, r5
 1163 04b8 1B23     		movs	r3, #27
 1164 04ba 3522     		movs	r2, #53
 1165 04bc FFF7FEFF 		bl	draw_IndicatorBox
 1166              	.LVL100:
 713:Src/main.c    ****           draw_IndicatorBox(&u8g2, idct_x+(idct_width+2)*n, idct_y, idct_width, idct_height, idct_s
 1167              		.loc 1 713 0 discriminator 3
 1168 04c0 BC2D     		cmp	r5, #188
 1169 04c2 06F10506 		add	r6, r6, #5
 1170 04c6 EDD1     		bne	.L64
 716:Src/main.c    **** //        draw_CircularMeter_Init(26, 26, 26, 3, -60, 300, 10, 20, -1, -80, 120);
 1171              		.loc 1 716 0
 1172 04c8 7822     		movs	r2, #120
 1173 04ca 6FF04F03 		mvn	r3, #79
 1174 04ce 4FF0FF31 		mov	r1, #-1
 1175 04d2 0692     		str	r2, [sp, #24]
 1176 04d4 0593     		str	r3, [sp, #20]
 1177 04d6 0491     		str	r1, [sp, #16]
 1178 04d8 1425     		movs	r5, #20
 1179 04da 2021     		movs	r1, #32
 1180 04dc 0A20     		movs	r0, #10
 1181 04de 4FF49672 		mov	r2, #300
 1182 04e2 6FF03B03 		mvn	r3, #59
 1183 04e6 CDE90032 		strd	r3, r2, [sp]
 1184 04ea CDE90205 		strd	r0, r5, [sp, #8]
 1185 04ee 0323     		movs	r3, #3
 1186 04f0 0846     		mov	r0, r1
 1187 04f2 1F22     		movs	r2, #31
 1188 04f4 FFF7FEFF 		bl	draw_CircularMeter_Init
 1189              	.LVL101:
 718:Src/main.c    **** 
 1190              		.loc 1 718 0
 1191 04f8 0021     		movs	r1, #0
 1192 04fa 4648     		ldr	r0, .L124+4
 1193 04fc FFF7FEFF 		bl	draw_CircularMeter
 1194              	.LVL102:
 1195              	.LBE30:
 1196 0500 D4E6     		b	.L61
 1197              	.LVL103:
 1198              	.L114:
 607:Src/main.c    ****         Gsens_Y = Gsens_ADXL345_Read_G('y', 0);
 1199              		.loc 1 607 0
 1200 0502 0021     		movs	r1, #0
 1201 0504 7820     		movs	r0, #120
 1202 0506 FFF7FEFF 		bl	Gsens_ADXL345_Read_G
 1203              	.LVL104:
 1204 050a 4C4B     		ldr	r3, .L124+44
 608:Src/main.c    ****         Gsens_Z = Gsens_ADXL345_Read_G('z', 0);
 1205              		.loc 1 608 0
 1206 050c 0021     		movs	r1, #0
 607:Src/main.c    ****         Gsens_Y = Gsens_ADXL345_Read_G('y', 0);
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s 			page 41


 1207              		.loc 1 607 0
 1208 050e 1880     		strh	r0, [r3]	@ movhi
 608:Src/main.c    ****         Gsens_Z = Gsens_ADXL345_Read_G('z', 0);
 1209              		.loc 1 608 0
 1210 0510 7920     		movs	r0, #121
 1211 0512 FFF7FEFF 		bl	Gsens_ADXL345_Read_G
 1212              	.LVL105:
 1213 0516 4A4B     		ldr	r3, .L124+48
 609:Src/main.c    **** 
 1214              		.loc 1 609 0
 1215 0518 0021     		movs	r1, #0
 608:Src/main.c    ****         Gsens_Z = Gsens_ADXL345_Read_G('z', 0);
 1216              		.loc 1 608 0
 1217 051a 1880     		strh	r0, [r3]	@ movhi
 609:Src/main.c    **** 
 1218              		.loc 1 609 0
 1219 051c 7A20     		movs	r0, #122
 1220 051e FFF7FEFF 		bl	Gsens_ADXL345_Read_G
 1221              	.LVL106:
 1222 0522 484B     		ldr	r3, .L124+52
 1223 0524 1880     		strh	r0, [r3]	@ movhi
 1224 0526 DEE6     		b	.L50
 1225              	.L109:
 721:Src/main.c    ****         draw_MeasLabelUnit(&u8g2, 0, 2, meas_width1, meas_height, "TACHO", "rpm");
 1226              		.loc 1 721 0
 1227 0528 FFF7FEFF 		bl	draw_MeasLabels_Rotary
 1228              	.LVL107:
 722:Src/main.c    **** 
 1229              		.loc 1 722 0
 1230 052c 464A     		ldr	r2, .L124+56
 1231 052e 0292     		str	r2, [sp, #8]
 1232 0530 0C23     		movs	r3, #12
 1233 0532 464A     		ldr	r2, .L124+60
 1234 0534 0192     		str	r2, [sp, #4]
 1235 0536 0093     		str	r3, [sp]
 1236 0538 2A46     		mov	r2, r5
 1237 053a 4623     		movs	r3, #70
 1238 053c 0021     		movs	r1, #0
 1239 053e 3548     		ldr	r0, .L124+4
 1240 0540 FFF7FEFF 		bl	draw_MeasLabelUnit
 1241              	.LVL108:
 1242 0544 B2E6     		b	.L61
 1243              	.L110:
 1244              	.LBB31:
 725:Src/main.c    ****         draw_MeasLabelUnit(&u8g2, 0, 0, 64, 13, "MAP", "kPa");
 1245              		.loc 1 725 0
 1246 0546 C821     		movs	r1, #200
 1247 0548 6FF06302 		mvn	r2, #99
 1248 054c 3423     		movs	r3, #52
 1249 054e CDE90032 		strd	r3, r2, [sp]
 1250 0552 CDE90215 		strd	r1, r5, [sp, #8]
 1251 0556 8023     		movs	r3, #128
 1252 0558 0D22     		movs	r2, #13
 1253 055a 0021     		movs	r1, #0
 1254 055c 2D48     		ldr	r0, .L124+4
 1255 055e FFF7FEFF 		bl	draw_Wave_axis
 1256              	.LVL109:
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s 			page 42


 726:Src/main.c    **** 
 1257              		.loc 1 726 0
 1258 0562 3B49     		ldr	r1, .L124+64
 1259 0564 0291     		str	r1, [sp, #8]
 1260 0566 3B49     		ldr	r1, .L124+68
 1261 0568 0D23     		movs	r3, #13
 1262 056a 0022     		movs	r2, #0
 1263              	.L102:
 1264              	.LBE31:
 1265              	.LBB32:
 730:Src/main.c    **** 
 1266              		.loc 1 730 0
 1267 056c CDE90031 		strd	r3, r1, [sp]
 1268 0570 2848     		ldr	r0, .L124+4
 1269 0572 1146     		mov	r1, r2
 1270 0574 4023     		movs	r3, #64
 1271 0576 FFF7FEFF 		bl	draw_MeasLabelUnit
 1272              	.LVL110:
 1273 057a 97E6     		b	.L61
 1274              	.L111:
 729:Src/main.c    ****         draw_MeasLabelUnit(&u8g2, 0, 0, 64, 13, "LatG", "G");
 1275              		.loc 1 729 0
 1276 057c C821     		movs	r1, #200
 1277 057e 6FF0C702 		mvn	r2, #199
 1278 0582 3423     		movs	r3, #52
 1279 0584 CDE90032 		strd	r3, r2, [sp]
 1280 0588 CDE90215 		strd	r1, r5, [sp, #8]
 1281 058c 8023     		movs	r3, #128
 1282 058e 0D22     		movs	r2, #13
 1283 0590 0021     		movs	r1, #0
 1284 0592 2048     		ldr	r0, .L124+4
 1285 0594 FFF7FEFF 		bl	draw_Wave_axis
 1286              	.LVL111:
 730:Src/main.c    **** 
 1287              		.loc 1 730 0
 1288 0598 2F49     		ldr	r1, .L124+72
 1289 059a 0291     		str	r1, [sp, #8]
 1290 059c 0D23     		movs	r3, #13
 1291 059e 0022     		movs	r2, #0
 1292 05a0 2E49     		ldr	r1, .L124+76
 1293 05a2 E3E7     		b	.L102
 1294              	.L59:
 1295              	.LBE32:
 680:Src/main.c    ****             }
 1296              		.loc 1 680 0
 1297 05a4 1A4A     		ldr	r2, .L124
 1298 05a6 013B     		subs	r3, r3, #1
 1299 05a8 1370     		strb	r3, [r2]
 1300 05aa 6BE6     		b	.L52
 1301              	.L118:
 1302              	.LBB33:
 811:Src/main.c    ****           circular_buffer_index--;
 1303              		.loc 1 811 0
 1304 05ac 099B     		ldr	r3, [sp, #36]
 1305 05ae 002B     		cmp	r3, #0
 1306 05b0 00F08981 		beq	.L86
 812:Src/main.c    ****         }else{
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s 			page 43


 1307              		.loc 1 812 0
 1308 05b4 013B     		subs	r3, r3, #1
 1309 05b6 9BB2     		uxth	r3, r3
 1310 05b8 0993     		str	r3, [sp, #36]
 1311              	.LVL112:
 1312 05ba 1D46     		mov	r5, r3
 1313              	.LVL113:
 1314              	.L78:
 819:Src/main.c    ****         draw_Value(&u8g2, 0, 0, 64, 13, circular_buffer[circular_buffer_index], 3, 2, 1, "kPa");
 1315              		.loc 1 819 0
 1316 05bc 6FF06302 		mvn	r2, #99
 1317 05c0 3423     		movs	r3, #52
 1318 05c2 CDE90032 		strd	r3, r2, [sp]
 816:Src/main.c    **** 
 1319              		.loc 1 816 0
 1320 05c6 0CAA     		add	r2, sp, #48
 1321 05c8 BAF80030 		ldrh	r3, [r10]
 819:Src/main.c    ****         draw_Value(&u8g2, 0, 0, 64, 13, circular_buffer[circular_buffer_index], 3, 2, 1, "kPa");
 1322              		.loc 1 819 0
 1323 05cc 0495     		str	r5, [sp, #16]
 1324 05ce C821     		movs	r1, #200
 1325 05d0 0CA8     		add	r0, sp, #48
 1326 05d2 CDE90210 		strd	r1, r0, [sp, #8]
 816:Src/main.c    **** 
 1327              		.loc 1 816 0
 1328 05d6 22F81530 		strh	r3, [r2, r5, lsl #1]	@ movhi
 819:Src/main.c    ****         draw_Value(&u8g2, 0, 0, 64, 13, circular_buffer[circular_buffer_index], 3, 2, 1, "kPa");
 1329              		.loc 1 819 0
 1330 05da 0021     		movs	r1, #0
 1331 05dc 8023     		movs	r3, #128
 1332 05de 0D22     		movs	r2, #13
 1333 05e0 0C48     		ldr	r0, .L124+4
 820:Src/main.c    **** 
 1334              		.loc 1 820 0
 1335 05e2 1B4E     		ldr	r6, .L124+64
 819:Src/main.c    ****         draw_Value(&u8g2, 0, 0, 64, 13, circular_buffer[circular_buffer_index], 3, 2, 1, "kPa");
 1336              		.loc 1 819 0
 1337 05e4 FFF7FEFF 		bl	draw_Wave
 1338              	.LVL114:
 820:Src/main.c    **** 
 1339              		.loc 1 820 0
 1340 05e8 0CAB     		add	r3, sp, #48
 1341 05ea 0220     		movs	r0, #2
 1342 05ec 33F91530 		ldrsh	r3, [r3, r5, lsl #1]
 1343 05f0 0193     		str	r3, [sp, #4]
 1344 05f2 0125     		movs	r5, #1
 1345 05f4 0321     		movs	r1, #3
 1346 05f6 0D23     		movs	r3, #13
 1347 05f8 0022     		movs	r2, #0
 1348              	.L103:
 1349              	.LBE33:
 1350              	.LBB34:
 834:Src/main.c    **** 
 1351              		.loc 1 834 0
 1352 05fa CDE90210 		strd	r1, r0, [sp, #8]
 1353 05fe 0093     		str	r3, [sp]
 1354 0600 CDE90456 		strd	r5, r6, [sp, #16]
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s 			page 44


 1355 0604 1146     		mov	r1, r2
 1356 0606 4023     		movs	r3, #64
 1357 0608 0248     		ldr	r0, .L124+4
 1358 060a FFF7FEFF 		bl	draw_Value
 1359              	.LVL115:
 1360              	.LBE34:
 1361 060e FEE6     		b	.L71
 1362              	.L125:
 1363              		.align	2
 1364              	.L124:
 1365 0610 00000000 		.word	mode
 1366 0614 00000000 		.word	u8g2
 1367 0618 00000000 		.word	flag_disp
 1368 061c 48000000 		.word	.LC7
 1369 0620 00000000 		.word	huart2
 1370 0624 40000000 		.word	.LC6
 1371 0628 3C000000 		.word	.LC5
 1372 062c 00000000 		.word	.LANCHOR3
 1373 0630 00000000 		.word	.LANCHOR2
 1374 0634 00000000 		.word	.LANCHOR1
 1375 0638 00000000 		.word	.LANCHOR0
 1376 063c 00000000 		.word	Gsens_X
 1377 0640 00000000 		.word	Gsens_Y
 1378 0644 00000000 		.word	Gsens_Z
 1379 0648 50000000 		.word	.LC8
 1380 064c 54000000 		.word	.LC9
 1381 0650 5C000000 		.word	.LC10
 1382 0654 60000000 		.word	.LC11
 1383 0658 64000000 		.word	.LC12
 1384 065c 68000000 		.word	.LC13
 1385              	.LVL116:
 1386              	.L115:
 747:Src/main.c    **** 
 1387              		.loc 1 747 0
 1388 0660 BBF90030 		ldrsh	r3, [fp]
 1389 0664 AD4A     		ldr	r2, .L126
 1390 0666 0592     		str	r2, [sp, #20]
 1391 0668 0326     		movs	r6, #3
 1392 066a 0C27     		movs	r7, #12
 1393 066c CDE90136 		strd	r3, r6, [sp, #4]
 1394 0670 3422     		movs	r2, #52
 1395 0672 4623     		movs	r3, #70
 1396 0674 2946     		mov	r1, r5
 1397 0676 AA48     		ldr	r0, .L126+4
 1398 0678 0097     		str	r7, [sp]
 1399 067a CDE90355 		strd	r5, r5, [sp, #12]
 1400 067e FFF7FEFF 		bl	draw_Value
 1401              	.LVL117:
 750:Src/main.c    **** 
 1402              		.loc 1 750 0
 1403 0682 B8F80010 		ldrh	r1, [r8]
 1404 0686 0191     		str	r1, [sp, #4]
 1405 0688 42F22832 		movw	r2, #9000
 1406 068c 0E23     		movs	r3, #14
 1407 068e 0392     		str	r2, [sp, #12]
 1408 0690 0093     		str	r3, [sp]
 1409 0692 2A46     		mov	r2, r5
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s 			page 45


 1410 0694 8023     		movs	r3, #128
 1411 0696 2946     		mov	r1, r5
 1412 0698 A148     		ldr	r0, .L126+4
 1413 069a 0295     		str	r5, [sp, #8]
 1414 069c FFF7FEFF 		bl	draw_BarGraph
 1415              	.LVL118:
 756:Src/main.c    ****         }
 1416              		.loc 1 756 0
 1417 06a0 A049     		ldr	r1, .L126+8
 1418 06a2 BAF90030 		ldrsh	r3, [r10]
 1419 06a6 0591     		str	r1, [sp, #20]
 1420 06a8 0222     		movs	r2, #2
 1421 06aa 0121     		movs	r1, #1
 1422 06ac CDE90321 		strd	r2, r1, [sp, #12]
 1423 06b0 0193     		str	r3, [sp, #4]
 1424 06b2 1022     		movs	r2, #16
 1425 06b4 4623     		movs	r3, #70
 1426 06b6 2946     		mov	r1, r5
 1427 06b8 9948     		ldr	r0, .L126+4
 1428 06ba 0296     		str	r6, [sp, #8]
 1429 06bc 0097     		str	r7, [sp]
 1430 06be FFF7FEFF 		bl	draw_Value
 1431              	.LVL119:
 1432 06c2 0122     		movs	r2, #1
 1433 06c4 CDE90262 		strd	r6, r2, [sp, #8]
 1434 06c8 974A     		ldr	r2, .L126+12
 1435 06ca BAF90230 		ldrsh	r3, [r10, #2]
 1436 06ce 0193     		str	r3, [sp, #4]
 1437 06d0 CDE90452 		strd	r5, r2, [sp, #16]
 1438 06d4 4623     		movs	r3, #70
 1439 06d6 1C22     		movs	r2, #28
 1440 06d8 2946     		mov	r1, r5
 1441 06da 9148     		ldr	r0, .L126+4
 1442 06dc 0097     		str	r7, [sp]
 1443 06de FFF7FEFF 		bl	draw_Value
 1444              	.LVL120:
 1445 06e2 0122     		movs	r2, #1
 1446 06e4 CDE90262 		strd	r6, r2, [sp, #8]
 1447 06e8 904A     		ldr	r2, .L126+16
 1448 06ea BAF90430 		ldrsh	r3, [r10, #4]
 1449 06ee 0193     		str	r3, [sp, #4]
 1450 06f0 CDE90452 		strd	r5, r2, [sp, #16]
 1451 06f4 2946     		mov	r1, r5
 1452 06f6 8A48     		ldr	r0, .L126+4
 1453 06f8 0097     		str	r7, [sp]
 1454 06fa 4623     		movs	r3, #70
 1455 06fc 2822     		movs	r2, #40
 761:Src/main.c    ****         }
 1456              		.loc 1 761 0
 1457 06fe 0B97     		str	r7, [sp, #44]
 756:Src/main.c    ****         }
 1458              		.loc 1 756 0
 1459 0700 FFF7FEFF 		bl	draw_Value
 1460              	.LVL121:
 1461 0704 3046     		mov	r0, r6
 1462 0706 2946     		mov	r1, r5
 1463              	.LVL122:
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s 			page 46


 1464              	.L70:
 760:Src/main.c    ****           draw_Value(&u8g2, x, y, meas_width2, meas_height, meas_value[n], meas_digit[n], meas_frac
 1465              		.loc 1 760 0 discriminator 3
 1466 0708 894A     		ldr	r2, .L126+20
 761:Src/main.c    ****         }
 1467              		.loc 1 761 0 discriminator 3
 1468 070a 0491     		str	r1, [sp, #16]
 760:Src/main.c    ****           draw_Value(&u8g2, x, y, meas_width2, meas_height, meas_value[n], meas_digit[n], meas_frac
 1469              		.loc 1 760 0 discriminator 3
 1470 070c F3B2     		uxtb	r3, r6
 1471 070e A2FB0372 		umull	r7, r2, r2, r3
 1472 0712 5208     		lsrs	r2, r2, #1
 1473 0714 02EB4202 		add	r2, r2, r2, lsl #1
 1474 0718 9B1A     		subs	r3, r3, r2
 1475 071a 03EB4303 		add	r3, r3, r3, lsl #1
 761:Src/main.c    ****         }
 1476              		.loc 1 761 0 discriminator 3
 1477 071e 814F     		ldr	r7, .L126+8
 1478 0720 3AF91610 		ldrsh	r1, [r10, r6, lsl #1]
 1479 0724 0191     		str	r1, [sp, #4]
 760:Src/main.c    ****           draw_Value(&u8g2, x, y, meas_width2, meas_height, meas_value[n], meas_digit[n], meas_frac
 1480              		.loc 1 760 0 discriminator 3
 1481 0726 9A00     		lsls	r2, r3, #2
 761:Src/main.c    ****         }
 1482              		.loc 1 761 0 discriminator 3
 1483 0728 06EB8603 		add	r3, r6, r6, lsl #2
 1484 072c 3B44     		add	r3, r3, r7
 1485 072e CDE90205 		strd	r0, r5, [sp, #8]
 760:Src/main.c    ****           draw_Value(&u8g2, x, y, meas_width2, meas_height, meas_value[n], meas_digit[n], meas_frac
 1486              		.loc 1 760 0 discriminator 3
 1487 0732 1032     		adds	r2, r2, #16
 761:Src/main.c    ****         }
 1488              		.loc 1 761 0 discriminator 3
 1489 0734 0B98     		ldr	r0, [sp, #44]
 1490 0736 0090     		str	r0, [sp]
 1491 0738 0593     		str	r3, [sp, #20]
 1492 073a 02F0FC02 		and	r2, r2, #252
 1493 073e 0136     		adds	r6, r6, #1
 1494              	.LVL123:
 1495 0740 3823     		movs	r3, #56
 1496 0742 4821     		movs	r1, #72
 1497 0744 7648     		ldr	r0, .L126+4
 1498 0746 FFF7FEFF 		bl	draw_Value
 1499              	.LVL124:
 758:Src/main.c    ****           x = meas_width1 + meas_x + meas_x_offset;
 1500              		.loc 1 758 0 discriminator 3
 1501 074a 062E     		cmp	r6, #6
 1502 074c 06D0     		beq	.L69
 1503 074e 794B     		ldr	r3, .L126+24
 1504 0750 985D     		ldrb	r0, [r3, r6]	@ zero_extendqisi2
 1505 0752 794B     		ldr	r3, .L126+28
 1506 0754 9D5D     		ldrb	r5, [r3, r6]	@ zero_extendqisi2
 1507 0756 794B     		ldr	r3, .L126+32
 1508 0758 995D     		ldrb	r1, [r3, r6]	@ zero_extendqisi2
 1509 075a D5E7     		b	.L70
 1510              	.L69:
 764:Src/main.c    **** 
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s 			page 47


 1511              		.loc 1 764 0
 1512 075c FFF7FEFF 		bl	draw_indicators
 1513              	.LVL125:
 1514 0760 55E6     		b	.L71
 1515              	.LVL126:
 1516              	.L117:
 1517              	.LBB35:
 788:Src/main.c    ****         if( rpm_integral > 10000 ){
 1518              		.loc 1 788 0
 1519 0762 B8F80030 		ldrh	r3, [r8]
 1520 0766 0A9A     		ldr	r2, [sp, #40]
 1521 0768 1A44     		add	r2, r2, r3
 1522 076a 92B2     		uxth	r2, r2
 789:Src/main.c    ****           rpm_integral = rpm_integral - 10000;
 1523              		.loc 1 789 0
 1524 076c 42F21073 		movw	r3, #10000
 1525 0770 9A42     		cmp	r2, r3
 788:Src/main.c    ****         if( rpm_integral > 10000 ){
 1526              		.loc 1 788 0
 1527 0772 0A92     		str	r2, [sp, #40]
 1528              	.LVL127:
 789:Src/main.c    ****           rpm_integral = rpm_integral - 10000;
 1529              		.loc 1 789 0
 1530 0774 04D9     		bls	.L75
 790:Src/main.c    ****         }
 1531              		.loc 1 790 0
 1532 0776 A2F51C53 		sub	r3, r2, #9984
 1533 077a 103B     		subs	r3, r3, #16
 1534 077c 9BB2     		uxth	r3, r3
 1535 077e 0A93     		str	r3, [sp, #40]
 1536              	.LVL128:
 1537              	.L75:
 792:Src/main.c    **** 
 1538              		.loc 1 792 0
 1539 0780 DDED0A7A 		vldr.32	s15, [sp, #40]	@ int
 796:Src/main.c    ****         draw_Value(&u8g2, 0, 2, meas_width1, meas_height, rpm, 4, 0, 0, "rpm");
 1540              		.loc 1 796 0
 1541 0784 6E4E     		ldr	r6, .L126+36
 792:Src/main.c    **** 
 1542              		.loc 1 792 0
 1543 0786 F8EE677A 		vcvt.f32.u32	s15, s15
 796:Src/main.c    ****         draw_Value(&u8g2, 0, 2, meas_width1, meas_height, rpm, 4, 0, 0, "rpm");
 1544              		.loc 1 796 0
 1545 078a 0C25     		movs	r5, #12
 792:Src/main.c    **** 
 1546              		.loc 1 792 0
 1547 078c 17EE900A 		vmov	r0, s15
 1548 0790 FFF7FEFF 		bl	__aeabi_f2d
 1549              	.LVL129:
 1550 0794 0022     		movs	r2, #0
 1551 0796 6B4B     		ldr	r3, .L126+40
 1552 0798 FFF7FEFF 		bl	__aeabi_ddiv
 1553              	.LVL130:
 1554 079c FFF7FEFF 		bl	__aeabi_d2uiz
 1555              	.LVL131:
 794:Src/main.c    **** 
 1556              		.loc 1 794 0
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s 			page 48


 1557 07a0 0222     		movs	r2, #2
 1558 07a2 C3B2     		uxtb	r3, r0
 1559 07a4 3A21     		movs	r1, #58
 1560 07a6 5E48     		ldr	r0, .L126+4
 1561 07a8 FFF7FEFF 		bl	draw_Rotary
 1562              	.LVL132:
 796:Src/main.c    ****         draw_Value(&u8g2, 0, 2, meas_width1, meas_height, rpm, 4, 0, 0, "rpm");
 1563              		.loc 1 796 0
 1564 07ac 664B     		ldr	r3, .L126+44
 1565 07ae 0296     		str	r6, [sp, #8]
 1566 07b0 CDE90053 		strd	r5, r3, [sp]
 1567 07b4 0222     		movs	r2, #2
 1568 07b6 4623     		movs	r3, #70
 1569 07b8 0021     		movs	r1, #0
 1570 07ba 5948     		ldr	r0, .L126+4
 1571 07bc FFF7FEFF 		bl	draw_MeasLabelUnit
 1572              	.LVL133:
 797:Src/main.c    **** 
 1573              		.loc 1 797 0
 1574 07c0 B8F80030 		ldrh	r3, [r8]
 1575 07c4 5648     		ldr	r0, .L126+4
 1576 07c6 0095     		str	r5, [sp]
 1577 07c8 0021     		movs	r1, #0
 1578 07ca 1BB2     		sxth	r3, r3
 1579 07cc 0422     		movs	r2, #4
 1580 07ce CDE90311 		strd	r1, r1, [sp, #12]
 1581 07d2 CDE90132 		strd	r3, r2, [sp, #4]
 1582 07d6 0596     		str	r6, [sp, #20]
 1583 07d8 0222     		movs	r2, #2
 1584 07da 4623     		movs	r3, #70
 804:Src/main.c    ****         }
 1585              		.loc 1 804 0
 1586 07dc 0B95     		str	r5, [sp, #44]
 799:Src/main.c    ****         // draw measurement data
 1587              		.loc 1 799 0
 1588 07de 1026     		movs	r6, #16
 797:Src/main.c    **** 
 1589              		.loc 1 797 0
 1590 07e0 FFF7FEFF 		bl	draw_Value
 1591              	.LVL134:
 799:Src/main.c    ****         // draw measurement data
 1592              		.loc 1 799 0
 1593 07e4 0025     		movs	r5, #0
 1594 07e6 FFF7FEFF 		bl	draw_MeasLabels_Rotary
 1595              	.LVL135:
 1596 07ea 0120     		movs	r0, #1
 1597 07ec 0221     		movs	r1, #2
 1598 07ee 0322     		movs	r2, #3
 1599              	.LVL136:
 1600              	.L76:
 804:Src/main.c    ****         }
 1601              		.loc 1 804 0 discriminator 3
 1602 07f0 4C4F     		ldr	r7, .L126+8
 1603 07f2 3AF915C0 		ldrsh	ip, [r10, r5, lsl #1]
 1604 07f6 0292     		str	r2, [sp, #8]
 1605 07f8 05EB8503 		add	r3, r5, r5, lsl #2
 1606 07fc 0B9A     		ldr	r2, [sp, #44]
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s 			page 49


 1607 07fe 0092     		str	r2, [sp]
 1608 0800 3B44     		add	r3, r3, r7
 1609 0802 CDE90310 		strd	r1, r0, [sp, #12]
 1610 0806 0593     		str	r3, [sp, #20]
 1611 0808 3246     		mov	r2, r6
 1612 080a CDF804C0 		str	ip, [sp, #4]
 1613 080e 4623     		movs	r3, #70
 1614 0810 0021     		movs	r1, #0
 1615 0812 4348     		ldr	r0, .L126+4
 1616 0814 0135     		adds	r5, r5, #1
 1617              	.LVL137:
 1618 0816 FFF7FEFF 		bl	draw_Value
 1619              	.LVL138:
 1620 081a 0C36     		adds	r6, r6, #12
 1621              	.LVL139:
 801:Src/main.c    ****           x = meas_x;
 1622              		.loc 1 801 0 discriminator 3
 1623 081c 042D     		cmp	r5, #4
 1624 081e F6B2     		uxtb	r6, r6
 1625 0820 3FF4F5AD 		beq	.L71
 1626 0824 434B     		ldr	r3, .L126+24
 1627 0826 5A5D     		ldrb	r2, [r3, r5]	@ zero_extendqisi2
 1628 0828 434B     		ldr	r3, .L126+28
 1629 082a 595D     		ldrb	r1, [r3, r5]	@ zero_extendqisi2
 1630 082c 434B     		ldr	r3, .L126+32
 1631 082e 585D     		ldrb	r0, [r3, r5]	@ zero_extendqisi2
 1632 0830 DEE7     		b	.L76
 1633              	.LVL140:
 1634              	.L121:
 1635              	.LBE35:
 665:Src/main.c    ****             }else{
 1636              		.loc 1 665 0
 1637 0832 464B     		ldr	r3, .L126+48
 1638 0834 4FF00002 		mov	r2, #0
 1639 0838 1A70     		strb	r2, [r3]
 1640 083a 23E5     		b	.L52
 1641              	.L116:
 1642              	.LBB36:
 769:Src/main.c    ****         
 1643              		.loc 1 769 0
 1644 083c BAF90010 		ldrsh	r1, [r10]
 1645 0840 3748     		ldr	r0, .L126+4
 1646 0842 FFF7FEFF 		bl	draw_CircularMeter
 1647              	.LVL141:
 771:Src/main.c    ****         draw_MeasUnit(&u8g2, 38, 40, 28, 16, "kPa");
 1648              		.loc 1 771 0
 1649 0846 BAF90030 		ldrsh	r3, [r10]
 1650 084a 414A     		ldr	r2, .L126+52
 1651 084c 0592     		str	r2, [sp, #20]
 1652 084e 1026     		movs	r6, #16
 1653 0850 0227     		movs	r7, #2
 1654 0852 0322     		movs	r2, #3
 1655 0854 CDE90132 		strd	r3, r2, [sp, #4]
 1656 0858 0096     		str	r6, [sp]
 1657 085a 1E23     		movs	r3, #30
 1658 085c 2122     		movs	r2, #33
 1659 085e 2421     		movs	r1, #36
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s 			page 50


 1660 0860 2F48     		ldr	r0, .L126+4
 1661 0862 CDE90375 		strd	r7, r5, [sp, #12]
 1662 0866 FFF7FEFF 		bl	draw_Value
 1663              	.LVL142:
 772:Src/main.c    **** /*        
 1664              		.loc 1 772 0
 1665 086a 3A4B     		ldr	r3, .L126+56
 1666 086c 0096     		str	r6, [sp]
 1667 086e 0193     		str	r3, [sp, #4]
 1668 0870 2621     		movs	r1, #38
 1669 0872 1C23     		movs	r3, #28
 1670 0874 2A48     		ldr	r0, .L126+4
 1671 0876 2822     		movs	r2, #40
 1672 0878 FFF7FEFF 		bl	draw_MeasUnit
 1673              	.LVL143:
 1674 087c 0026     		movs	r6, #0
 1675 087e 0323     		movs	r3, #3
 1676 0880 2846     		mov	r0, r5
 1677 0882 3946     		mov	r1, r7
 1678              	.LVL144:
 1679              	.L73:
 782:Src/main.c    ****         }
 1680              		.loc 1 782 0 discriminator 3
 1681 0884 274D     		ldr	r5, .L126+8
 1682 0886 3AF916C0 		ldrsh	ip, [r10, r6, lsl #1]
 1683 088a 0293     		str	r3, [sp, #8]
 1684 088c 06EB8602 		add	r2, r6, r6, lsl #2
 1685 0890 2A44     		add	r2, r2, r5
 1686 0892 0D23     		movs	r3, #13
 1687 0894 CDE90310 		strd	r1, r0, [sp, #12]
 1688 0898 0093     		str	r3, [sp]
 1689 089a 0592     		str	r2, [sp, #20]
 1690 089c CDF804C0 		str	ip, [sp, #4]
 1691 08a0 3A46     		mov	r2, r7
 1692 08a2 3C23     		movs	r3, #60
 1693 08a4 4421     		movs	r1, #68
 1694 08a6 1E48     		ldr	r0, .L126+4
 1695 08a8 0136     		adds	r6, r6, #1
 1696              	.LVL145:
 1697 08aa FFF7FEFF 		bl	draw_Value
 1698              	.LVL146:
 1699 08ae 0D37     		adds	r7, r7, #13
 1700              	.LVL147:
 779:Src/main.c    ****           x = meas_C_x;
 1701              		.loc 1 779 0 discriminator 3
 1702 08b0 042E     		cmp	r6, #4
 1703 08b2 FFB2     		uxtb	r7, r7
 1704 08b4 3FF4ABAD 		beq	.L71
 1705 08b8 1F4A     		ldr	r2, .L126+28
 1706 08ba 1E4B     		ldr	r3, .L126+24
 1707 08bc 915D     		ldrb	r1, [r2, r6]	@ zero_extendqisi2
 1708 08be 1F4A     		ldr	r2, .L126+32
 1709 08c0 9B5D     		ldrb	r3, [r3, r6]	@ zero_extendqisi2
 1710 08c2 905D     		ldrb	r0, [r2, r6]	@ zero_extendqisi2
 1711 08c4 DEE7     		b	.L73
 1712              	.LVL148:
 1713              	.L86:
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s 			page 51


 1714              	.LBE36:
 1715              	.LBB37:
 1716 08c6 8023     		movs	r3, #128
 1717 08c8 0993     		str	r3, [sp, #36]
 814:Src/main.c    ****         }
 1718              		.loc 1 814 0
 1719 08ca 1D46     		mov	r5, r3
 1720 08cc 76E6     		b	.L78
 1721              	.L119:
 1722              	.LBE37:
 1723              	.LBB38:
 825:Src/main.c    ****           circular_buffer_index--;
 1724              		.loc 1 825 0
 1725 08ce 099B     		ldr	r3, [sp, #36]
 1726 08d0 002B     		cmp	r3, #0
 1727 08d2 76D0     		beq	.L87
 826:Src/main.c    ****         }else{
 1728              		.loc 1 826 0
 1729 08d4 013B     		subs	r3, r3, #1
 1730 08d6 9BB2     		uxth	r3, r3
 1731 08d8 0993     		str	r3, [sp, #36]
 1732              	.LVL149:
 1733 08da 1D46     		mov	r5, r3
 1734              	.LVL150:
 1735              	.L80:
 833:Src/main.c    ****         draw_Value(&u8g2, 0, 0, 64, 13, circular_buffer[circular_buffer_index], 3, 2, 1, "G");
 1736              		.loc 1 833 0
 1737 08dc C821     		movs	r1, #200
 1738 08de 6FF0C702 		mvn	r2, #199
 1739 08e2 3423     		movs	r3, #52
 1740 08e4 0CA8     		add	r0, sp, #48
 1741 08e6 CDE90210 		strd	r1, r0, [sp, #8]
 1742 08ea CDE90032 		strd	r3, r2, [sp]
 830:Src/main.c    **** 
 1743              		.loc 1 830 0
 1744 08ee 1A4B     		ldr	r3, .L126+60
 833:Src/main.c    ****         draw_Value(&u8g2, 0, 0, 64, 13, circular_buffer[circular_buffer_index], 3, 2, 1, "G");
 1745              		.loc 1 833 0
 1746 08f0 0495     		str	r5, [sp, #16]
 830:Src/main.c    **** 
 1747              		.loc 1 830 0
 1748 08f2 0CAA     		add	r2, sp, #48
 1749 08f4 1B88     		ldrh	r3, [r3]
 1750 08f6 22F81530 		strh	r3, [r2, r5, lsl #1]	@ movhi
 833:Src/main.c    ****         draw_Value(&u8g2, 0, 0, 64, 13, circular_buffer[circular_buffer_index], 3, 2, 1, "G");
 1751              		.loc 1 833 0
 1752 08fa 0021     		movs	r1, #0
 1753 08fc 8023     		movs	r3, #128
 1754 08fe 0D22     		movs	r2, #13
 1755 0900 0748     		ldr	r0, .L126+4
 834:Src/main.c    **** 
 1756              		.loc 1 834 0
 1757 0902 164E     		ldr	r6, .L126+64
 833:Src/main.c    ****         draw_Value(&u8g2, 0, 0, 64, 13, circular_buffer[circular_buffer_index], 3, 2, 1, "G");
 1758              		.loc 1 833 0
 1759 0904 FFF7FEFF 		bl	draw_Wave
 1760              	.LVL151:
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s 			page 52


 834:Src/main.c    **** 
 1761              		.loc 1 834 0
 1762 0908 0CAB     		add	r3, sp, #48
 1763 090a 0220     		movs	r0, #2
 1764 090c 33F91530 		ldrsh	r3, [r3, r5, lsl #1]
 1765 0910 0193     		str	r3, [sp, #4]
 1766 0912 0125     		movs	r5, #1
 1767 0914 0321     		movs	r1, #3
 1768 0916 0D23     		movs	r3, #13
 1769 0918 0022     		movs	r2, #0
 1770 091a 6EE6     		b	.L103
 1771              	.L127:
 1772              		.align	2
 1773              	.L126:
 1774 091c 00000000 		.word	.LC0
 1775 0920 00000000 		.word	u8g2
 1776 0924 00000000 		.word	.LANCHOR2
 1777 0928 05000000 		.word	.LANCHOR2+5
 1778 092c 0A000000 		.word	.LANCHOR2+10
 1779 0930 ABAAAAAA 		.word	-1431655765
 1780 0934 00000000 		.word	.LANCHOR9
 1781 0938 00000000 		.word	.LANCHOR10
 1782 093c 00000000 		.word	.LANCHOR11
 1783 0940 50000000 		.word	.LC8
 1784 0944 00408F40 		.word	1083129856
 1785 0948 54000000 		.word	.LC9
 1786 094c 00000000 		.word	mode
 1787 0950 70000000 		.word	.LC14
 1788 0954 5C000000 		.word	.LC10
 1789 0958 00000000 		.word	Gsens_Y
 1790 095c 64000000 		.word	.LC12
 1791              	.LVL152:
 1792              	.L120:
 1793              	.LBE38:
 839:Src/main.c    ****         u8g2_SetFont(&u8g2, u8g2_font_7x14B_tf);
 1794              		.loc 1 839 0
 1795 0960 2048     		ldr	r0, .L128
 1796 0962 FFF7FEFF 		bl	u8g2_ClearBuffer
 1797              	.LVL153:
 840:Src/main.c    ****         u8g2_DrawStr(&u8g2, 2, 15, "Mode Setting" );
 1798              		.loc 1 840 0
 1799 0966 2049     		ldr	r1, .L128+4
 1800 0968 1E48     		ldr	r0, .L128
 1801 096a FFF7FEFF 		bl	u8g2_SetFont
 1802              	.LVL154:
 841:Src/main.c    ****         if( cursor == 0 ){
 1803              		.loc 1 841 0
 1804 096e 1F4B     		ldr	r3, .L128+8
 1805 0970 1C48     		ldr	r0, .L128
 1806 0972 0F22     		movs	r2, #15
 1807 0974 0221     		movs	r1, #2
 1808 0976 FFF7FEFF 		bl	u8g2_DrawStr
 1809              	.LVL155:
 842:Src/main.c    ****           u8g2_DrawStr(&u8g2, 2, 30, ">" );
 1810              		.loc 1 842 0
 1811 097a 1D4B     		ldr	r3, .L128+12
 1812 097c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s 			page 53


 1813 097e 53BB     		cbnz	r3, .L81
 843:Src/main.c    ****         }else{
 1814              		.loc 1 843 0
 1815 0980 1C4B     		ldr	r3, .L128+16
 1816 0982 1848     		ldr	r0, .L128
 1817 0984 1E22     		movs	r2, #30
 1818 0986 0221     		movs	r1, #2
 1819 0988 FFF7FEFF 		bl	u8g2_DrawStr
 1820              	.LVL156:
 1821              	.L82:
 847:Src/main.c    ****         if( cursor == 1 ){
 1822              		.loc 1 847 0
 1823 098c 1A4B     		ldr	r3, .L128+20
 1824 098e 1548     		ldr	r0, .L128
 1825 0990 1E22     		movs	r2, #30
 1826 0992 0A21     		movs	r1, #10
 1827 0994 FFF7FEFF 		bl	u8g2_DrawStr
 1828              	.LVL157:
 848:Src/main.c    ****           u8g2_DrawStr(&u8g2, 2, 45, ">" );
 1829              		.loc 1 848 0
 1830 0998 154B     		ldr	r3, .L128+12
 851:Src/main.c    ****         }
 1831              		.loc 1 851 0
 1832 099a 1248     		ldr	r0, .L128
 848:Src/main.c    ****           u8g2_DrawStr(&u8g2, 2, 45, ">" );
 1833              		.loc 1 848 0
 1834 099c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1835 099e 012B     		cmp	r3, #1
 849:Src/main.c    ****         }else{
 1836              		.loc 1 849 0
 1837 09a0 0CBF     		ite	eq
 1838 09a2 144B     		ldreq	r3, .L128+16
 851:Src/main.c    ****         }
 1839              		.loc 1 851 0
 1840 09a4 154B     		ldrne	r3, .L128+24
 1841 09a6 2D22     		movs	r2, #45
 1842 09a8 0221     		movs	r1, #2
 1843 09aa FFF7FEFF 		bl	u8g2_DrawStr
 1844              	.LVL158:
 853:Src/main.c    ****         u8g2_SendBuffer(&u8g2);
 1845              		.loc 1 853 0
 1846 09ae 144B     		ldr	r3, .L128+28
 1847 09b0 0C48     		ldr	r0, .L128
 1848 09b2 2D22     		movs	r2, #45
 1849 09b4 0A21     		movs	r1, #10
 1850 09b6 FFF7FEFF 		bl	u8g2_DrawStr
 1851              	.LVL159:
 854:Src/main.c    **** 
 1852              		.loc 1 854 0
 1853 09ba 0A48     		ldr	r0, .L128
 1854 09bc FFF7FEFF 		bl	u8g2_SendBuffer
 1855              	.LVL160:
 1856 09c0 25E5     		b	.L71
 1857              	.L87:
 1858              	.LBB39:
 1859 09c2 8023     		movs	r3, #128
 1860 09c4 0993     		str	r3, [sp, #36]
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s 			page 54


 828:Src/main.c    ****         }
 1861              		.loc 1 828 0
 1862 09c6 1D46     		mov	r5, r3
 1863 09c8 88E7     		b	.L80
 1864              	.L104:
 1865              	.LBE39:
 587:Src/main.c    ****       FP_duty = 60;
 1866              		.loc 1 587 0
 1867 09ca 3B28     		cmp	r0, #59
 588:Src/main.c    ****     }
 1868              		.loc 1 588 0
 1869 09cc DCBF     		itt	le
 1870 09ce 3C23     		movle	r3, #60
 1871 09d0 ABF80030 		strhle	r3, [fp]	@ movhi
 1872 09d4 34E4     		b	.L47
 1873              	.L81:
 845:Src/main.c    ****         }
 1874              		.loc 1 845 0
 1875 09d6 094B     		ldr	r3, .L128+24
 1876 09d8 0248     		ldr	r0, .L128
 1877 09da 1E22     		movs	r2, #30
 1878 09dc 0221     		movs	r1, #2
 1879 09de FFF7FEFF 		bl	u8g2_DrawStr
 1880              	.LVL161:
 1881 09e2 D3E7     		b	.L82
 1882              	.L129:
 1883              		.align	2
 1884              	.L128:
 1885 09e4 00000000 		.word	u8g2
 1886 09e8 00000000 		.word	u8g2_font_7x14B_tf
 1887 09ec 74000000 		.word	.LC15
 1888 09f0 00000000 		.word	.LANCHOR12
 1889 09f4 84000000 		.word	.LC16
 1890 09f8 8C000000 		.word	.LC18
 1891 09fc 88000000 		.word	.LC17
 1892 0a00 98000000 		.word	.LC19
 1893              	.LBE29:
 1894              		.cfi_endproc
 1895              	.LFE130:
 1897              		.section	.text.Error_Handler,"ax",%progbits
 1898              		.align	1
 1899              		.p2align 2,,3
 1900              		.global	Error_Handler
 1901              		.syntax unified
 1902              		.thumb
 1903              		.thumb_func
 1904              		.fpu fpv4-sp-d16
 1906              	Error_Handler:
 1907              	.LFB132:
 914:Src/main.c    **** 
 915:Src/main.c    **** /* USER CODE BEGIN 4 */
 916:Src/main.c    **** 
 917:Src/main.c    **** /* USER CODE END 4 */
 918:Src/main.c    **** 
 919:Src/main.c    **** /**
 920:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 921:Src/main.c    ****   * @retval None
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s 			page 55


 922:Src/main.c    ****   */
 923:Src/main.c    **** void Error_Handler(void)
 924:Src/main.c    **** {
 1908              		.loc 1 924 0
 1909              		.cfi_startproc
 1910              		@ Volatile: function does not return.
 1911              		@ args = 0, pretend = 0, frame = 0
 1912              		@ frame_needed = 0, uses_anonymous_args = 0
 1913              		@ link register save eliminated.
 1914              	.L131:
 1915 0000 FEE7     		b	.L131
 1916              		.cfi_endproc
 1917              	.LFE132:
 1919              		.comm	adc,20,4
 1920              		.comm	g_ADCBuffer,20,4
 1921              		.comm	Gsens_Z,2,2
 1922              		.comm	Gsens_Y,2,2
 1923              		.comm	Gsens_X,2,2
 1924              		.comm	Gsens_EN,1,1
 1925              		.comm	CAN_EN,1,1
 1926              		.global	FP_duty
 1927              		.global	FP_volt
 1928              		.global	O2_volt
 1929              		.global	meas_value
 1930              		.global	meas_sign
 1931              		.global	meas_frac
 1932              		.global	meas_digit
 1933              		.global	meas_unit
 1934              		.global	meas_name
 1935              		.global	idct_status
 1936              		.global	idct_name
 1937              		.global	cursor
 1938              		.comm	setting,1,1
 1939              		.comm	mode,1,1
 1940              		.global	MT
 1941              		.global	gear
 1942              		.global	update_display
 1943              		.comm	u8g2,128,4
 1944              		.global	enfini_logo
 1945 0002 00BF     		.section	.bss.cursor,"aw",%nobits
 1946              		.set	.LANCHOR12,. + 0
 1949              	cursor:
 1950 0000 00       		.space	1
 1951              		.section	.bss.gear,"aw",%nobits
 1954              	gear:
 1955 0000 00       		.space	1
 1956              		.section	.bss.idct_status,"aw",%nobits
 1957              		.align	2
 1958              		.set	.LANCHOR1,. + 0
 1961              	idct_status:
 1962 0000 0000     		.space	2
 1963              		.section	.bss.update_display,"aw",%nobits
 1966              	update_display:
 1967 0000 00       		.space	1
 1968              		.section	.data.FP_duty,"aw",%progbits
 1969              		.align	1
 1970              		.set	.LANCHOR5,. + 0
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s 			page 56


 1973              	FP_duty:
 1974 0000 6400     		.short	100
 1975              		.section	.data.FP_volt,"aw",%progbits
 1976              		.align	1
 1977              		.set	.LANCHOR7,. + 0
 1980              	FP_volt:
 1981 0000 4A01     		.short	330
 1982              		.section	.data.MT,"aw",%progbits
 1983              		.align	3
 1986              	MT:
 1987 0000 77BE9F1A 		.word	446676599
 1988 0004 2FDD0B40 		.word	1074519343
 1989 0008 1F85EB51 		.word	1374389535
 1990 000c B81E0040 		.word	1073749688
 1991 0010 A8C64B37 		.word	927712936
 1992 0014 8941F63F 		.word	1073103241
 1993 0018 00000000 		.word	0
 1994 001c 0000F03F 		.word	1072693248
 1995 0020 986E1283 		.word	2199023256
 1996 0024 C0CAE93F 		.word	1072286400
 1997              		.section	.data.O2_volt,"aw",%progbits
 1998              		.align	1
 1999              		.set	.LANCHOR6,. + 0
 2002              	O2_volt:
 2003 0000 4A01     		.short	330
 2004              		.section	.data.meas_value,"aw",%progbits
 2005              		.align	2
 2006              		.set	.LANCHOR8,. + 0
 2009              	meas_value:
 2010 0000 6900     		.short	105
 2011 0002 EB00     		.short	235
 2012 0004 8502     		.short	645
 2013 0006 5900     		.short	89
 2014 0008 4900     		.short	73
 2015 000a 8F00     		.short	143
 2016              		.section	.rodata.draw_MeasLabels.str1.4,"aMS",%progbits,1
 2017              		.align	2
 2018              	.LC0:
 2019 0000 25202000 		.ascii	"%  \000"
 2020              	.LC1:
 2021 0004 44555459 		.ascii	"DUTY\000"
 2021      00
 2022              		.section	.rodata.enfini_logo,"a",%progbits
 2023              		.align	2
 2024              		.set	.LANCHOR4,. + 0
 2027              	enfini_logo:
 2028 0000 00       		.byte	0
 2029 0001 00       		.byte	0
 2030 0002 00       		.byte	0
 2031 0003 00       		.byte	0
 2032 0004 00       		.byte	0
 2033 0005 00       		.byte	0
 2034 0006 00       		.byte	0
 2035 0007 00       		.byte	0
 2036 0008 00       		.byte	0
 2037 0009 00       		.byte	0
 2038 000a 00       		.byte	0
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s 			page 57


 2039 000b 00       		.byte	0
 2040 000c 00       		.byte	0
 2041 000d 00       		.byte	0
 2042 000e 00       		.byte	0
 2043 000f 00       		.byte	0
 2044 0010 00       		.byte	0
 2045 0011 00       		.byte	0
 2046 0012 00       		.byte	0
 2047 0013 00       		.byte	0
 2048 0014 00       		.byte	0
 2049 0015 00       		.byte	0
 2050 0016 00       		.byte	0
 2051 0017 00       		.byte	0
 2052 0018 00       		.byte	0
 2053 0019 00       		.byte	0
 2054 001a F0       		.byte	-16
 2055 001b 0F       		.byte	15
 2056 001c 00       		.byte	0
 2057 001d 00       		.byte	0
 2058 001e 00       		.byte	0
 2059 001f FC       		.byte	-4
 2060 0020 FF       		.byte	-1
 2061 0021 FF       		.byte	-1
 2062 0022 3F       		.byte	63
 2063 0023 00       		.byte	0
 2064 0024 80       		.byte	-128
 2065 0025 FF       		.byte	-1
 2066 0026 FF       		.byte	-1
 2067 0027 FF       		.byte	-1
 2068 0028 FF       		.byte	-1
 2069 0029 01       		.byte	1
 2070 002a E0       		.byte	-32
 2071 002b 1F       		.byte	31
 2072 002c 00       		.byte	0
 2073 002d 80       		.byte	-128
 2074 002e FF       		.byte	-1
 2075 002f 07       		.byte	7
 2076 0030 E0       		.byte	-32
 2077 0031 01       		.byte	1
 2078 0032 00       		.byte	0
 2079 0033 80       		.byte	-128
 2080 0034 81       		.byte	-127
 2081 0035 07       		.byte	7
 2082 0036 E0       		.byte	-32
 2083 0037 01       		.byte	1
 2084 0038 00       		.byte	0
 2085 0039 80       		.byte	-128
 2086 003a 81       		.byte	-127
 2087 003b 07       		.byte	7
 2088 003c C0       		.byte	-64
 2089 003d E1       		.byte	-31
 2090 003e 07       		.byte	7
 2091 003f C0       		.byte	-64
 2092 0040 80       		.byte	-128
 2093 0041 03       		.byte	3
 2094 0042 00       		.byte	0
 2095 0043 FC       		.byte	-4
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s 			page 58


 2096 0044 1F       		.byte	31
 2097 0045 E0       		.byte	-32
 2098 0046 80       		.byte	-128
 2099 0047 03       		.byte	3
 2100 0048 00       		.byte	0
 2101 0049 FE       		.byte	-2
 2102 004a 7F       		.byte	127
 2103 004b 70       		.byte	112
 2104 004c C0       		.byte	-64
 2105 004d 01       		.byte	1
 2106 004e 00       		.byte	0
 2107 004f 0F       		.byte	15
 2108 0050 FE       		.byte	-2
 2109 0051 39       		.byte	57
 2110 0052 E0       		.byte	-32
 2111 0053 00       		.byte	0
 2112 0054 00       		.byte	0
 2113 0055 07       		.byte	7
 2114 0056 F8       		.byte	-8
 2115 0057 1F       		.byte	31
 2116 0058 F0       		.byte	-16
 2117 0059 00       		.byte	0
 2118 005a 00       		.byte	0
 2119 005b 0E       		.byte	14
 2120 005c E0       		.byte	-32
 2121 005d 1F       		.byte	31
 2122 005e 78       		.byte	120
 2123 005f 00       		.byte	0
 2124 0060 00       		.byte	0
 2125 0061 0C       		.byte	12
 2126 0062 C0       		.byte	-64
 2127 0063 FF       		.byte	-1
 2128 0064 3F       		.byte	63
 2129 0065 00       		.byte	0
 2130 0066 00       		.byte	0
 2131 0067 18       		.byte	24
 2132 0068 00       		.byte	0
 2133 0069 FF       		.byte	-1
 2134 006a 1F       		.byte	31
 2135 006b 00       		.byte	0
 2136 006c 00       		.byte	0
 2137 006d 38       		.byte	56
 2138 006e C0       		.byte	-64
 2139 006f FF       		.byte	-1
 2140 0070 0F       		.byte	15
 2141 0071 00       		.byte	0
 2142 0072 00       		.byte	0
 2143 0073 70       		.byte	112
 2144 0074 E0       		.byte	-32
 2145 0075 F1       		.byte	-15
 2146 0076 03       		.byte	3
 2147 0077 00       		.byte	0
 2148 0078 00       		.byte	0
 2149 0079 E0       		.byte	-32
 2150 007a 78       		.byte	120
 2151 007b 00       		.byte	0
 2152 007c 00       		.byte	0
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s 			page 59


 2153 007d 00       		.byte	0
 2154 007e 00       		.byte	0
 2155 007f C0       		.byte	-64
 2156 0080 3F       		.byte	63
 2157 0081 E0       		.byte	-32
 2158 0082 01       		.byte	1
 2159 0083 00       		.byte	0
 2160 0084 00       		.byte	0
 2161 0085 80       		.byte	-128
 2162 0086 1F       		.byte	31
 2163 0087 F0       		.byte	-16
 2164 0088 01       		.byte	1
 2165 0089 00       		.byte	0
 2166 008a 00       		.byte	0
 2167 008b 00       		.byte	0
 2168 008c 07       		.byte	7
 2169 008d F8       		.byte	-8
 2170 008e 00       		.byte	0
 2171 008f 00       		.byte	0
 2172 0090 00       		.byte	0
 2173 0091 00       		.byte	0
 2174 0092 1E       		.byte	30
 2175 0093 7C       		.byte	124
 2176 0094 00       		.byte	0
 2177 0095 00       		.byte	0
 2178 0096 00       		.byte	0
 2179 0097 00       		.byte	0
 2180 0098 F8       		.byte	-8
 2181 0099 1F       		.byte	31
 2182 009a 00       		.byte	0
 2183 009b 00       		.byte	0
 2184 009c 00       		.byte	0
 2185 009d 00       		.byte	0
 2186 009e F0       		.byte	-16
 2187 009f 0F       		.byte	15
 2188 00a0 00       		.byte	0
 2189 00a1 00       		.byte	0
 2190 00a2 00       		.byte	0
 2191 00a3 00       		.byte	0
 2192 00a4 80       		.byte	-128
 2193 00a5 01       		.byte	1
 2194 00a6 00       		.byte	0
 2195 00a7 00       		.byte	0
 2196 00a8 00       		.byte	0
 2197 00a9 00       		.byte	0
 2198 00aa 00       		.byte	0
 2199 00ab 00       		.byte	0
 2200 00ac 00       		.byte	0
 2201 00ad 00       		.byte	0
 2202 00ae 00       		.byte	0
 2203 00af 00       		.byte	0
 2204 00b0 00       		.byte	0
 2205 00b1 00       		.byte	0
 2206 00b2 00       		.byte	0
 2207 00b3 00       		.byte	0
 2208 00b4 00       		.byte	0
 2209 00b5 00       		.byte	0
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s 			page 60


 2210 00b6 00       		.byte	0
 2211 00b7 00       		.byte	0
 2212 00b8 00       		.byte	0
 2213 00b9 00       		.byte	0
 2214 00ba 00       		.byte	0
 2215 00bb 00       		.byte	0
 2216 00bc 00       		.byte	0
 2217 00bd 00       		.byte	0
 2218 00be 00       		.byte	0
 2219 00bf 00       		.byte	0
 2220 00c0 00       		.byte	0
 2221 00c1 00       		.byte	0
 2222 00c2 00       		.byte	0
 2223 00c3 00       		.byte	0
 2224 00c4 00       		.byte	0
 2225 00c5 00       		.byte	0
 2226 00c6 00       		.byte	0
 2227 00c7 4C       		.byte	76
 2228 00c8 1C       		.byte	28
 2229 00c9 00       		.byte	0
 2230 00ca 00       		.byte	0
 2231 00cb 00       		.byte	0
 2232 00cc 00       		.byte	0
 2233 00cd 32       		.byte	50
 2234 00ce 0E       		.byte	14
 2235 00cf 00       		.byte	0
 2236 00d0 00       		.byte	0
 2237 00d1 00       		.byte	0
 2238 00d2 00       		.byte	0
 2239 00d3 00       		.byte	0
 2240 00d4 C6       		.byte	-58
 2241 00d5 00       		.byte	0
 2242 00d6 18       		.byte	24
 2243 00d7 00       		.byte	0
 2244 00d8 00       		.byte	0
 2245 00d9 7C       		.byte	124
 2246 00da EF       		.byte	-17
 2247 00db FC       		.byte	-4
 2248 00dc 39       		.byte	57
 2249 00dd 00       		.byte	0
 2250 00de 00       		.byte	0
 2251 00df 4E       		.byte	78
 2252 00e0 C6       		.byte	-58
 2253 00e1 B8       		.byte	-72
 2254 00e2 31       		.byte	49
 2255 00e3 00       		.byte	0
 2256 00e4 00       		.byte	0
 2257 00e5 3E       		.byte	62
 2258 00e6 C6       		.byte	-58
 2259 00e7 98       		.byte	-104
 2260 00e8 31       		.byte	49
 2261 00e9 00       		.byte	0
 2262 00ea 00       		.byte	0
 2263 00eb 3C       		.byte	60
 2264 00ec C6       		.byte	-58
 2265 00ed 98       		.byte	-104
 2266 00ee 31       		.byte	49
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s 			page 61


 2267 00ef 00       		.byte	0
 2268 00f0 00       		.byte	0
 2269 00f1 0E       		.byte	14
 2270 00f2 C6       		.byte	-58
 2271 00f3 98       		.byte	-104
 2272 00f4 31       		.byte	49
 2273 00f5 00       		.byte	0
 2274 00f6 00       		.byte	0
 2275 00f7 4E       		.byte	78
 2276 00f8 CE       		.byte	-50
 2277 00f9 99       		.byte	-103
 2278 00fa 31       		.byte	49
 2279 00fb 00       		.byte	0
 2280 00fc 00       		.byte	0
 2281 00fd 7C       		.byte	124
 2282 00fe EF       		.byte	-17
 2283 00ff FD       		.byte	-3
 2284 0100 7B       		.byte	123
 2285 0101 00       		.byte	0
 2286 0102 00       		.byte	0
 2287 0103 00       		.byte	0
 2288 0104 00       		.byte	0
 2289 0105 00       		.byte	0
 2290 0106 00       		.byte	0
 2291 0107 00       		.byte	0
 2292 0108 00       		.byte	0
 2293 0109 00       		.byte	0
 2294 010a 00       		.byte	0
 2295 010b 00       		.byte	0
 2296 010c 00       		.byte	0
 2297 010d 00       		.byte	0
 2298 010e 00       		.byte	0
 2299 010f 00       		.byte	0
 2300 0110 00       		.byte	0
 2301 0111 00       		.byte	0
 2302 0112 00       		.byte	0
 2303 0113 00       		.byte	0
 2304 0114 00       		.byte	0
 2305 0115 00       		.byte	0
 2306 0116 00       		.byte	0
 2307 0117 00       		.byte	0
 2308 0118 00       		.byte	0
 2309 0119 00       		.byte	0
 2310 011a 00       		.byte	0
 2311 011b 00       		.byte	0
 2312 011c 00       		.byte	0
 2313 011d 00       		.byte	0
 2314 011e 00       		.byte	0
 2315 011f 00       		.byte	0
 2316              		.section	.rodata.idct_name,"a",%progbits
 2317              		.align	2
 2318              		.set	.LANCHOR0,. + 0
 2321              	idct_name:
 2322 0000 43414E00 		.ascii	"CAN\000"
 2323 0004 00       		.space	1
 2324 0005 4753454E 		.ascii	"GSENS"
 2324      53
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s 			page 62


 2325              		.section	.rodata.main.str1.4,"aMS",%progbits,1
 2326              		.align	2
 2327              	.LC2:
 2328 0000 4D756C74 		.ascii	"Multi Function Meter\000"
 2328      69204675 
 2328      6E637469 
 2328      6F6E204D 
 2328      65746572 
 2329 0015 000000   		.space	3
 2330              	.LC3:
 2331 0018 5265762E 		.ascii	"Rev. 0.2c\000"
 2331      20302E32 
 2331      6300
 2332 0022 0000     		.space	2
 2333              	.LC4:
 2334 0024 48656C6C 		.ascii	"Hello. This is MFM.\012\000"
 2334      6F2E2054 
 2334      68697320 
 2334      6973204D 
 2334      464D2E0A 
 2335 0039 000000   		.space	3
 2336              	.LC5:
 2337 003c 55502000 		.ascii	"UP \000"
 2338              	.LC6:
 2339 0040 444F574E 		.ascii	"DOWN \000"
 2339      2000
 2340 0046 0000     		.space	2
 2341              	.LC7:
 2342 0048 454E5445 		.ascii	"ENTER \000"
 2342      522000
 2343 004f 00       		.space	1
 2344              	.LC8:
 2345 0050 72706D00 		.ascii	"rpm\000"
 2346              	.LC9:
 2347 0054 54414348 		.ascii	"TACHO\000"
 2347      4F00
 2348 005a 0000     		.space	2
 2349              	.LC10:
 2350 005c 6B506100 		.ascii	"kPa\000"
 2351              	.LC11:
 2352 0060 4D415000 		.ascii	"MAP\000"
 2353              	.LC12:
 2354 0064 4700     		.ascii	"G\000"
 2355 0066 0000     		.space	2
 2356              	.LC13:
 2357 0068 4C617447 		.ascii	"LatG\000"
 2357      00
 2358 006d 000000   		.space	3
 2359              	.LC14:
 2360 0070 00       		.ascii	"\000"
 2361 0071 000000   		.space	3
 2362              	.LC15:
 2363 0074 4D6F6465 		.ascii	"Mode Setting\000"
 2363      20536574 
 2363      74696E67 
 2363      00
 2364 0081 000000   		.space	3
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s 			page 63


 2365              	.LC16:
 2366 0084 3E00     		.ascii	">\000"
 2367 0086 0000     		.space	2
 2368              	.LC17:
 2369 0088 2000     		.ascii	" \000"
 2370 008a 0000     		.space	2
 2371              	.LC18:
 2372 008c 4D756C74 		.ascii	"Multi-Meter\000"
 2372      692D4D65 
 2372      74657200 
 2373              	.LC19:
 2374 0098 53636F70 		.ascii	"Scope\000"
 2374      6500
 2375              		.section	.rodata.meas_digit,"a",%progbits
 2376              		.align	2
 2377              		.set	.LANCHOR9,. + 0
 2380              	meas_digit:
 2381 0000 03       		.byte	3
 2382 0001 03       		.byte	3
 2383 0002 03       		.byte	3
 2384 0003 03       		.byte	3
 2385 0004 03       		.byte	3
 2386 0005 03       		.byte	3
 2387              		.section	.rodata.meas_frac,"a",%progbits
 2388              		.align	2
 2389              		.set	.LANCHOR10,. + 0
 2392              	meas_frac:
 2393 0000 02       		.byte	2
 2394 0001 01       		.byte	1
 2395 0002 01       		.byte	1
 2396 0003 00       		.byte	0
 2397 0004 00       		.byte	0
 2398 0005 02       		.byte	2
 2399              		.section	.rodata.meas_name,"a",%progbits
 2400              		.align	2
 2401              		.set	.LANCHOR3,. + 0
 2404              	meas_name:
 2405 0000 4D415000 		.ascii	"MAP\000"
 2406 0004 000000   		.space	3
 2407 0007 4F494C50 		.ascii	"OILP\000"
 2407      00
 2408 000c 0000     		.space	2
 2409 000e 46505600 		.ascii	"FPV\000"
 2410 0012 000000   		.space	3
 2411 0015 45435400 		.ascii	"ECT\000"
 2412 0019 000000   		.space	3
 2413 001c 4F494C54 		.ascii	"OILT\000"
 2413      00
 2414 0021 0000     		.space	2
 2415 0023 4F3200   		.ascii	"O2\000"
 2416 0026 00000000 		.space	4
 2417              		.section	.rodata.meas_sign,"a",%progbits
 2418              		.align	2
 2419              		.set	.LANCHOR11,. + 0
 2422              	meas_sign:
 2423 0000 01       		.byte	1
 2424 0001 00       		.byte	0
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s 			page 64


 2425 0002 00       		.byte	0
 2426 0003 00       		.byte	0
 2427 0004 00       		.byte	0
 2428 0005 00       		.byte	0
 2429              		.section	.rodata.meas_unit,"a",%progbits
 2430              		.align	2
 2431              		.set	.LANCHOR2,. + 0
 2434              	meas_unit:
 2435 0000 6B706100 		.ascii	"kpa\000"
 2436 0004 00       		.space	1
 2437 0005 6B706100 		.ascii	"kpa\000"
 2438 0009 00       		.space	1
 2439 000a 56202000 		.ascii	"V  \000"
 2440 000e 00       		.space	1
 2441 000f B0       		.byte	-80
 2442 0010 43       		.byte	67
 2443 0011 00       		.byte	0
 2444 0012 0000     		.space	2
 2445 0014 B0       		.byte	-80
 2446 0015 43       		.byte	67
 2447 0016 00       		.byte	0
 2448 0017 0000     		.space	2
 2449 0019 5600     		.ascii	"V\000"
 2450 001b 000000   		.space	3
 2451              		.text
 2452              	.Letext0:
 2453              		.file 2 "/usr/local/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/machine/_default_type
 2454              		.file 3 "/usr/local/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/_stdint.h"
 2455              		.file 4 "Drivers/CMSIS/Include/core_cm4.h"
 2456              		.file 5 "Drivers/CMSIS/Device/ST/STM32F3xx/Include/system_stm32f3xx.h"
 2457              		.file 6 "Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f303x8.h"
 2458              		.file 7 "Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f3xx.h"
 2459              		.file 8 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_def.h"
 2460              		.file 9 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc.h"
 2461              		.file 10 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc_ex.h"
 2462              		.file 11 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_dma.h"
 2463              		.file 12 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_adc_ex.h"
 2464              		.file 13 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_adc.h"
 2465              		.file 14 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_can.h"
 2466              		.file 15 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_i2c.h"
 2467              		.file 16 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_spi.h"
 2468              		.file 17 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_tim.h"
 2469              		.file 18 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_uart.h"
 2470              		.file 19 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal.h"
 2471              		.file 20 "Inc/adc.h"
 2472              		.file 21 "Inc/can.h"
 2473              		.file 22 "Inc/i2c.h"
 2474              		.file 23 "Inc/spi.h"
 2475              		.file 24 "Inc/tim.h"
 2476              		.file 25 "Inc/usart.h"
 2477              		.file 26 "/usr/local/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/lock.h"
 2478              		.file 27 "/usr/local/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/_types.h"
 2479              		.file 28 "/usr/local/gcc-arm-none-eabi-7-2018-q2-update/lib/gcc/arm-none-eabi/7.3.1/include/stddef
 2480              		.file 29 "/usr/local/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/reent.h"
 2481              		.file 30 "/usr/local/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/math.h"
 2482              		.file 31 "/Users/imashio/Electronics/ARM/_Library/u8x8.h"
 2483              		.file 32 "/Users/imashio/Electronics/ARM/_Library/u8g2.h"
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s 			page 65


 2484              		.file 33 "/Users/imashio/Electronics/ARM/_Library/flag.h"
 2485              		.file 34 "Inc/defi_decoder.h"
 2486              		.file 35 "Inc/pulse_counter.h"
 2487              		.file 36 "Inc/can_obd.h"
 2488              		.file 37 "/Users/imashio/Electronics/ARM/_Library/draw_Value.h"
 2489              		.file 38 "/Users/imashio/Electronics/ARM/_Library/draw_IndicatorBox.h"
 2490              		.file 39 "/Users/imashio/Electronics/ARM/_Library/usart_transmit_printf.h"
 2491              		.file 40 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_cortex.h"
 2492              		.file 41 "Inc/gsens_ADXL345.h"
 2493              		.file 42 "/Users/imashio/Electronics/ARM/_Library/draw_BarGraph.h"
 2494              		.file 43 "Inc/gpio.h"
 2495              		.file 44 "Inc/dma.h"
 2496              		.file 45 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_gpio.h"
 2497              		.file 46 "<built-in>"
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s 			page 66


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s:18     .text.draw_indicators:0000000000000000 $t
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s:26     .text.draw_indicators:0000000000000000 draw_indicators
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s:81     .text.draw_indicators:000000000000003c $d
                            *COM*:0000000000000080 u8g2
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s:88     .text.draw_MeasLabels:0000000000000000 $t
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s:96     .text.draw_MeasLabels:0000000000000000 draw_MeasLabels
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s:213    .text.draw_MeasLabels:00000000000000d0 $d
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s:222    .text.draw_MeasLabels_Rotary:0000000000000000 $t
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s:230    .text.draw_MeasLabels_Rotary:0000000000000000 draw_MeasLabels_Rotary
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s:286    .text.draw_MeasLabels_Rotary:000000000000003c $d
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s:293    .text.HAL_ADC_ConvCpltCallback:0000000000000000 $t
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s:301    .text.HAL_ADC_ConvCpltCallback:0000000000000000 HAL_ADC_ConvCpltCallback
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s:327    .text.HAL_ADC_ConvCpltCallback:0000000000000018 $d
                            *COM*:0000000000000014 g_ADCBuffer
                            *COM*:0000000000000014 adc
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s:333    .text.SystemClock_Config:0000000000000000 $t
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s:341    .text.SystemClock_Config:0000000000000000 SystemClock_Config
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s:465    .text.startup.main:0000000000000000 $t
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s:473    .text.startup.main:0000000000000000 main
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s:976    .text.startup.main:0000000000000318 $d
                            *COM*:0000000000000001 Gsens_EN
                            *COM*:0000000000000001 CAN_EN
                            *COM*:0000000000000001 mode
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s:1027   .text.startup.main:00000000000003dc $t
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s:1365   .text.startup.main:0000000000000610 $d
                            *COM*:0000000000000002 Gsens_X
                            *COM*:0000000000000002 Gsens_Y
                            *COM*:0000000000000002 Gsens_Z
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s:1388   .text.startup.main:0000000000000660 $t
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s:1774   .text.startup.main:000000000000091c $d
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s:1795   .text.startup.main:0000000000000960 $t
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s:1885   .text.startup.main:00000000000009e4 $d
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s:1898   .text.Error_Handler:0000000000000000 $t
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s:1906   .text.Error_Handler:0000000000000000 Error_Handler
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s:1973   .data.FP_duty:0000000000000000 FP_duty
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s:1980   .data.FP_volt:0000000000000000 FP_volt
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s:2002   .data.O2_volt:0000000000000000 O2_volt
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s:2009   .data.meas_value:0000000000000000 meas_value
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s:2422   .rodata.meas_sign:0000000000000000 meas_sign
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s:2392   .rodata.meas_frac:0000000000000000 meas_frac
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s:2380   .rodata.meas_digit:0000000000000000 meas_digit
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s:2434   .rodata.meas_unit:0000000000000000 meas_unit
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s:2404   .rodata.meas_name:0000000000000000 meas_name
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s:1961   .bss.idct_status:0000000000000000 idct_status
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s:2321   .rodata.idct_name:0000000000000000 idct_name
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s:1949   .bss.cursor:0000000000000000 cursor
                            *COM*:0000000000000001 setting
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s:1986   .data.MT:0000000000000000 MT
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s:1954   .bss.gear:0000000000000000 gear
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s:1966   .bss.update_display:0000000000000000 update_display
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s:2027   .rodata.enfini_logo:0000000000000000 enfini_logo
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s:1950   .bss.cursor:0000000000000000 $d
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s:1955   .bss.gear:0000000000000000 $d
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s:1957   .bss.idct_status:0000000000000000 $d
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s:1967   .bss.update_display:0000000000000000 $d
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s 			page 67


/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s:1969   .data.FP_duty:0000000000000000 $d
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s:1976   .data.FP_volt:0000000000000000 $d
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s:1983   .data.MT:0000000000000000 $d
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s:1998   .data.O2_volt:0000000000000000 $d
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s:2005   .data.meas_value:0000000000000000 $d
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s:2017   .rodata.draw_MeasLabels.str1.4:0000000000000000 $d
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s:2023   .rodata.enfini_logo:0000000000000000 $d
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s:2317   .rodata.idct_name:0000000000000000 $d
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s:2326   .rodata.main.str1.4:0000000000000000 $d
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s:2376   .rodata.meas_digit:0000000000000000 $d
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s:2388   .rodata.meas_frac:0000000000000000 $d
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s:2400   .rodata.meas_name:0000000000000000 $d
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s:2418   .rodata.meas_sign:0000000000000000 $d
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s:2430   .rodata.meas_unit:0000000000000000 $d

UNDEFINED SYMBOLS
draw_IndicatorBox
draw_MeasLabelUnit
draw_Value
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
__aeabi_f2d
__aeabi_dmul
__aeabi_ddiv
__aeabi_d2iz
__aeabi_d2uiz
HAL_Init
memset
MX_GPIO_Init
MX_DMA_Init
MX_ADC1_Init
MX_CAN_Init
MX_I2C1_Init
MX_SPI1_Init
MX_TIM1_Init
MX_TIM2_Init
MX_TIM3_Init
MX_TIM6_Init
MX_USART1_UART_Init
MX_USART2_UART_Init
MX_TIM7_Init
MX_TIM16_Init
HAL_TIM_PWM_Start
HAL_TIM_Base_Start_IT
HAL_ADC_Start_DMA
HAL_UART_Receive_IT
CAN_OBD_Init
u8g2_Setup_ssd1309_128x64_noname2_f
HAL_GPIO_WritePin
HAL_Delay
u8x8_InitDisplay
u8x8_SetPowerSave
u8x8_SetContrast
u8g2_ClearDisplay
u8g2_DrawXBMP
u8g2_SetFont
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccgrHnRq.s 			page 68


u8g2_DrawStr
u8g2_SendBuffer
u8g2_ClearBuffer
HAL_UART_Transmit_printf
Gsens_ADXL345_Init
CAN_OBD_Response
defi_decoder
htim1
htim2
htim3
htim6
htim7
htim16
hadc1
DEFI_value
UART1_Data
huart1
u8x8_gpio_and_delay_STM32F303
u8x8_byte_4wire_hw_spi
u8g2_cb_r0
u8g2_font_5x7_tf
huart2
CAN_Received
UART1_RxData
flag_meas
flag_sw
flag_disp
flag_status
rpm
HAL_NVIC_DisableIRQ
draw_CircularMeter_Init
draw_CircularMeter
Gsens_ADXL345_Read_G
draw_Wave_axis
draw_Wave
draw_BarGraph
draw_Rotary
draw_MeasUnit
u8g2_font_7x14B_tf
