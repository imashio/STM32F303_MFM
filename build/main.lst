ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.ADXL345_RegWrite,"ax",%progbits
  18              		.align	1
  19              		.p2align 2,,3
  20              		.global	ADXL345_RegWrite
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	ADXL345_RegWrite:
  27              	.LFB126:
  28              		.file 1 "Src/main.c"
   1:Src/main.c    **** /* USER CODE BEGIN Header */
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   * @attention
   8:Src/main.c    ****   *
   9:Src/main.c    ****   * <h2><center>&copy; Copyright (c) 2019 STMicroelectronics.
  10:Src/main.c    ****   * All rights reserved.</center></h2>
  11:Src/main.c    ****   *
  12:Src/main.c    ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Src/main.c    ****   * the "License"; You may not use this file except in compliance with the
  14:Src/main.c    ****   * License. You may obtain a copy of the License at:
  15:Src/main.c    ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Src/main.c    ****   *
  17:Src/main.c    ****   ******************************************************************************
  18:Src/main.c    ****   */
  19:Src/main.c    **** /* USER CODE END Header */
  20:Src/main.c    **** 
  21:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  22:Src/main.c    **** #include "main.h"
  23:Src/main.c    **** #include "adc.h"
  24:Src/main.c    **** #include "can.h"
  25:Src/main.c    **** #include "dma.h"
  26:Src/main.c    **** #include "i2c.h"
  27:Src/main.c    **** #include "spi.h"
  28:Src/main.c    **** #include "tim.h"
  29:Src/main.c    **** #include "usart.h"
  30:Src/main.c    **** #include "gpio.h"
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s 			page 2


  31:Src/main.c    **** 
  32:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  33:Src/main.c    **** /* USER CODE BEGIN Includes */
  34:Src/main.c    **** #include <stdio.h>
  35:Src/main.c    **** #include <math.h>
  36:Src/main.c    **** 
  37:Src/main.c    **** // #include "basic.h"  // original library
  38:Src/main.c    **** #include "usart_transmit_printf.h"
  39:Src/main.c    **** #include "u8g2.h"		// graphic display library
  40:Src/main.c    **** #include "u8x8_gpio_STM32F303.h"
  41:Src/main.c    **** #include "u8x8_byte_4wire_hw_spi.h"
  42:Src/main.c    **** #include "draw_Value.h"
  43:Src/main.c    **** #include "draw_BarGraph.h"
  44:Src/main.c    **** #include "draw_IndicatorBox.h"
  45:Src/main.c    **** //#include "draw_Rotary.h"
  46:Src/main.c    **** 
  47:Src/main.c    **** #include "flag.h"
  48:Src/main.c    **** #include "defi_decoder.h"
  49:Src/main.c    **** #include "pulse_counter.h"
  50:Src/main.c    **** 
  51:Src/main.c    **** /* USER CODE END Includes */
  52:Src/main.c    **** 
  53:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  54:Src/main.c    **** /* USER CODE BEGIN PTD */
  55:Src/main.c    **** 
  56:Src/main.c    **** /* USER CODE END PTD */
  57:Src/main.c    **** 
  58:Src/main.c    **** /* Private define ------------------------------------------------------------*/
  59:Src/main.c    **** /* USER CODE BEGIN PD */
  60:Src/main.c    **** /* USER CODE END PD */
  61:Src/main.c    **** 
  62:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
  63:Src/main.c    **** /* USER CODE BEGIN PM */
  64:Src/main.c    **** /* USER CODE END PM */
  65:Src/main.c    **** 
  66:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  67:Src/main.c    **** 
  68:Src/main.c    **** /* USER CODE BEGIN PV */
  69:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  70:Src/main.c    **** 
  71:Src/main.c    **** // mode definition
  72:Src/main.c    **** #define N_mode                5
  73:Src/main.c    **** 
  74:Src/main.c    **** #define MODE_BAR_METER        0
  75:Src/main.c    **** #define MODE_CIRCULAR_METER   1
  76:Src/main.c    **** //#define MODE_ROTARY           2
  77:Src/main.c    **** #define MODE_SCOPE_MAP        2
  78:Src/main.c    **** #define MODE_SCOPE_Gsens      3
  79:Src/main.c    **** #define MODE_SETTING          4
  80:Src/main.c    **** 
  81:Src/main.c    **** // RPM bar graph parameter definition
  82:Src/main.c    **** #define	rpmbar_x		  0
  83:Src/main.c    **** #define	rpmbar_y		  0
  84:Src/main.c    **** #define	rpmbar_width	128
  85:Src/main.c    **** #define	rpmbar_height	14
  86:Src/main.c    **** #define	rpm_min			  0
  87:Src/main.c    **** #define	rpm_max			  9000
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s 			page 3


  88:Src/main.c    **** 
  89:Src/main.c    **** // measurements display parameter definition
  90:Src/main.c    **** // Bar graph
  91:Src/main.c    **** #define	N_meas			      6
  92:Src/main.c    **** #define	meas_x			      0
  93:Src/main.c    **** #define	meas_y			      16
  94:Src/main.c    **** #define	meas_x_offset   	2
  95:Src/main.c    **** #define	meas_width1		    70
  96:Src/main.c    **** #define	meas_width2		    56
  97:Src/main.c    **** #define	meas_height		    12
  98:Src/main.c    **** // Circular Meter
  99:Src/main.c    **** #define	N_meas_C			    4
 100:Src/main.c    **** #define	meas_C_x			    68
 101:Src/main.c    **** #define	meas_C_y			    2
 102:Src/main.c    **** #define	meas_C_x_offset		2
 103:Src/main.c    **** #define	meas_C_width		  60
 104:Src/main.c    **** #define	meas_C_height		  13
 105:Src/main.c    **** 
 106:Src/main.c    **** // indicators parameter definition
 107:Src/main.c    **** #define	N_idct			      2
 108:Src/main.c    **** #define	idct_x			      72
 109:Src/main.c    **** #define	idct_y			      53
 110:Src/main.c    **** #define	idct_width		    27
 111:Src/main.c    **** #define	idct_height		    9
 112:Src/main.c    **** 
 113:Src/main.c    **** //  Fuel Pump Voltage display parameter definition
 114:Src/main.c    **** #define	FP_x		    	    0
 115:Src/main.c    **** #define	FP_y              52
 116:Src/main.c    **** #define	FP_height	        12
 117:Src/main.c    **** #define	FP_volt_width	    45
 118:Src/main.c    **** #define	FP_duty_width	    70
 119:Src/main.c    **** 
 120:Src/main.c    **** // wave display parameter definition
 121:Src/main.c    **** #define	wave_x			      0
 122:Src/main.c    **** #define	wave_y			      13
 123:Src/main.c    **** #define	wave_width		    128
 124:Src/main.c    **** #define	wave_height		    52
 125:Src/main.c    **** #define	wave_value_min	  -100
 126:Src/main.c    **** #define	wave_value_max	  +200
 127:Src/main.c    **** 
 128:Src/main.c    **** // logo parameter definition (small 'enfini' logo)
 129:Src/main.c    **** #define logo_width        48
 130:Src/main.c    **** #define logo_height       48
 131:Src/main.c    **** 
 132:Src/main.c    **** const unsigned char logo_bits[] = {
 133:Src/main.c    ****   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 134:Src/main.c    ****   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 135:Src/main.c    ****   0x00, 0x00, 0xF0, 0x0F, 0x00, 0x00, 0x00, 0xFC, 0xFF, 0xFF, 0x3F, 0x00,
 136:Src/main.c    ****   0x80, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0xE0, 0x1F, 0x00, 0x80, 0xFF, 0x07,
 137:Src/main.c    ****   0xE0, 0x01, 0x00, 0x80, 0x81, 0x07, 0xE0, 0x01, 0x00, 0x80, 0x81, 0x07,
 138:Src/main.c    ****   0xC0, 0xE1, 0x07, 0xC0, 0x80, 0x03, 0x00, 0xFC, 0x1F, 0xE0, 0x80, 0x03,
 139:Src/main.c    ****   0x00, 0xFE, 0x7F, 0x70, 0xC0, 0x01, 0x00, 0x0F, 0xFE, 0x39, 0xE0, 0x00,
 140:Src/main.c    ****   0x00, 0x07, 0xF8, 0x1F, 0xF0, 0x00, 0x00, 0x0E, 0xE0, 0x1F, 0x78, 0x00,
 141:Src/main.c    ****   0x00, 0x0C, 0xC0, 0xFF, 0x3F, 0x00, 0x00, 0x18, 0x00, 0xFF, 0x1F, 0x00,
 142:Src/main.c    ****   0x00, 0x38, 0xC0, 0xFF, 0x0F, 0x00, 0x00, 0x70, 0xE0, 0xF1, 0x03, 0x00,
 143:Src/main.c    ****   0x00, 0xE0, 0x78, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x3F, 0xE0, 0x01, 0x00,
 144:Src/main.c    ****   0x00, 0x80, 0x1F, 0xF0, 0x01, 0x00, 0x00, 0x00, 0x07, 0xF8, 0x00, 0x00,
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s 			page 4


 145:Src/main.c    ****   0x00, 0x00, 0x1E, 0x7C, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x1F, 0x00, 0x00,
 146:Src/main.c    ****   0x00, 0x00, 0xF0, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00,
 147:Src/main.c    ****   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 148:Src/main.c    ****   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 149:Src/main.c    ****   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4C, 0x1C, 0x00, 0x00, 0x00,
 150:Src/main.c    ****   0x00, 0x32, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC6, 0x00, 0x18, 0x00,
 151:Src/main.c    ****   0x00, 0x7C, 0xEF, 0xFC, 0x39, 0x00, 0x00, 0x4E, 0xC6, 0xB8, 0x31, 0x00,
 152:Src/main.c    ****   0x00, 0x3E, 0xC6, 0x98, 0x31, 0x00, 0x00, 0x3C, 0xC6, 0x98, 0x31, 0x00,
 153:Src/main.c    ****   0x00, 0x0E, 0xC6, 0x98, 0x31, 0x00, 0x00, 0x4E, 0xCE, 0x99, 0x31, 0x00,
 154:Src/main.c    ****   0x00, 0x7C, 0xEF, 0xFD, 0x7B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 155:Src/main.c    ****   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 156:Src/main.c    ****   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 157:Src/main.c    ****   };
 158:Src/main.c    **** 
 159:Src/main.c    **** /*
 160:Src/main.c    **** // logo parameter definition (meidium 'enfini' logo)
 161:Src/main.c    **** #define logo_width        54
 162:Src/main.c    **** #define logo_height       48
 163:Src/main.c    **** 
 164:Src/main.c    **** static unsigned char logo_bits[] = {
 165:Src/main.c    ****   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0xFF, 0x0F,
 166:Src/main.c    ****   0x00, 0x00, 0x00, 0xFC, 0xFF, 0xFF, 0xFF, 0x1F, 0x00, 0xE0, 0xFF, 0xFF,
 167:Src/main.c    ****   0xFF, 0xFF, 0xFF, 0x01, 0xF8, 0x3F, 0x00, 0x00, 0xF0, 0xFF, 0x07, 0xF8,
 168:Src/main.c    ****   0x01, 0x00, 0x00, 0x70, 0xE0, 0x0F, 0x7C, 0x00, 0x00, 0x00, 0x70, 0x80,
 169:Src/main.c    ****   0x0F, 0x7C, 0x00, 0x00, 0x00, 0x70, 0x00, 0x07, 0xF8, 0x00, 0x00, 0x00,
 170:Src/main.c    ****   0x38, 0x80, 0x07, 0x00, 0xF8, 0x3F, 0x00, 0x38, 0x80, 0x07, 0x00, 0xFE,
 171:Src/main.c    ****   0xFF, 0x00, 0x1C, 0xC0, 0x03, 0x80, 0xFF, 0xFF, 0x01, 0x0E, 0xC0, 0x01,
 172:Src/main.c    ****   0xC0, 0x07, 0xFC, 0x07, 0x07, 0xE0, 0x01, 0x80, 0x03, 0xF0, 0x9F, 0x03,
 173:Src/main.c    ****   0xF0, 0x00, 0x80, 0x03, 0xC0, 0xFF, 0x03, 0x78, 0x00, 0x00, 0x07, 0x80,
 174:Src/main.c    ****   0xFF, 0x01, 0x3C, 0x00, 0x00, 0x06, 0x00, 0xFE, 0x87, 0x3F, 0x00, 0x00,
 175:Src/main.c    ****   0x0E, 0x00, 0xF8, 0xFF, 0x1F, 0x00, 0x00, 0x1C, 0x00, 0xF8, 0xFF, 0x07,
 176:Src/main.c    ****   0x00, 0x00, 0x38, 0x00, 0xDE, 0xFF, 0x03, 0x00, 0x00, 0x70, 0x00, 0x0F,
 177:Src/main.c    ****   0x7E, 0x00, 0x00, 0x00, 0xE0, 0xC0, 0x07, 0x00, 0x00, 0x00, 0x00, 0xC0,
 178:Src/main.c    ****   0xF1, 0x01, 0x00, 0x00, 0x00, 0x00, 0x80, 0xFF, 0x00, 0x7C, 0x00, 0x00,
 179:Src/main.c    ****   0x00, 0x00, 0x3F, 0x00, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x1F,
 180:Src/main.c    ****   0x00, 0x00, 0x00, 0x00, 0x3C, 0x80, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x78,
 181:Src/main.c    ****   0xE0, 0x07, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xFF, 0x03, 0x00, 0x00, 0x00,
 182:Src/main.c    ****   0x00, 0xC0, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x00, 0x00,
 183:Src/main.c    ****   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00,
 184:Src/main.c    ****   0x00, 0x00, 0x00, 0x00, 0x4E, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39,
 185:Src/main.c    ****   0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x00,
 186:Src/main.c    ****   0x00, 0x7E, 0x3E, 0xC7, 0x3D, 0x1C, 0x00, 0x00, 0x6F, 0x3E, 0xC7, 0x7F,
 187:Src/main.c    ****   0x1C, 0x00, 0x00, 0x03, 0x1C, 0x86, 0x73, 0x18, 0x00, 0x00, 0x07, 0x1C,
 188:Src/main.c    ****   0x86, 0x71, 0x18, 0x00, 0x00, 0x3E, 0x1C, 0x86, 0x71, 0x18, 0x00, 0x00,
 189:Src/main.c    ****   0x1F, 0x1C, 0x86, 0x71, 0x18, 0x00, 0x00, 0x03, 0x1C, 0x86, 0x71, 0x18,
 190:Src/main.c    ****   0x00, 0x00, 0x47, 0x1C, 0x86, 0x71, 0x18, 0x00, 0x00, 0x7F, 0x3E, 0xCF,
 191:Src/main.c    ****   0xFB, 0x3C, 0x00, 0x00, 0x3C, 0x3E, 0xCF, 0xFB, 0x3C, 0x00, 0x00, 0x00,
 192:Src/main.c    ****   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 193:Src/main.c    ****   };
 194:Src/main.c    **** */
 195:Src/main.c    **** 
 196:Src/main.c    **** u8g2_t    u8g2; // a structure which will contain all the data for one display
 197:Src/main.c    **** 
 198:Src/main.c    **** uint8_t   update_display = 0;
 199:Src/main.c    **** 
 200:Src/main.c    **** // uint16_t	rpm = 0;
 201:Src/main.c    **** uint16_t	speed = 240;
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s 			page 5


 202:Src/main.c    **** uint8_t		gear = 0;
 203:Src/main.c    **** double		MT[5] = {3.483, 2.015, 1.391, 1.000, 0.806};
 204:Src/main.c    **** 
 205:Src/main.c    **** // UI
 206:Src/main.c    **** uint8_t   mode;
 207:Src/main.c    **** uint8_t   setting;
 208:Src/main.c    **** uint8_t   cursor = 0;
 209:Src/main.c    **** 
 210:Src/main.c    **** /*
 211:Src/main.c    **** typedef struct {
 212:Src/main.c    **** 	unsigned char	name;
 213:Src/main.c    **** 	uint8_t			status;
 214:Src/main.c    **** } idct;
 215:Src/main.c    **** */
 216:Src/main.c    **** 
 217:Src/main.c    **** // variables for indicators
 218:Src/main.c    **** const unsigned char idct_name[N_idct][5] = { // length must be (text length + 1)
 219:Src/main.c    **** 		"CAN"	,
 220:Src/main.c    **** 		"O2FB"
 221:Src/main.c    **** };
 222:Src/main.c    **** 
 223:Src/main.c    **** const uint8_t	idct_status[N_idct] = {
 224:Src/main.c    **** 		1	,
 225:Src/main.c    **** 		1
 226:Src/main.c    **** };
 227:Src/main.c    **** 
 228:Src/main.c    **** // variables for measurement
 229:Src/main.c    **** const unsigned char meas_name[N_meas][7] = { // length must be (text length + 1)
 230:Src/main.c    **** 		"MAP"         ,
 231:Src/main.c    **** 		"OILP"        ,
 232:Src/main.c    **** 		"FPV"         ,
 233:Src/main.c    **** 		"ECT"         ,
 234:Src/main.c    **** 		"OILT"        ,
 235:Src/main.c    **** 		"O2"          
 236:Src/main.c    **** };
 237:Src/main.c    **** 
 238:Src/main.c    **** const unsigned char meas_unit[N_meas][5] = {
 239:Src/main.c    **** 		"kpa"			    ,	// MAP
 240:Src/main.c    **** 		"kpa"			    ,	// OILP
 241:Src/main.c    **** 		"V  "         ,	// FuelPump Voltage
 242:Src/main.c    **** 		{176, 67, 0}  ,	// ECT  degC...{176, 67, 0}
 243:Src/main.c    **** 		{176, 67, 0}	,	// OILT  degC...{176, 67, 0}
 244:Src/main.c    **** 		"V"					    // O2
 245:Src/main.c    **** };
 246:Src/main.c    **** 
 247:Src/main.c    **** const uint8_t	meas_digit[N_meas] = {
 248:Src/main.c    **** 		3	,	// MAP
 249:Src/main.c    **** 		3	,	// OILP
 250:Src/main.c    **** 		3	,	// FuelPump Voltage
 251:Src/main.c    **** 		3	,	// ECT
 252:Src/main.c    **** 		3	,	// OILT
 253:Src/main.c    **** 		3		// O2
 254:Src/main.c    **** };
 255:Src/main.c    **** 
 256:Src/main.c    **** const uint8_t	meas_frac[N_meas] = {
 257:Src/main.c    **** 		2	,	// MAP
 258:Src/main.c    **** 		1	,	// OILP
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s 			page 6


 259:Src/main.c    **** 		1	,	// FuelPump Voltage
 260:Src/main.c    **** 		0	,	// ECT
 261:Src/main.c    **** 		0	,	// OILT
 262:Src/main.c    **** 		2		// O2
 263:Src/main.c    **** };
 264:Src/main.c    **** 
 265:Src/main.c    **** const uint8_t	meas_sign[N_meas] = {
 266:Src/main.c    **** 		1	,	// MAP
 267:Src/main.c    **** 		0	,	// OILP
 268:Src/main.c    **** 		0	,	// FuelPump Voltage
 269:Src/main.c    **** 		0	,	// ECT
 270:Src/main.c    **** 		0	,	// OILT
 271:Src/main.c    **** 		0		// O2
 272:Src/main.c    **** };
 273:Src/main.c    **** 
 274:Src/main.c    **** int16_t	meas_value[N_meas] = {
 275:Src/main.c    **** 		105	,	// MAP
 276:Src/main.c    **** 		235	,	// OILP
 277:Src/main.c    **** 		645	,	// FuelPump Voltage
 278:Src/main.c    **** 		89	,	// ECT
 279:Src/main.c    **** 		73	,	// OILT
 280:Src/main.c    **** 		143		// O2
 281:Src/main.c    **** };
 282:Src/main.c    **** 
 283:Src/main.c    **** // O2 senser Voltage
 284:Src/main.c    **** int16_t   O2_volt = 330;
 285:Src/main.c    **** 
 286:Src/main.c    **** // Fuel Pump Voltage
 287:Src/main.c    **** int16_t   FP_volt = 330;
 288:Src/main.c    **** int16_t   FP_duty = 100;
 289:Src/main.c    **** 
 290:Src/main.c    **** // ADXL345 3-axis acceration sensor --------------------------------
 291:Src/main.c    **** uint8_t   Gsens_EN;
 292:Src/main.c    **** uint8_t   Gsens_X1;
 293:Src/main.c    **** uint8_t   Gsens_X0;
 294:Src/main.c    **** int16_t   Gsens_X;
 295:Src/main.c    **** uint8_t   Gsens_Y1;
 296:Src/main.c    **** uint8_t   Gsens_Y0;
 297:Src/main.c    **** int16_t   Gsens_Y;
 298:Src/main.c    **** uint8_t   Gsens_Z1;
 299:Src/main.c    **** uint8_t   Gsens_Z0;
 300:Src/main.c    **** int16_t   Gsens_Z;
 301:Src/main.c    **** 
 302:Src/main.c    **** #define ADXL0_ADDR 0x1D
 303:Src/main.c    **** // ADXL345     I2C
 304:Src/main.c    **** // SDO/ALT   Address
 305:Src/main.c    **** //    H        0x1D
 306:Src/main.c    **** //    L        0x53
 307:Src/main.c    **** 
 308:Src/main.c    **** void ADXL345_RegWrite(uint8_t slv_addr, uint8_t addr, uint8_t data){
  29              		.loc 1 308 0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 8
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              	.LVL0:
  34 0000 00B5     		push	{lr}
  35              	.LCFI0:
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s 			page 7


  36              		.cfi_def_cfa_offset 4
  37              		.cfi_offset 14, -4
  38 0002 85B0     		sub	sp, sp, #20
  39              	.LCFI1:
  40              		.cfi_def_cfa_offset 24
 309:Src/main.c    ****   uint8_t i2c_buf[2];
 310:Src/main.c    ****   i2c_buf[0] = addr;
 311:Src/main.c    ****   i2c_buf[1] = data;  
 312:Src/main.c    ****   HAL_I2C_Master_Transmit(&hi2c1, slv_addr << 1, &i2c_buf, 2, 10);
  41              		.loc 1 312 0
  42 0004 0A23     		movs	r3, #10
 310:Src/main.c    ****   i2c_buf[1] = data;  
  43              		.loc 1 310 0
  44 0006 8DF80C10 		strb	r1, [sp, #12]
 311:Src/main.c    ****   HAL_I2C_Master_Transmit(&hi2c1, slv_addr << 1, &i2c_buf, 2, 10);
  45              		.loc 1 311 0
  46 000a 8DF80D20 		strb	r2, [sp, #13]
  47              		.loc 1 312 0
  48 000e 4100     		lsls	r1, r0, #1
  49              	.LVL1:
  50 0010 0093     		str	r3, [sp]
  51 0012 03AA     		add	r2, sp, #12
  52              	.LVL2:
  53 0014 0223     		movs	r3, #2
  54 0016 0348     		ldr	r0, .L4
  55              	.LVL3:
  56 0018 FFF7FEFF 		bl	HAL_I2C_Master_Transmit
  57              	.LVL4:
 313:Src/main.c    **** }
  58              		.loc 1 313 0
  59 001c 05B0     		add	sp, sp, #20
  60              	.LCFI2:
  61              		.cfi_def_cfa_offset 4
  62              		@ sp needed
  63 001e 5DF804FB 		ldr	pc, [sp], #4
  64              	.L5:
  65 0022 00BF     		.align	2
  66              	.L4:
  67 0024 00000000 		.word	hi2c1
  68              		.cfi_endproc
  69              	.LFE126:
  71              		.section	.text.ADXL345_RegRead_1byte,"ax",%progbits
  72              		.align	1
  73              		.p2align 2,,3
  74              		.global	ADXL345_RegRead_1byte
  75              		.syntax unified
  76              		.thumb
  77              		.thumb_func
  78              		.fpu fpv4-sp-d16
  80              	ADXL345_RegRead_1byte:
  81              	.LFB127:
 314:Src/main.c    **** 
 315:Src/main.c    **** int8_t ADXL345_RegRead_1byte(uint8_t slv_addr, uint8_t addr){
  82              		.loc 1 315 0
  83              		.cfi_startproc
  84              		@ args = 0, pretend = 0, frame = 16
  85              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s 			page 8


  86              	.LVL5:
  87 0000 70B5     		push	{r4, r5, r6, lr}
  88              	.LCFI3:
  89              		.cfi_def_cfa_offset 16
  90              		.cfi_offset 4, -16
  91              		.cfi_offset 5, -12
  92              		.cfi_offset 6, -8
  93              		.cfi_offset 14, -4
  94 0002 86B0     		sub	sp, sp, #24
  95              	.LCFI4:
  96              		.cfi_def_cfa_offset 40
  97              		.loc 1 315 0
  98 0004 06AA     		add	r2, sp, #24
 316:Src/main.c    ****   uint8_t data;
 317:Src/main.c    ****   HAL_I2C_Master_Transmit(&hi2c1, slv_addr << 1, &addr, 1, 10);
  99              		.loc 1 317 0
 100 0006 0B4C     		ldr	r4, .L8
 315:Src/main.c    ****   uint8_t data;
 101              		.loc 1 315 0
 102 0008 02F8091D 		strb	r1, [r2, #-9]!
 103              		.loc 1 317 0
 104 000c 4500     		lsls	r5, r0, #1
 105 000e 0A26     		movs	r6, #10
 106 0010 2946     		mov	r1, r5
 107              	.LVL6:
 108 0012 2046     		mov	r0, r4
 109              	.LVL7:
 110 0014 0096     		str	r6, [sp]
 111 0016 0123     		movs	r3, #1
 112 0018 FFF7FEFF 		bl	HAL_I2C_Master_Transmit
 113              	.LVL8:
 318:Src/main.c    ****   HAL_I2C_Master_Receive(&hi2c1, slv_addr << 1, &data, 1, 10);
 114              		.loc 1 318 0
 115 001c 0096     		str	r6, [sp]
 116 001e 2946     		mov	r1, r5
 117 0020 2046     		mov	r0, r4
 118 0022 0123     		movs	r3, #1
 119 0024 0DF11702 		add	r2, sp, #23
 120 0028 FFF7FEFF 		bl	HAL_I2C_Master_Receive
 121              	.LVL9:
 319:Src/main.c    ****   return data;
 320:Src/main.c    **** }
 122              		.loc 1 320 0
 123 002c 9DF91700 		ldrsb	r0, [sp, #23]
 124 0030 06B0     		add	sp, sp, #24
 125              	.LCFI5:
 126              		.cfi_def_cfa_offset 16
 127              		@ sp needed
 128 0032 70BD     		pop	{r4, r5, r6, pc}
 129              	.L9:
 130              		.align	2
 131              	.L8:
 132 0034 00000000 		.word	hi2c1
 133              		.cfi_endproc
 134              	.LFE127:
 136              		.section	.text.draw_indicators,"ax",%progbits
 137              		.align	1
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s 			page 9


 138              		.p2align 2,,3
 139              		.global	draw_indicators
 140              		.syntax unified
 141              		.thumb
 142              		.thumb_func
 143              		.fpu fpv4-sp-d16
 145              	draw_indicators:
 146              	.LFB128:
 321:Src/main.c    **** 
 322:Src/main.c    **** 
 323:Src/main.c    **** /* USER CODE END PV */
 324:Src/main.c    **** 
 325:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
 326:Src/main.c    **** void SystemClock_Config(void);
 327:Src/main.c    **** /* USER CODE BEGIN PFP */
 328:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
 329:Src/main.c    **** 
 330:Src/main.c    **** /* USER CODE END PFP */
 331:Src/main.c    **** 
 332:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
 333:Src/main.c    **** /* USER CODE BEGIN 0 */
 334:Src/main.c    **** void draw_indicators(){
 147              		.loc 1 334 0
 148              		.cfi_startproc
 149              		@ args = 0, pretend = 0, frame = 0
 150              		@ frame_needed = 0, uses_anonymous_args = 0
 151              	.LVL10:
 152 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 153              	.LCFI6:
 154              		.cfi_def_cfa_offset 20
 155              		.cfi_offset 4, -20
 156              		.cfi_offset 5, -16
 157              		.cfi_offset 6, -12
 158              		.cfi_offset 7, -8
 159              		.cfi_offset 14, -4
 335:Src/main.c    ****   uint8_t n;
 336:Src/main.c    ****   uint8_t x, y;
 337:Src/main.c    ****   // draw indicators
 338:Src/main.c    ****   for( n=0; n<N_idct; n++ ){
 339:Src/main.c    **** 	  draw_IndicatorBox(&u8g2, idct_x+(idct_width+2)*n, idct_y, idct_width, idct_height, idct_status[n
 160              		.loc 1 339 0
 161 0002 0D4D     		ldr	r5, .L12
 162 0004 0D4C     		ldr	r4, .L12+4
 334:Src/main.c    ****   uint8_t n;
 163              		.loc 1 334 0
 164 0006 85B0     		sub	sp, sp, #20
 165              	.LCFI7:
 166              		.cfi_def_cfa_offset 40
 167              		.loc 1 339 0
 168 0008 0127     		movs	r7, #1
 169 000a 0926     		movs	r6, #9
 170 000c 0294     		str	r4, [sp, #8]
 171 000e 2846     		mov	r0, r5
 172 0010 CDE90067 		strd	r6, r7, [sp]
 173 0014 1B23     		movs	r3, #27
 174 0016 3522     		movs	r2, #53
 175 0018 4821     		movs	r1, #72
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s 			page 10


 176 001a 0534     		adds	r4, r4, #5
 177 001c FFF7FEFF 		bl	draw_IndicatorBox
 178              	.LVL11:
 179 0020 CDE90174 		strd	r7, r4, [sp, #4]
 180 0024 0096     		str	r6, [sp]
 181 0026 2846     		mov	r0, r5
 182 0028 1B23     		movs	r3, #27
 183 002a 3522     		movs	r2, #53
 184 002c 6521     		movs	r1, #101
 185 002e FFF7FEFF 		bl	draw_IndicatorBox
 186              	.LVL12:
 340:Src/main.c    ****   }
 341:Src/main.c    **** }
 187              		.loc 1 341 0
 188 0032 05B0     		add	sp, sp, #20
 189              	.LCFI8:
 190              		.cfi_def_cfa_offset 20
 191              		@ sp needed
 192 0034 F0BD     		pop	{r4, r5, r6, r7, pc}
 193              	.L13:
 194 0036 00BF     		.align	2
 195              	.L12:
 196 0038 00000000 		.word	u8g2
 197 003c 00000000 		.word	.LANCHOR0
 198              		.cfi_endproc
 199              	.LFE128:
 201              		.section	.text.draw_MeasLabels,"ax",%progbits
 202              		.align	1
 203              		.p2align 2,,3
 204              		.global	draw_MeasLabels
 205              		.syntax unified
 206              		.thumb
 207              		.thumb_func
 208              		.fpu fpv4-sp-d16
 210              	draw_MeasLabels:
 211              	.LFB129:
 342:Src/main.c    **** 
 343:Src/main.c    **** void draw_MeasLabels(){
 212              		.loc 1 343 0
 213              		.cfi_startproc
 214              		@ args = 0, pretend = 0, frame = 0
 215              		@ frame_needed = 0, uses_anonymous_args = 0
 216              	.LVL13:
 217 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 218              	.LCFI9:
 219              		.cfi_def_cfa_offset 20
 220              		.cfi_offset 4, -20
 221              		.cfi_offset 5, -16
 222              		.cfi_offset 6, -12
 223              		.cfi_offset 7, -8
 224              		.cfi_offset 14, -4
 344:Src/main.c    ****   uint8_t n;
 345:Src/main.c    ****   uint8_t x, y;
 346:Src/main.c    ****   // draw measurements label & unit
 347:Src/main.c    ****   for( n=0; n<3; n++ ){
 348:Src/main.c    **** 	  x = meas_x;
 349:Src/main.c    **** 	  y = (n % 3) * meas_height	+ meas_y;
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s 			page 11


 350:Src/main.c    **** 	  draw_MeasLabelUnit(&u8g2, x, y, meas_width1, meas_height, meas_name[n], meas_unit[n]);
 225              		.loc 1 350 0
 226 0002 334C     		ldr	r4, .L16
 227 0004 334E     		ldr	r6, .L16+4
 228 0006 344F     		ldr	r7, .L16+8
 343:Src/main.c    ****   uint8_t n;
 229              		.loc 1 343 0
 230 0008 87B0     		sub	sp, sp, #28
 231              	.LCFI10:
 232              		.cfi_def_cfa_offset 48
 233              		.loc 1 350 0
 234 000a 0C25     		movs	r5, #12
 235 000c 0297     		str	r7, [sp, #8]
 236 000e 2046     		mov	r0, r4
 237 0010 CDE90056 		strd	r5, r6, [sp]
 238 0014 4623     		movs	r3, #70
 239 0016 1022     		movs	r2, #16
 240 0018 0021     		movs	r1, #0
 241 001a FFF7FEFF 		bl	draw_MeasLabelUnit
 242              	.LVL14:
 243 001e 7A1D     		adds	r2, r7, #5
 244 0020 F31D     		adds	r3, r6, #7
 245 0022 CDE90132 		strd	r3, r2, [sp, #4]
 246 0026 2046     		mov	r0, r4
 247 0028 0095     		str	r5, [sp]
 248 002a 4623     		movs	r3, #70
 249 002c 1C22     		movs	r2, #28
 250 002e 0021     		movs	r1, #0
 251 0030 FFF7FEFF 		bl	draw_MeasLabelUnit
 252              	.LVL15:
 253 0034 07F10A02 		add	r2, r7, #10
 254 0038 06F10E03 		add	r3, r6, #14
 255 003c CDE90132 		strd	r3, r2, [sp, #4]
 256 0040 2046     		mov	r0, r4
 257 0042 0095     		str	r5, [sp]
 258 0044 4623     		movs	r3, #70
 259 0046 2822     		movs	r2, #40
 260 0048 0021     		movs	r1, #0
 261 004a FFF7FEFF 		bl	draw_MeasLabelUnit
 262              	.LVL16:
 351:Src/main.c    ****   }
 352:Src/main.c    ****   for( n=3; n<N_meas; n++ ){
 353:Src/main.c    **** 	  x = meas_width1 + meas_x + meas_x_offset;
 354:Src/main.c    **** 	  y = (n % 3) * meas_height	+ meas_y;
 355:Src/main.c    **** 	  draw_MeasLabelUnit(&u8g2, x, y, meas_width2, meas_height, meas_name[n], meas_unit[n]);
 263              		.loc 1 355 0
 264 004e 07F10F02 		add	r2, r7, #15
 265 0052 06F11503 		add	r3, r6, #21
 266 0056 CDE90132 		strd	r3, r2, [sp, #4]
 267 005a 2046     		mov	r0, r4
 268 005c 0095     		str	r5, [sp]
 269 005e 3823     		movs	r3, #56
 270 0060 1022     		movs	r2, #16
 271 0062 4821     		movs	r1, #72
 272 0064 FFF7FEFF 		bl	draw_MeasLabelUnit
 273              	.LVL17:
 274 0068 07F11402 		add	r2, r7, #20
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s 			page 12


 275 006c 06F11C03 		add	r3, r6, #28
 276 0070 CDE90132 		strd	r3, r2, [sp, #4]
 277 0074 2046     		mov	r0, r4
 278 0076 0095     		str	r5, [sp]
 279 0078 3823     		movs	r3, #56
 280 007a 1C22     		movs	r2, #28
 281 007c 4821     		movs	r1, #72
 282 007e 1937     		adds	r7, r7, #25
 283 0080 2336     		adds	r6, r6, #35
 284 0082 FFF7FEFF 		bl	draw_MeasLabelUnit
 285              	.LVL18:
 286 0086 CDE90167 		strd	r6, r7, [sp, #4]
 287 008a 2046     		mov	r0, r4
 288 008c 0095     		str	r5, [sp]
 289 008e 3823     		movs	r3, #56
 290 0090 2822     		movs	r2, #40
 291 0092 4821     		movs	r1, #72
 292 0094 FFF7FEFF 		bl	draw_MeasLabelUnit
 293              	.LVL19:
 356:Src/main.c    ****   }
 357:Src/main.c    **** 
 358:Src/main.c    ****   // Fuel Pump voltage & duty
 359:Src/main.c    ****   draw_MeasLabelUnit(&u8g2, FP_x, FP_y, FP_duty_width, FP_height, "DUTY", "%  ");
 294              		.loc 1 359 0
 295 0098 104E     		ldr	r6, .L16+12
 296 009a 114B     		ldr	r3, .L16+16
 297 009c 0095     		str	r5, [sp]
 298 009e 2046     		mov	r0, r4
 299 00a0 CDE90136 		strd	r3, r6, [sp, #4]
 300 00a4 3422     		movs	r2, #52
 301 00a6 4623     		movs	r3, #70
 302 00a8 0021     		movs	r1, #0
 303 00aa FFF7FEFF 		bl	draw_MeasLabelUnit
 304              	.LVL20:
 360:Src/main.c    ****   draw_Value(&u8g2, FP_x, FP_y, FP_duty_width, FP_height, 100, 3, 0, 0, "%  ");
 305              		.loc 1 360 0
 306 00ae 0021     		movs	r1, #0
 307 00b0 0322     		movs	r2, #3
 308 00b2 6423     		movs	r3, #100
 309 00b4 CDE90132 		strd	r3, r2, [sp, #4]
 310 00b8 0596     		str	r6, [sp, #20]
 311 00ba 0095     		str	r5, [sp]
 312 00bc 2046     		mov	r0, r4
 313 00be CDE90311 		strd	r1, r1, [sp, #12]
 314 00c2 4623     		movs	r3, #70
 315 00c4 3422     		movs	r2, #52
 316 00c6 FFF7FEFF 		bl	draw_Value
 317              	.LVL21:
 361:Src/main.c    **** }
 318              		.loc 1 361 0
 319 00ca 07B0     		add	sp, sp, #28
 320              	.LCFI11:
 321              		.cfi_def_cfa_offset 20
 322              		@ sp needed
 323 00cc F0BD     		pop	{r4, r5, r6, r7, pc}
 324              	.L17:
 325 00ce 00BF     		.align	2
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s 			page 13


 326              	.L16:
 327 00d0 00000000 		.word	u8g2
 328 00d4 00000000 		.word	.LANCHOR2
 329 00d8 00000000 		.word	.LANCHOR1
 330 00dc 00000000 		.word	.LC0
 331 00e0 04000000 		.word	.LC1
 332              		.cfi_endproc
 333              	.LFE129:
 335              		.section	.text.draw_MeasLabels_Rotary,"ax",%progbits
 336              		.align	1
 337              		.p2align 2,,3
 338              		.global	draw_MeasLabels_Rotary
 339              		.syntax unified
 340              		.thumb
 341              		.thumb_func
 342              		.fpu fpv4-sp-d16
 344              	draw_MeasLabels_Rotary:
 345              	.LFB130:
 362:Src/main.c    **** 
 363:Src/main.c    **** void draw_MeasLabels_Rotary(){
 346              		.loc 1 363 0
 347              		.cfi_startproc
 348              		@ args = 0, pretend = 0, frame = 0
 349              		@ frame_needed = 0, uses_anonymous_args = 0
 350              	.LVL22:
 351 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 352              	.LCFI12:
 353              		.cfi_def_cfa_offset 24
 354              		.cfi_offset 4, -24
 355              		.cfi_offset 5, -20
 356              		.cfi_offset 6, -16
 357              		.cfi_offset 7, -12
 358              		.cfi_offset 8, -8
 359              		.cfi_offset 14, -4
 360 0004 0D4E     		ldr	r6, .L22
 361 0006 0E4D     		ldr	r5, .L22+4
 364:Src/main.c    ****   uint8_t n;
 365:Src/main.c    ****   uint8_t x, y;
 366:Src/main.c    ****   // draw measurements label & unit
 367:Src/main.c    ****   for( n=0; n<4; n++ ){
 368:Src/main.c    **** 	  x = meas_x;
 369:Src/main.c    **** 	  y = (n % 4) * meas_height	+ meas_y;
 370:Src/main.c    **** 	  draw_MeasLabelUnit(&u8g2, x, y, meas_width1, meas_height, meas_name[n], meas_unit[n]);
 362              		.loc 1 370 0
 363 0008 DFF83880 		ldr	r8, .L22+8
 363:Src/main.c    ****   uint8_t n;
 364              		.loc 1 363 0
 365 000c 84B0     		sub	sp, sp, #16
 366              	.LCFI13:
 367              		.cfi_def_cfa_offset 40
 363:Src/main.c    ****   uint8_t n;
 368              		.loc 1 363 0
 369 000e 1024     		movs	r4, #16
 370              		.loc 1 370 0
 371 0010 0C27     		movs	r7, #12
 372              	.LVL23:
 373              	.L19:
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s 			page 14


 374              		.loc 1 370 0 is_stmt 0 discriminator 3
 375 0012 2246     		mov	r2, r4
 376 0014 0C34     		adds	r4, r4, #12
 377              	.LVL24:
 378 0016 CDE90165 		strd	r6, r5, [sp, #4]
 379 001a 0097     		str	r7, [sp]
 380 001c 4623     		movs	r3, #70
 381 001e 0021     		movs	r1, #0
 382 0020 4046     		mov	r0, r8
 383 0022 E4B2     		uxtb	r4, r4
 384 0024 FFF7FEFF 		bl	draw_MeasLabelUnit
 385              	.LVL25:
 367:Src/main.c    **** 	  x = meas_x;
 386              		.loc 1 367 0 is_stmt 1 discriminator 3
 387 0028 402C     		cmp	r4, #64
 388 002a 06F10706 		add	r6, r6, #7
 389 002e 05F10505 		add	r5, r5, #5
 390 0032 EED1     		bne	.L19
 371:Src/main.c    ****   }
 372:Src/main.c    **** }
 391              		.loc 1 372 0
 392 0034 04B0     		add	sp, sp, #16
 393              	.LCFI14:
 394              		.cfi_def_cfa_offset 24
 395              		@ sp needed
 396 0036 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 397              	.L23:
 398 003a 00BF     		.align	2
 399              	.L22:
 400 003c 00000000 		.word	.LANCHOR2
 401 0040 00000000 		.word	.LANCHOR1
 402 0044 00000000 		.word	u8g2
 403              		.cfi_endproc
 404              	.LFE130:
 406              		.section	.text.HAL_ADC_ConvCpltCallback,"ax",%progbits
 407              		.align	1
 408              		.p2align 2,,3
 409              		.global	HAL_ADC_ConvCpltCallback
 410              		.syntax unified
 411              		.thumb
 412              		.thumb_func
 413              		.fpu fpv4-sp-d16
 415              	HAL_ADC_ConvCpltCallback:
 416              	.LFB131:
 373:Src/main.c    **** 
 374:Src/main.c    **** 
 375:Src/main.c    **** // ADC buffer definition
 376:Src/main.c    **** enum{ ADC_BUFFER_LENGTH = 10 };
 377:Src/main.c    **** uint16_t g_ADCBuffer[ADC_BUFFER_LENGTH];
 378:Src/main.c    **** uint16_t adc[ADC_BUFFER_LENGTH];  
 379:Src/main.c    **** 
 380:Src/main.c    **** void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 417              		.loc 1 380 0
 418              		.cfi_startproc
 419              		@ args = 0, pretend = 0, frame = 0
 420              		@ frame_needed = 0, uses_anonymous_args = 0
 421              		@ link register save eliminated.
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s 			page 15


 422              	.LVL26:
 423 0000 054B     		ldr	r3, .L27
 424 0002 064A     		ldr	r2, .L27+4
 425 0004 03F11400 		add	r0, r3, #20
 426              	.LVL27:
 427              	.L25:
 428              	.LBB67:
 381:Src/main.c    **** 	for (unsigned int i =0; i<ADC_BUFFER_LENGTH; i++){
 382:Src/main.c    **** 	   adc[i] = g_ADCBuffer[i];  // store the values in adc[]
 429              		.loc 1 382 0 discriminator 3
 430 0008 33F8021B 		ldrh	r1, [r3], #2
 431 000c 22F8021B 		strh	r1, [r2], #2	@ movhi
 381:Src/main.c    **** 	for (unsigned int i =0; i<ADC_BUFFER_LENGTH; i++){
 432              		.loc 1 381 0 discriminator 3
 433 0010 8342     		cmp	r3, r0
 434 0012 F9D1     		bne	.L25
 435              	.LBE67:
 383:Src/main.c    **** 	}
 384:Src/main.c    **** }
 436              		.loc 1 384 0
 437 0014 7047     		bx	lr
 438              	.L28:
 439 0016 00BF     		.align	2
 440              	.L27:
 441 0018 00000000 		.word	g_ADCBuffer
 442 001c 00000000 		.word	adc
 443              		.cfi_endproc
 444              	.LFE131:
 446              		.section	.text.SystemClock_Config,"ax",%progbits
 447              		.align	1
 448              		.p2align 2,,3
 449              		.global	SystemClock_Config
 450              		.syntax unified
 451              		.thumb
 452              		.thumb_func
 453              		.fpu fpv4-sp-d16
 455              	SystemClock_Config:
 456              	.LFB133:
 385:Src/main.c    **** 
 386:Src/main.c    **** /* USER CODE END 0 */
 387:Src/main.c    **** 
 388:Src/main.c    **** /**
 389:Src/main.c    ****   * @brief  The application entry point.
 390:Src/main.c    ****   * @retval int
 391:Src/main.c    ****   */
 392:Src/main.c    **** int main(void)
 393:Src/main.c    **** {
 394:Src/main.c    ****   /* USER CODE BEGIN 1 */
 395:Src/main.c    **** 
 396:Src/main.c    ****   /* USER CODE END 1 */
 397:Src/main.c    ****   
 398:Src/main.c    **** 
 399:Src/main.c    ****   /* MCU Configuration--------------------------------------------------------*/
 400:Src/main.c    **** 
 401:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 402:Src/main.c    ****   HAL_Init();
 403:Src/main.c    **** 
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s 			page 16


 404:Src/main.c    ****   /* USER CODE BEGIN Init */
 405:Src/main.c    ****   uint8_t n;
 406:Src/main.c    ****   uint8_t x, y;
 407:Src/main.c    **** 
 408:Src/main.c    ****   uint8_t a = 0; // for dummy data
 409:Src/main.c    ****   uint8_t b = 0; // for dummy data
 410:Src/main.c    **** 
 411:Src/main.c    ****   // ROTARY
 412:Src/main.c    ****   uint16_t rpm_integral;
 413:Src/main.c    ****   uint8_t index_animation;
 414:Src/main.c    **** 
 415:Src/main.c    ****   // circular buffer for ADC data
 416:Src/main.c    ****   uint16_t circular_buffer_index = 0;
 417:Src/main.c    ****   int16_t circular_buffer[128]={};
 418:Src/main.c    **** 
 419:Src/main.c    ****   /* USER CODE END Init */
 420:Src/main.c    **** 
 421:Src/main.c    ****   /* Configure the system clock */
 422:Src/main.c    ****   SystemClock_Config();
 423:Src/main.c    **** 
 424:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 425:Src/main.c    **** 
 426:Src/main.c    ****   /* USER CODE END SysInit */
 427:Src/main.c    **** 
 428:Src/main.c    ****   /* Initialize all configured peripherals */
 429:Src/main.c    ****   MX_GPIO_Init();
 430:Src/main.c    ****   MX_DMA_Init();
 431:Src/main.c    ****   MX_ADC1_Init();
 432:Src/main.c    ****   MX_CAN_Init();
 433:Src/main.c    ****   MX_I2C1_Init();
 434:Src/main.c    ****   MX_SPI1_Init();
 435:Src/main.c    ****   MX_TIM1_Init();
 436:Src/main.c    ****   MX_TIM2_Init();
 437:Src/main.c    ****   MX_TIM3_Init();
 438:Src/main.c    ****   MX_TIM6_Init();
 439:Src/main.c    ****   MX_USART1_UART_Init();
 440:Src/main.c    ****   MX_USART2_UART_Init();
 441:Src/main.c    ****   /* USER CODE BEGIN 2 */
 442:Src/main.c    **** 
 443:Src/main.c    ****   ///// PWM initialize ----------------------------------------------------------------
 444:Src/main.c    **** 
 445:Src/main.c    ****   ///// Timer /////
 446:Src/main.c    ****   // TIM1 - PWM for Fuel Pump Driver (Cycle 100kHz = 1MHz / 100count)
 447:Src/main.c    ****   /*
 448:Src/main.c    ****   if (HAL_TIM_Base_Start_IT(&htim1) != HAL_OK)
 449:Src/main.c    ****   {
 450:Src/main.c    ****     Error_Handler();
 451:Src/main.c    ****   }
 452:Src/main.c    ****   */
 453:Src/main.c    ****   // Start Timer1 / ch1
 454:Src/main.c    ****   if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1) != HAL_OK)
 455:Src/main.c    ****   {
 456:Src/main.c    ****     Error_Handler();
 457:Src/main.c    ****   }
 458:Src/main.c    **** 
 459:Src/main.c    ****   // TIM2 - display (Cycle 20ms = 1/100kHz x 2,000count)
 460:Src/main.c    ****   if (HAL_TIM_Base_Start_IT(&htim2) != HAL_OK)
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s 			page 17


 461:Src/main.c    ****   {
 462:Src/main.c    ****     Error_Handler();
 463:Src/main.c    ****   }
 464:Src/main.c    **** 
 465:Src/main.c    ****   // TIM3 - Pulse counter for Tacho (f 200kHz, count 65535)
 466:Src/main.c    ****   if (HAL_TIM_Base_Start_IT(&htim3) != HAL_OK)
 467:Src/main.c    ****   {
 468:Src/main.c    ****     Error_Handler();
 469:Src/main.c    ****   }
 470:Src/main.c    **** 
 471:Src/main.c    ****   // TIM6 - SW interrupt control (Cycle 100ms = 1/100kHz x 10,000count)
 472:Src/main.c    ****   if (HAL_TIM_Base_Start_IT(&htim6) != HAL_OK)
 473:Src/main.c    ****   {
 474:Src/main.c    ****     Error_Handler();
 475:Src/main.c    ****   }
 476:Src/main.c    **** 
 477:Src/main.c    ****   // ADC
 478:Src/main.c    ****   HAL_ADC_Start_DMA(&hadc1, g_ADCBuffer, ADC_BUFFER_LENGTH);
 479:Src/main.c    **** 
 480:Src/main.c    ****   // UART1 interrupt setup for DEFI decoder
 481:Src/main.c    ****   HAL_UART_Receive_IT(&huart1, &UART1_Data, 1);
 482:Src/main.c    ****   // variables is defined in 'defi.h'
 483:Src/main.c    **** 
 484:Src/main.c    **** 
 485:Src/main.c    ****   // OLED diaplay initialization
 486:Src/main.c    ****   u8g2_Setup_ssd1309_128x64_noname2_f(&u8g2, U8G2_R0, u8x8_byte_4wire_hw_spi, u8x8_gpio_and_delay_S
 487:Src/main.c    **** 
 488:Src/main.c    ****   // OLED display Reset (must be more than 3us!!)
 489:Src/main.c    ****   HAL_GPIO_WritePin( GPIOB, GPIO_PIN_3, 0); // Set RES=L (OLED Reset)
 490:Src/main.c    ****   HAL_Delay(5);
 491:Src/main.c    ****   HAL_GPIO_WritePin( GPIOB, GPIO_PIN_3, 1); // Set RES=H (OLED activate)
 492:Src/main.c    ****   u8g2_InitDisplay(&u8g2); // send init sequence to the display, display is in sleep mode after thi
 493:Src/main.c    ****   u8g2_SetPowerSave(&u8g2, 0); // wake up display
 494:Src/main.c    ****   u8g2_SetContrast(&u8g2, 255); // set contrast
 495:Src/main.c    ****   u8g2_ClearDisplay(&u8g2);
 496:Src/main.c    **** 
 497:Src/main.c    ****   // draw opening
 498:Src/main.c    ****   u8g2_DrawXBMP(&u8g2, 40, 0, logo_width, logo_height, logo_bits );
 499:Src/main.c    **** 
 500:Src/main.c    ****   u8g2_SetFont(&u8g2, u8g2_font_5x7_tf);
 501:Src/main.c    ****   u8g2_DrawStr(&u8g2, 16, 63 - 8, "Multi Function Meter");
 502:Src/main.c    ****   u8g2_DrawStr(&u8g2, 40, 64, "Rev. 0.2a");
 503:Src/main.c    ****   u8g2_SendBuffer(&u8g2);
 504:Src/main.c    **** 
 505:Src/main.c    ****   HAL_Delay(1000);
 506:Src/main.c    **** 
 507:Src/main.c    ****   u8g2_ClearBuffer(&u8g2);
 508:Src/main.c    **** 
 509:Src/main.c    ****   HAL_UART_Transmit_printf(&huart2, "Hello. This is MFM.\n");
 510:Src/main.c    **** 
 511:Src/main.c    ****   // Set PWM Duty for Timer1 / Output1 (Asymmetric PWM2)
 512:Src/main.c    ****   TIM1->CCR1 = (100 - FP_duty);
 513:Src/main.c    **** 
 514:Src/main.c    ****   /* Infinite loop */
 515:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 516:Src/main.c    **** 
 517:Src/main.c    ****   draw_MeasLabels();
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s 			page 18


 518:Src/main.c    ****   draw_indicators();
 519:Src/main.c    ****   u8g2_SendBuffer(&u8g2);
 520:Src/main.c    **** 
 521:Src/main.c    **** 
 522:Src/main.c    ****   // I2C communication to ADXL345(3-axis G-sensor)
 523:Src/main.c    **** 
 524:Src/main.c    ****   // DEIVID
 525:Src/main.c    ****   a = ADXL345_RegRead_1byte(ADXL0_ADDR, 0x00);
 526:Src/main.c    ****   HAL_UART_Transmit_printf(&huart2, "ADXL324 DEVID %d\n", a); // debug
 527:Src/main.c    ****   if( a == 0xE5 ){
 528:Src/main.c    ****     Gsens_EN = 1;
 529:Src/main.c    ****   }else{
 530:Src/main.c    ****     Gsens_EN = 0;
 531:Src/main.c    ****   }
 532:Src/main.c    **** 
 533:Src/main.c    ****   // POWER_CTL
 534:Src/main.c    ****   ADXL345_RegWrite(ADXL0_ADDR, 0x2D, 0x08);
 535:Src/main.c    ****   // bit 3    Measure   1'b1
 536:Src/main.c    ****   a = ADXL345_RegRead_1byte(ADXL0_ADDR, 0x2D); // Check
 537:Src/main.c    **** 
 538:Src/main.c    ****   // DATA_FORMAT
 539:Src/main.c    ****   ADXL345_RegWrite(ADXL0_ADDR, 0x31, 0x05);
 540:Src/main.c    ****   // bit 2    Justify   1'b1
 541:Src/main.c    ****   // bit 1:0  Range     2'b01
 542:Src/main.c    ****   a = ADXL345_RegRead_1byte(ADXL0_ADDR, 0x31); // Check "POWER_CTL"
 543:Src/main.c    **** 
 544:Src/main.c    ****   /* USER CODE END 2 */
 545:Src/main.c    **** 
 546:Src/main.c    ****   /* Infinite loop */
 547:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 548:Src/main.c    **** 
 549:Src/main.c    ****   draw_MeasLabels();
 550:Src/main.c    ****   draw_indicators();
 551:Src/main.c    ****   u8g2_SendBuffer(&u8g2);
 552:Src/main.c    **** 
 553:Src/main.c    **** 
 554:Src/main.c    ****   // I2C communication to ADXL345(3-axis G-sensor)
 555:Src/main.c    **** 
 556:Src/main.c    ****   // DEIVID
 557:Src/main.c    ****   a = ADXL345_RegRead_1byte(ADXL0_ADDR, 0x00);
 558:Src/main.c    ****   HAL_UART_Transmit_printf(&huart2, "ADXL324 DEVID %d\n", a); // debug
 559:Src/main.c    ****   if( a == 0xE5 ){
 560:Src/main.c    ****     Gsens_EN = 1;
 561:Src/main.c    ****   }else{
 562:Src/main.c    ****     Gsens_EN = 0;
 563:Src/main.c    ****   }
 564:Src/main.c    **** 
 565:Src/main.c    ****   // POWER_CTL
 566:Src/main.c    ****   ADXL345_RegWrite(ADXL0_ADDR, 0x2D, 0x08);
 567:Src/main.c    ****   // bit 3    Measure   1'b1
 568:Src/main.c    ****   a = ADXL345_RegRead_1byte(ADXL0_ADDR, 0x2D); // Check
 569:Src/main.c    **** 
 570:Src/main.c    ****   // DATA_FORMAT
 571:Src/main.c    ****   ADXL345_RegWrite(ADXL0_ADDR, 0x31, 0x05);
 572:Src/main.c    ****   // bit 2    Justify   1'b1
 573:Src/main.c    ****   // bit 1:0  Range     2'b01
 574:Src/main.c    ****   a = ADXL345_RegRead_1byte(ADXL0_ADDR, 0x31); // Check "POWER_CTL"
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s 			page 19


 575:Src/main.c    **** 
 576:Src/main.c    ****   /* USER CODE END 2 */
 577:Src/main.c    **** 
 578:Src/main.c    ****   /* Infinite loop */
 579:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 580:Src/main.c    **** 
 581:Src/main.c    ****   draw_MeasLabels();
 582:Src/main.c    ****   draw_indicators();
 583:Src/main.c    ****   u8g2_SendBuffer(&u8g2);
 584:Src/main.c    **** 
 585:Src/main.c    **** 
 586:Src/main.c    ****   // I2C communication to ADXL345(3-axis G-sensor)
 587:Src/main.c    **** 
 588:Src/main.c    ****   // DEIVID
 589:Src/main.c    ****   a = ADXL345_RegRead_1byte(ADXL0_ADDR, 0x00);
 590:Src/main.c    ****   HAL_UART_Transmit_printf(&huart2, "ADXL324 DEVID %d\n", a); // debug
 591:Src/main.c    ****   if( a == 0xE5 ){
 592:Src/main.c    ****     Gsens_EN = 1;
 593:Src/main.c    ****   }else{
 594:Src/main.c    ****     Gsens_EN = 0;
 595:Src/main.c    ****   }
 596:Src/main.c    **** 
 597:Src/main.c    ****   // POWER_CTL
 598:Src/main.c    ****   ADXL345_RegWrite(ADXL0_ADDR, 0x2D, 0x08);
 599:Src/main.c    ****   // bit 3    Measure   1'b1
 600:Src/main.c    ****   a = ADXL345_RegRead_1byte(ADXL0_ADDR, 0x2D); // Check
 601:Src/main.c    **** 
 602:Src/main.c    ****   // DATA_FORMAT
 603:Src/main.c    ****   ADXL345_RegWrite(ADXL0_ADDR, 0x31, 0x05);
 604:Src/main.c    ****   // bit 2    Justify   1'b1
 605:Src/main.c    ****   // bit 1:0  Range     2'b01
 606:Src/main.c    ****   a = ADXL345_RegRead_1byte(ADXL0_ADDR, 0x31); // Check "POWER_CTL"
 607:Src/main.c    **** 
 608:Src/main.c    ****   /* USER CODE END 2 */
 609:Src/main.c    **** 
 610:Src/main.c    ****   /* Infinite loop */
 611:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 612:Src/main.c    **** 
 613:Src/main.c    ****   draw_MeasLabels();
 614:Src/main.c    ****   draw_indicators();
 615:Src/main.c    ****   u8g2_SendBuffer(&u8g2);
 616:Src/main.c    **** 
 617:Src/main.c    **** 
 618:Src/main.c    ****   // I2C communication to ADXL345(3-axis G-sensor)
 619:Src/main.c    **** 
 620:Src/main.c    ****   // DEIVID
 621:Src/main.c    ****   a = ADXL345_RegRead_1byte(ADXL0_ADDR, 0x00);
 622:Src/main.c    ****   HAL_UART_Transmit_printf(&huart2, "ADXL324 DEVID %d\n", a); // debug
 623:Src/main.c    ****   if( a == 0xE5 ){
 624:Src/main.c    ****     Gsens_EN = 1;
 625:Src/main.c    ****   }else{
 626:Src/main.c    ****     Gsens_EN = 0;
 627:Src/main.c    ****   }
 628:Src/main.c    **** 
 629:Src/main.c    ****   // POWER_CTL
 630:Src/main.c    ****   ADXL345_RegWrite(ADXL0_ADDR, 0x2D, 0x08);
 631:Src/main.c    ****   // bit 3    Measure   1'b1
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s 			page 20


 632:Src/main.c    ****   a = ADXL345_RegRead_1byte(ADXL0_ADDR, 0x2D); // Check
 633:Src/main.c    **** 
 634:Src/main.c    ****   // DATA_FORMAT
 635:Src/main.c    ****   ADXL345_RegWrite(ADXL0_ADDR, 0x31, 0x05);
 636:Src/main.c    ****   // bit 2    Justify   1'b1
 637:Src/main.c    ****   // bit 1:0  Range     2'b01
 638:Src/main.c    ****   a = ADXL345_RegRead_1byte(ADXL0_ADDR, 0x31); // Check "POWER_CTL"
 639:Src/main.c    **** 
 640:Src/main.c    ****   /* USER CODE END 2 */
 641:Src/main.c    **** 
 642:Src/main.c    ****   /* Infinite loop */
 643:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 644:Src/main.c    **** 
 645:Src/main.c    ****   draw_MeasLabels();
 646:Src/main.c    ****   draw_indicators();
 647:Src/main.c    ****   u8g2_SendBuffer(&u8g2);
 648:Src/main.c    **** 
 649:Src/main.c    **** 
 650:Src/main.c    ****   // I2C communication to ADXL345(3-axis G-sensor)
 651:Src/main.c    **** 
 652:Src/main.c    ****   // DEIVID
 653:Src/main.c    ****   a = ADXL345_RegRead_1byte(ADXL0_ADDR, 0x00);
 654:Src/main.c    ****   HAL_UART_Transmit_printf(&huart2, "ADXL324 DEVID %d\n", a); // debug
 655:Src/main.c    ****   if( a == 0xE5 ){
 656:Src/main.c    ****     Gsens_EN = 1;
 657:Src/main.c    ****   }else{
 658:Src/main.c    ****     Gsens_EN = 0;
 659:Src/main.c    ****   }
 660:Src/main.c    **** 
 661:Src/main.c    ****   // POWER_CTL
 662:Src/main.c    ****   ADXL345_RegWrite(ADXL0_ADDR, 0x2D, 0x08);
 663:Src/main.c    ****   // bit 3    Measure   1'b1
 664:Src/main.c    ****   a = ADXL345_RegRead_1byte(ADXL0_ADDR, 0x2D); // Check
 665:Src/main.c    **** 
 666:Src/main.c    ****   // DATA_FORMAT
 667:Src/main.c    ****   ADXL345_RegWrite(ADXL0_ADDR, 0x31, 0x05);
 668:Src/main.c    ****   // bit 2    Justify   1'b1
 669:Src/main.c    ****   // bit 1:0  Range     2'b01
 670:Src/main.c    ****   a = ADXL345_RegRead_1byte(ADXL0_ADDR, 0x31); // Check "POWER_CTL"
 671:Src/main.c    **** 
 672:Src/main.c    ****   /* USER CODE END 2 */
 673:Src/main.c    **** 
 674:Src/main.c    ****   /* Infinite loop */
 675:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 676:Src/main.c    **** 
 677:Src/main.c    ****   draw_MeasLabels();
 678:Src/main.c    ****   draw_indicators();
 679:Src/main.c    ****   u8g2_SendBuffer(&u8g2);
 680:Src/main.c    **** 
 681:Src/main.c    **** 
 682:Src/main.c    ****   // I2C communication to ADXL345(3-axis G-sensor)
 683:Src/main.c    **** 
 684:Src/main.c    ****   // DEIVID
 685:Src/main.c    ****   a = ADXL345_RegRead_1byte(ADXL0_ADDR, 0x00);
 686:Src/main.c    ****   HAL_UART_Transmit_printf(&huart2, "ADXL324 DEVID %d\n", a); // debug
 687:Src/main.c    ****   if( a == 0xE5 ){
 688:Src/main.c    ****     Gsens_EN = 1;
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s 			page 21


 689:Src/main.c    ****   }else{
 690:Src/main.c    ****     Gsens_EN = 0;
 691:Src/main.c    ****   }
 692:Src/main.c    **** 
 693:Src/main.c    ****   // POWER_CTL
 694:Src/main.c    ****   ADXL345_RegWrite(ADXL0_ADDR, 0x2D, 0x08);
 695:Src/main.c    ****   // bit 3    Measure   1'b1
 696:Src/main.c    ****   a = ADXL345_RegRead_1byte(ADXL0_ADDR, 0x2D); // Check
 697:Src/main.c    **** 
 698:Src/main.c    ****   // DATA_FORMAT
 699:Src/main.c    ****   ADXL345_RegWrite(ADXL0_ADDR, 0x31, 0x05);
 700:Src/main.c    ****   // bit 2    Justify   1'b1
 701:Src/main.c    ****   // bit 1:0  Range     2'b01
 702:Src/main.c    ****   a = ADXL345_RegRead_1byte(ADXL0_ADDR, 0x31); // Check "POWER_CTL"
 703:Src/main.c    **** 
 704:Src/main.c    ****   /* USER CODE END 2 */
 705:Src/main.c    **** 
 706:Src/main.c    ****   /* Infinite loop */
 707:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 708:Src/main.c    **** 
 709:Src/main.c    ****   draw_MeasLabels();
 710:Src/main.c    ****   draw_indicators();
 711:Src/main.c    ****   u8g2_SendBuffer(&u8g2);
 712:Src/main.c    **** 
 713:Src/main.c    **** 
 714:Src/main.c    ****   // I2C communication to ADXL345(3-axis G-sensor)
 715:Src/main.c    **** 
 716:Src/main.c    ****   // DEIVID
 717:Src/main.c    ****   a = ADXL345_RegRead_1byte(ADXL0_ADDR, 0x00);
 718:Src/main.c    ****   HAL_UART_Transmit_printf(&huart2, "ADXL324 DEVID %d\n", a); // debug
 719:Src/main.c    ****   if( a == 0xE5 ){
 720:Src/main.c    ****     Gsens_EN = 1;
 721:Src/main.c    ****   }else{
 722:Src/main.c    ****     Gsens_EN = 0;
 723:Src/main.c    ****   }
 724:Src/main.c    **** 
 725:Src/main.c    ****   // POWER_CTL
 726:Src/main.c    ****   ADXL345_RegWrite(ADXL0_ADDR, 0x2D, 0x08);
 727:Src/main.c    ****   // bit 3    Measure   1'b1
 728:Src/main.c    ****   a = ADXL345_RegRead_1byte(ADXL0_ADDR, 0x2D); // Check
 729:Src/main.c    **** 
 730:Src/main.c    ****   // DATA_FORMAT
 731:Src/main.c    ****   ADXL345_RegWrite(ADXL0_ADDR, 0x31, 0x05);
 732:Src/main.c    ****   // bit 2    Justify   1'b1
 733:Src/main.c    ****   // bit 1:0  Range     2'b01
 734:Src/main.c    ****   a = ADXL345_RegRead_1byte(ADXL0_ADDR, 0x31); // Check "POWER_CTL"
 735:Src/main.c    **** 
 736:Src/main.c    ****   /* USER CODE END 2 */
 737:Src/main.c    **** 
 738:Src/main.c    ****   /* Infinite loop */
 739:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 740:Src/main.c    **** 
 741:Src/main.c    ****   draw_MeasLabels();
 742:Src/main.c    ****   draw_indicators();
 743:Src/main.c    ****   u8g2_SendBuffer(&u8g2);
 744:Src/main.c    **** 
 745:Src/main.c    **** 
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s 			page 22


 746:Src/main.c    ****   // I2C communication to ADXL345(3-axis G-sensor)
 747:Src/main.c    **** 
 748:Src/main.c    ****   // DEIVID
 749:Src/main.c    ****   a = ADXL345_RegRead_1byte(ADXL0_ADDR, 0x00);
 750:Src/main.c    ****   HAL_UART_Transmit_printf(&huart2, "ADXL324 DEVID %d\n", a); // debug
 751:Src/main.c    ****   if( a == 0xE5 ){
 752:Src/main.c    ****     Gsens_EN = 1;
 753:Src/main.c    ****   }else{
 754:Src/main.c    ****     Gsens_EN = 0;
 755:Src/main.c    ****   }
 756:Src/main.c    **** 
 757:Src/main.c    ****   // POWER_CTL
 758:Src/main.c    ****   ADXL345_RegWrite(ADXL0_ADDR, 0x2D, 0x08);
 759:Src/main.c    ****   // bit 3    Measure   1'b1
 760:Src/main.c    ****   a = ADXL345_RegRead_1byte(ADXL0_ADDR, 0x2D); // Check
 761:Src/main.c    **** 
 762:Src/main.c    ****   // DATA_FORMAT
 763:Src/main.c    ****   ADXL345_RegWrite(ADXL0_ADDR, 0x31, 0x05);
 764:Src/main.c    ****   // bit 2    Justify   1'b1
 765:Src/main.c    ****   // bit 1:0  Range     2'b01
 766:Src/main.c    ****   a = ADXL345_RegRead_1byte(ADXL0_ADDR, 0x31); // Check "POWER_CTL"
 767:Src/main.c    **** 
 768:Src/main.c    ****   /* USER CODE END 2 */
 769:Src/main.c    **** 
 770:Src/main.c    ****   /* Infinite loop */
 771:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 772:Src/main.c    **** 
 773:Src/main.c    ****   draw_MeasLabels();
 774:Src/main.c    ****   draw_indicators();
 775:Src/main.c    ****   u8g2_SendBuffer(&u8g2);
 776:Src/main.c    **** 
 777:Src/main.c    **** 
 778:Src/main.c    ****   // I2C communication to ADXL345(3-axis G-sensor)
 779:Src/main.c    **** 
 780:Src/main.c    ****   // DEIVID
 781:Src/main.c    ****   a = ADXL345_RegRead_1byte(ADXL0_ADDR, 0x00);
 782:Src/main.c    ****   HAL_UART_Transmit_printf(&huart2, "ADXL324 DEVID %d\n", a); // debug
 783:Src/main.c    ****   if( a == 0xE5 ){
 784:Src/main.c    ****     Gsens_EN = 1;
 785:Src/main.c    ****   }else{
 786:Src/main.c    ****     Gsens_EN = 0;
 787:Src/main.c    ****   }
 788:Src/main.c    **** 
 789:Src/main.c    ****   // POWER_CTL
 790:Src/main.c    ****   ADXL345_RegWrite(ADXL0_ADDR, 0x2D, 0x08);
 791:Src/main.c    ****   // bit 3    Measure   1'b1
 792:Src/main.c    ****   a = ADXL345_RegRead_1byte(ADXL0_ADDR, 0x2D); // Check
 793:Src/main.c    **** 
 794:Src/main.c    ****   // DATA_FORMAT
 795:Src/main.c    ****   ADXL345_RegWrite(ADXL0_ADDR, 0x31, 0x05);
 796:Src/main.c    ****   // bit 2    Justify   1'b1
 797:Src/main.c    ****   // bit 1:0  Range     2'b01
 798:Src/main.c    ****   a = ADXL345_RegRead_1byte(ADXL0_ADDR, 0x31); // Check "POWER_CTL"
 799:Src/main.c    **** 
 800:Src/main.c    ****   /* USER CODE END 2 */
 801:Src/main.c    **** 
 802:Src/main.c    ****   /* Infinite loop */
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s 			page 23


 803:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 804:Src/main.c    **** 
 805:Src/main.c    ****   draw_MeasLabels();
 806:Src/main.c    ****   draw_indicators();
 807:Src/main.c    ****   u8g2_SendBuffer(&u8g2);
 808:Src/main.c    **** 
 809:Src/main.c    **** 
 810:Src/main.c    ****   // I2C communication to ADXL345(3-axis G-sensor)
 811:Src/main.c    **** 
 812:Src/main.c    ****   // DEIVID
 813:Src/main.c    ****   a = ADXL345_RegRead_1byte(ADXL0_ADDR, 0x00);
 814:Src/main.c    ****   HAL_UART_Transmit_printf(&huart2, "ADXL324 DEVID %d\n", a); // debug
 815:Src/main.c    ****   if( a == 0xE5 ){
 816:Src/main.c    ****     Gsens_EN = 1;
 817:Src/main.c    ****   }else{
 818:Src/main.c    ****     Gsens_EN = 0;
 819:Src/main.c    ****   }
 820:Src/main.c    **** 
 821:Src/main.c    ****   // POWER_CTL
 822:Src/main.c    ****   ADXL345_RegWrite(ADXL0_ADDR, 0x2D, 0x08);
 823:Src/main.c    ****   // bit 3    Measure   1'b1
 824:Src/main.c    ****   a = ADXL345_RegRead_1byte(ADXL0_ADDR, 0x2D); // Check
 825:Src/main.c    **** 
 826:Src/main.c    ****   // DATA_FORMAT
 827:Src/main.c    ****   ADXL345_RegWrite(ADXL0_ADDR, 0x31, 0x05);
 828:Src/main.c    ****   // bit 2    Justify   1'b1
 829:Src/main.c    ****   // bit 1:0  Range     2'b01
 830:Src/main.c    ****   a = ADXL345_RegRead_1byte(ADXL0_ADDR, 0x31); // Check "POWER_CTL"
 831:Src/main.c    **** 
 832:Src/main.c    ****   /* USER CODE END 2 */
 833:Src/main.c    **** 
 834:Src/main.c    ****   /* Infinite loop */
 835:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 836:Src/main.c    **** 
 837:Src/main.c    ****   draw_MeasLabels();
 838:Src/main.c    ****   draw_indicators();
 839:Src/main.c    ****   u8g2_SendBuffer(&u8g2);
 840:Src/main.c    **** 
 841:Src/main.c    **** 
 842:Src/main.c    ****   // I2C communication to ADXL345(3-axis G-sensor)
 843:Src/main.c    **** 
 844:Src/main.c    ****   // DEIVID
 845:Src/main.c    ****   a = ADXL345_RegRead_1byte(ADXL0_ADDR, 0x00);
 846:Src/main.c    ****   HAL_UART_Transmit_printf(&huart2, "ADXL324 DEVID %d\n", a); // debug
 847:Src/main.c    ****   if( a == 0xE5 ){
 848:Src/main.c    ****     Gsens_EN = 1;
 849:Src/main.c    ****   }else{
 850:Src/main.c    ****     Gsens_EN = 0;
 851:Src/main.c    ****   }
 852:Src/main.c    **** 
 853:Src/main.c    ****   // POWER_CTL
 854:Src/main.c    ****   ADXL345_RegWrite(ADXL0_ADDR, 0x2D, 0x08);
 855:Src/main.c    ****   // bit 3    Measure   1'b1
 856:Src/main.c    ****   a = ADXL345_RegRead_1byte(ADXL0_ADDR, 0x2D); // Check
 857:Src/main.c    **** 
 858:Src/main.c    ****   // DATA_FORMAT
 859:Src/main.c    ****   ADXL345_RegWrite(ADXL0_ADDR, 0x31, 0x05);
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s 			page 24


 860:Src/main.c    ****   // bit 2    Justify   1'b1
 861:Src/main.c    ****   // bit 1:0  Range     2'b01
 862:Src/main.c    ****   a = ADXL345_RegRead_1byte(ADXL0_ADDR, 0x31); // Check "POWER_CTL"
 863:Src/main.c    **** 
 864:Src/main.c    ****   /* USER CODE END 2 */
 865:Src/main.c    **** 
 866:Src/main.c    ****   while(1)
 867:Src/main.c    ****   {
 868:Src/main.c    ****     /* USER CODE END WHILE */
 869:Src/main.c    **** 
 870:Src/main.c    ****     /* USER CODE BEGIN 3 */
 871:Src/main.c    **** 
 872:Src/main.c    ****     ///// ADC ----------------------------------------------------------------
 873:Src/main.c    **** 
 874:Src/main.c    **** 		// read O2 sensor ADC output
 875:Src/main.c    **** //		O2_volt = (int16_t)(330 * (float)g_ADCBuffer[0]/255);
 876:Src/main.c    **** 		O2_volt = (int16_t)(330 * (float)adc[0]/255);
 877:Src/main.c    **** 
 878:Src/main.c    **** 		// read Fuel Pump Voltage ADC output
 879:Src/main.c    **** //		FP_volt = (int16_t)((165/33)*33*(float)g_ADCBuffer[1]/255);
 880:Src/main.c    **** 		FP_volt = (int16_t)((165/33)*33*(float)adc[1]/255);
 881:Src/main.c    ****     // Ressister attenation ratio '165/33'
 882:Src/main.c    ****     
 883:Src/main.c    ****     ///// Fuel Pump ----------------------------------------------------------------
 884:Src/main.c    ****     // Duty calculation
 885:Src/main.c    ****     if( (rpm >= 3000)|(DEFI_value[0] >= 0) ){
 886:Src/main.c    ****       FP_duty = 100;
 887:Src/main.c    ****     }else{
 888:Src/main.c    ****       FP_duty = (int16_t)(rpm/3000*100);
 889:Src/main.c    ****     }
 890:Src/main.c    ****     // Saturation process
 891:Src/main.c    ****     if( FP_duty > 100 ){
 892:Src/main.c    ****       FP_duty = 100;
 893:Src/main.c    ****     }else if( FP_duty < 60 ){
 894:Src/main.c    ****       FP_duty = 60;
 895:Src/main.c    ****     }
 896:Src/main.c    **** 
 897:Src/main.c    ****     ///// Measure data  ----------------------------------------------------------------
 898:Src/main.c    ****     defi_decoder(UART1_RxData); // DEFI decoder
 899:Src/main.c    **** 
 900:Src/main.c    ****     if( flag_meas == 1 ){
 901:Src/main.c    **** 
 902:Src/main.c    ****       // I2C communication to ADXL345(3-axis G-sensor)
 903:Src/main.c    ****       if( Gsens_EN == 1 ){
 904:Src/main.c    ****         /*
 905:Src/main.c    ****         // Justify = 0
 906:Src/main.c    ****         Gsens_X1 = ADXL345_RegRead_1byte(ADXL0_ADDR, 0x33); // Check "DATAX1" (MSB side)
 907:Src/main.c    ****         Gsens_X0 = ADXL345_RegRead_1byte(ADXL0_ADDR, 0x32); // Check "DATAX0" (LSB side)
 908:Src/main.c    ****         Gsens_X = (Gsens_X1<<8) | Gsens_X0;
 909:Src/main.c    ****         Gsens_Y1 = ADXL345_RegRead_1byte(ADXL0_ADDR, 0x35); // Check "DATAY1" (MSB side)
 910:Src/main.c    ****         Gsens_Y0 = ADXL345_RegRead_1byte(ADXL0_ADDR, 0x34); // Check "DATAY0" (LSB side)
 911:Src/main.c    ****         Gsens_Y = (Gsens_Y1<<8) | Gsens_Y0;
 912:Src/main.c    ****         Gsens_Z1 = ADXL345_RegRead_1byte(ADXL0_ADDR, 0x37); // Check "DATAZ1" (MSB side)
 913:Src/main.c    ****         Gsens_Z0 = ADXL345_RegRead_1byte(ADXL0_ADDR, 0x36); // Check "DATAZ0" (LSB side)
 914:Src/main.c    ****         Gsens_Z = (Gsens_Z1<<8) | Gsens_Z0;
 915:Src/main.c    ****         HAL_UART_Transmit_printf(&huart2, "(%d,%d,%d)\n", Gsens_X, Gsens_Y, Gsens_Z); // debug
 916:Src/main.c    ****         */
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s 			page 25


 917:Src/main.c    **** 
 918:Src/main.c    ****         // Justify = 1
 919:Src/main.c    ****         Gsens_X1 = ADXL345_RegRead_1byte(ADXL0_ADDR, 0x33); // Check "DATAX1" (MSB side)
 920:Src/main.c    ****         Gsens_Y1 = ADXL345_RegRead_1byte(ADXL0_ADDR, 0x35); // Check "DATAY1" (MSB side)
 921:Src/main.c    ****         Gsens_Z1 = ADXL345_RegRead_1byte(ADXL0_ADDR, 0x37); // Check "DATAZ1" (MSB side)
 922:Src/main.c    ****         // Acceration 1G = 100
 923:Src/main.c    ****         Gsens_X = 400 * (int8_t)Gsens_X1 / 128; // unsigned->signed & scaling
 924:Src/main.c    ****         Gsens_Y = 400 * (int8_t)Gsens_Y1 / 128; // unsigned->signed & scaling
 925:Src/main.c    ****         Gsens_Z = 400 * (int8_t)Gsens_Z1 / 128; // unsigned->signed & scaling
 926:Src/main.c    **** 
 927:Src/main.c    ****         HAL_UART_Transmit_printf(&huart2, "(%d,%d,%d)\n", Gsens_X, Gsens_Y, Gsens_Z); // debug
 928:Src/main.c    ****         
 929:Src/main.c    **** 
 930:Src/main.c    ****         /*
 931:Src/main.c    ****         ADXL345_G_struct ADXL345_G_data = ADXL345_Read_G(ADXL0_ADDR);
 932:Src/main.c    ****         HAL_UART_Transmit_printf(&huart2, "(%d,%d,%d)\n", ADXL345_G_data.X, ADXL345_G_data.Y, ADXL3
 933:Src/main.c    ****         */
 934:Src/main.c    ****       }
 935:Src/main.c    **** 
 936:Src/main.c    **** 
 937:Src/main.c    **** /*
 938:Src/main.c    ****   	  // start of create dummy data for debug
 939:Src/main.c    ****       if( rpm <= 8200 ){
 940:Src/main.c    ****           rpm = rpm + (int)(20*MT[gear]);
 941:Src/main.c    ****           //rpm=rpm+10;
 942:Src/main.c    ****       }else{
 943:Src/main.c    ****         if( gear < 4 ){
 944:Src/main.c    ****           gear++;
 945:Src/main.c    ****           rpm = (double)speed / (0.002*60.0) * (MT[gear]*4.1);
 946:Src/main.c    ****         }else{
 947:Src/main.c    ****           gear = 0;
 948:Src/main.c    ****           rpm = 1000;
 949:Src/main.c    ****         }
 950:Src/main.c    ****       }
 951:Src/main.c    ****       speed = (double)rpm*0.002*60.0/MT[gear]/4.1;
 952:Src/main.c    **** 
 953:Src/main.c    ****       if( a >= 150){
 954:Src/main.c    ****         a = 0;
 955:Src/main.c    ****       }else{
 956:Src/main.c    ****         a++;
 957:Src/main.c    ****       }
 958:Src/main.c    ****   	  // end of create dummy data for debug
 959:Src/main.c    **** */
 960:Src/main.c    ****       meas_value[0] = DEFI_value[0];  // MAP
 961:Src/main.c    **** 		  meas_value[1] = DEFI_value[2];  // OILP
 962:Src/main.c    **** 			meas_value[2] = FP_volt;        // FuelPump Voltage
 963:Src/main.c    **** 		  meas_value[3] = DEFI_value[6];  // ECT
 964:Src/main.c    **** 			meas_value[4] = DEFI_value[5];  // OILT
 965:Src/main.c    **** 		  meas_value[5] = O2_volt;        // O2
 966:Src/main.c    **** 
 967:Src/main.c    ****       flag_meas = 0; // enable again by TIM2 interrupt
 968:Src/main.c    ****     }
 969:Src/main.c    **** 
 970:Src/main.c    ****     ///// FP driver ----------------------------------------------------------------
 971:Src/main.c    ****     // Set PWM Duty for Timer1 / Output1 (Asymmetric PWM2)
 972:Src/main.c    ****     TIM1->CCR1 = (100 - FP_duty);
 973:Src/main.c    **** 
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s 			page 26


 974:Src/main.c    ****     ///// Switch ----------------------------------------------------------------
 975:Src/main.c    ****     if( flag_sw != 0 ){
 976:Src/main.c    ****       switch( flag_sw ){
 977:Src/main.c    ****         case 1:
 978:Src/main.c    ****           HAL_UART_Transmit_printf(&huart2, "UP ");
 979:Src/main.c    ****           HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 980:Src/main.c    ****           // SW "UP"
 981:Src/main.c    ****           if( setting == 0 ){
 982:Src/main.c    ****             if( mode == N_mode-1 ){
 983:Src/main.c    ****               mode = 0;
 984:Src/main.c    ****             }else{
 985:Src/main.c    ****               mode++;
 986:Src/main.c    ****             }
 987:Src/main.c    ****           }
 988:Src/main.c    ****           break;
 989:Src/main.c    ****         case 2:
 990:Src/main.c    ****           HAL_UART_Transmit_printf(&huart2, "DOWN ");
 991:Src/main.c    ****           HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 992:Src/main.c    ****           // SW "DOWN"
 993:Src/main.c    ****           if( setting == 0 ){
 994:Src/main.c    ****             if( mode == 0 ){
 995:Src/main.c    ****               mode = N_mode-1;
 996:Src/main.c    ****             }else{
 997:Src/main.c    ****               mode--;
 998:Src/main.c    ****             }
 999:Src/main.c    ****           }
1000:Src/main.c    ****           break;
1001:Src/main.c    ****         case 3:
1002:Src/main.c    ****           HAL_UART_Transmit_printf(&huart2, "ENTER ");
1003:Src/main.c    ****           HAL_NVIC_DisableIRQ (EXTI1_IRQn);
1004:Src/main.c    ****           // SW "ENTER"
1005:Src/main.c    **** 
1006:Src/main.c    ****           // if( setting == 0 ){
1007:Src/main.c    ****           //   mode = cursor;
1008:Src/main.c    ****           //   u8g2_ClearBuffer(&u8g2);
1009:Src/main.c    ****           // }else{
1010:Src/main.c    ****           //   mode = 10;
1011:Src/main.c    ****           // }
1012:Src/main.c    ****           // break;
1013:Src/main.c    **** 
1014:Src/main.c    ****         default:
1015:Src/main.c    ****           break;
1016:Src/main.c    ****       }
1017:Src/main.c    ****       u8g2_ClearBuffer(&u8g2);
1018:Src/main.c    ****       if( mode == MODE_BAR_METER ){
1019:Src/main.c    ****         draw_MeasLabels();
1020:Src/main.c    ****         draw_indicators();
1021:Src/main.c    **** 
1022:Src/main.c    ****       }else if( mode == MODE_CIRCULAR_METER ){
1023:Src/main.c    ****         for( n=0; n<N_meas_C; n++ ){
1024:Src/main.c    ****           x = meas_C_x;
1025:Src/main.c    ****           y = n * meas_C_height	+ meas_C_y;
1026:Src/main.c    ****           draw_MeasLabelUnit(&u8g2, x, y, meas_C_width, meas_C_height, meas_name[n], meas_unit[n]);
1027:Src/main.c    ****         }
1028:Src/main.c    ****         // draw indicators
1029:Src/main.c    ****         for( n=0; n<4; n++ ){
1030:Src/main.c    ****           draw_IndicatorBox(&u8g2, idct_x+(idct_width+2)*n, idct_y, idct_width, idct_height, idct_s
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s 			page 27


1031:Src/main.c    ****         }
1032:Src/main.c    ****         draw_CircularMeter_Init(32, 32, 31, 3, -60, 300, 10, 20, -1, -80, 120);
1033:Src/main.c    **** //        draw_CircularMeter_Init(26, 26, 26, 3, -60, 300, 10, 20, -1, -80, 120);
1034:Src/main.c    ****         draw_CircularMeter(&u8g2, 0);
1035:Src/main.c    **** /*
1036:Src/main.c    ****       }else if( mode == MODE_ROTARY ){
1037:Src/main.c    ****         draw_MeasLabels_Rotary();
1038:Src/main.c    ****         draw_MeasLabelUnit(&u8g2, 0, 2, meas_width1, meas_height, "TACHO", "rpm");
1039:Src/main.c    **** */
1040:Src/main.c    ****       }else if( mode == MODE_SCOPE_MAP ){
1041:Src/main.c    ****         draw_Wave_axis(&u8g2, wave_x, wave_y, wave_width, wave_height, wave_value_min, wave_value_m
1042:Src/main.c    ****         draw_MeasLabelUnit(&u8g2, 0, 0, 64, 13, "MAP", "kPa");
1043:Src/main.c    **** 
1044:Src/main.c    ****       }else if( mode == MODE_SCOPE_Gsens ){
1045:Src/main.c    ****         draw_Wave_axis(&u8g2, wave_x, wave_y, wave_width, wave_height, -200, 200, 4);
1046:Src/main.c    ****         draw_MeasLabelUnit(&u8g2, 0, 0, 64, 13, "LatG", "G");
1047:Src/main.c    **** 
1048:Src/main.c    ****       }
1049:Src/main.c    ****       u8g2_SendBuffer(&u8g2);
1050:Src/main.c    ****       TIM6->CNT = 0;
1051:Src/main.c    ****       flag_sw = 0;
1052:Src/main.c    ****     }
1053:Src/main.c    **** 
1054:Src/main.c    ****     ///// Display sequence ----------------------------------------------------------------
1055:Src/main.c    ****     if( flag_disp ){
1056:Src/main.c    **** 
1057:Src/main.c    ****       ///// multi meter /////
1058:Src/main.c    ****       if( mode == MODE_BAR_METER ){
1059:Src/main.c    ****         // update Fuel Pump Voltage
1060:Src/main.c    ****         draw_Value(&u8g2, FP_x, FP_y, FP_duty_width, FP_height, FP_duty, 3, 0, 0, "%  ");
1061:Src/main.c    **** 
1062:Src/main.c    ****         // draw bar graph
1063:Src/main.c    ****         draw_BarGraph(&u8g2, rpmbar_x, rpmbar_y, rpmbar_width, rpmbar_height, rpm, rpm_min, rpm_max
1064:Src/main.c    **** 
1065:Src/main.c    ****         // draw measurement data
1066:Src/main.c    ****         for( n=0; n<3; n++ ){
1067:Src/main.c    ****           x = meas_x;
1068:Src/main.c    ****           y = (n % 3) * meas_height	+ meas_y;
1069:Src/main.c    ****           draw_Value(&u8g2, x, y, meas_width1, meas_height, meas_value[n], meas_digit[n], meas_frac
1070:Src/main.c    ****         }
1071:Src/main.c    ****         for( n=3; n<N_meas; n++ ){
1072:Src/main.c    ****           x = meas_width1 + meas_x + meas_x_offset;
1073:Src/main.c    ****           y = (n % 3) * meas_height	+ meas_y;
1074:Src/main.c    ****           draw_Value(&u8g2, x, y, meas_width2, meas_height, meas_value[n], meas_digit[n], meas_frac
1075:Src/main.c    ****         }
1076:Src/main.c    ****         
1077:Src/main.c    ****       ///// Circular Meter /////
1078:Src/main.c    ****       }else if( mode == MODE_CIRCULAR_METER ){
1079:Src/main.c    **** 
1080:Src/main.c    ****         draw_CircularMeter(&u8g2, meas_value[0]);
1081:Src/main.c    ****         
1082:Src/main.c    ****         draw_Value(&u8g2, 36, 33, 30, 16, meas_value[0], 3, 2, 1, "");
1083:Src/main.c    ****         draw_MeasUnit(&u8g2, 38, 40, 28, 16, "kPa");
1084:Src/main.c    **** /*        
1085:Src/main.c    ****         draw_Value(&u8g2, 34, 28, 30, 16, meas_value[0], 3, 2, 1, "");
1086:Src/main.c    ****         draw_MeasUnit(&u8g2, 36, 36, 28, 16, "kPa");
1087:Src/main.c    **** */
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s 			page 28


1088:Src/main.c    **** 
1089:Src/main.c    ****         // draw measurement data
1090:Src/main.c    ****         for( n=0; n<N_meas_C; n++ ){
1091:Src/main.c    ****           x = meas_C_x;
1092:Src/main.c    ****           y = n * meas_C_height	+ meas_C_y;
1093:Src/main.c    ****           draw_Value(&u8g2, x, y, meas_C_width, meas_C_height, meas_value[n], meas_digit[n], meas_f
1094:Src/main.c    ****         }
1095:Src/main.c    **** 
1096:Src/main.c    **** /*
1097:Src/main.c    ****       }else if( mode == MODE_ROTARY ){
1098:Src/main.c    **** 
1099:Src/main.c    ****         rpm_integral = rpm_integral + rpm;
1100:Src/main.c    ****         if( rpm_integral > 4000 ){
1101:Src/main.c    ****           rpm_integral = rpm_integral - 4000;
1102:Src/main.c    ****         }
1103:Src/main.c    ****         index_animation = (uint8_t)( (float)rpm_integral / 1000.0 );
1104:Src/main.c    **** 
1105:Src/main.c    ****         draw_Rotary(&u8g2, 58, 2, index_animation);
1106:Src/main.c    **** 
1107:Src/main.c    ****         draw_MeasLabelUnit(&u8g2, 0, 2, meas_width1, meas_height, "TACHO", "rpm");
1108:Src/main.c    ****         draw_Value(&u8g2, 0, 2, meas_width1, meas_height, rpm, 4, 0, 0, "rpm");
1109:Src/main.c    **** 
1110:Src/main.c    ****         draw_MeasLabels_Rotary();
1111:Src/main.c    ****         // draw measurement data
1112:Src/main.c    ****         for( n=0; n<4; n++ ){
1113:Src/main.c    ****           x = meas_x;
1114:Src/main.c    ****           y = (n % 4) * meas_height	+ meas_y;
1115:Src/main.c    ****           draw_Value(&u8g2, x, y, meas_width1, meas_height, meas_value[n], meas_digit[n], meas_frac
1116:Src/main.c    ****         }
1117:Src/main.c    **** */
1118:Src/main.c    **** 
1119:Src/main.c    ****       ///// Scope /////
1120:Src/main.c    ****       }else if( mode == MODE_SCOPE_MAP ){
1121:Src/main.c    **** 
1122:Src/main.c    ****         if( circular_buffer_index > 0 ){
1123:Src/main.c    ****           circular_buffer_index--;
1124:Src/main.c    ****         }else{
1125:Src/main.c    ****           circular_buffer_index = 128;
1126:Src/main.c    ****         }
1127:Src/main.c    ****         circular_buffer[circular_buffer_index] = meas_value[0];
1128:Src/main.c    **** 
1129:Src/main.c    ****         // draw wave
1130:Src/main.c    ****         draw_Wave(&u8g2, wave_x, wave_y, wave_width, wave_height, wave_value_min, wave_value_max, c
1131:Src/main.c    ****         draw_Value(&u8g2, 0, 0, 64, 13, circular_buffer[circular_buffer_index], 3, 2, 1, "kPa");
1132:Src/main.c    **** 
1133:Src/main.c    ****       ///// G-Scope /////
1134:Src/main.c    ****       }else if( mode == MODE_SCOPE_Gsens ){
1135:Src/main.c    **** 
1136:Src/main.c    ****         if( circular_buffer_index > 0 ){
1137:Src/main.c    ****           circular_buffer_index--;
1138:Src/main.c    ****         }else{
1139:Src/main.c    ****           circular_buffer_index = 128;
1140:Src/main.c    ****         }
1141:Src/main.c    ****         circular_buffer[circular_buffer_index] = Gsens_Y;
1142:Src/main.c    **** 
1143:Src/main.c    ****         // draw wave
1144:Src/main.c    ****         draw_Wave(&u8g2, wave_x, wave_y, wave_width, wave_height, -200, +200, circular_buffer, circ
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s 			page 29


1145:Src/main.c    ****         draw_Value(&u8g2, 0, 0, 64, 13, circular_buffer[circular_buffer_index], 3, 2, 1, "G");
1146:Src/main.c    **** 
1147:Src/main.c    ****       // mode setting
1148:Src/main.c    ****       }else if( mode == MODE_SETTING ){
1149:Src/main.c    **** 
1150:Src/main.c    ****         u8g2_ClearBuffer(&u8g2);
1151:Src/main.c    ****         u8g2_SetFont(&u8g2, u8g2_font_7x14B_tf);
1152:Src/main.c    ****         u8g2_DrawStr(&u8g2, 2, 15, "Mode Setting" );
1153:Src/main.c    ****         if( cursor == 0 ){
1154:Src/main.c    ****           u8g2_DrawStr(&u8g2, 2, 30, ">" );
1155:Src/main.c    ****         }else{
1156:Src/main.c    ****           u8g2_DrawStr(&u8g2, 2, 30, " " );
1157:Src/main.c    ****         }
1158:Src/main.c    ****         u8g2_DrawStr(&u8g2,10, 30, "Multi-Meter" );
1159:Src/main.c    ****         if( cursor == 1 ){
1160:Src/main.c    ****           u8g2_DrawStr(&u8g2, 2, 45, ">" );
1161:Src/main.c    ****         }else{
1162:Src/main.c    ****           u8g2_DrawStr(&u8g2, 2, 45, " " );
1163:Src/main.c    ****         }
1164:Src/main.c    ****         u8g2_DrawStr(&u8g2,10, 45, "Scope" );
1165:Src/main.c    ****         u8g2_SendBuffer(&u8g2);
1166:Src/main.c    ****       }
1167:Src/main.c    ****       // send buffer
1168:Src/main.c    ****       u8g2_SendBuffer(&u8g2);
1169:Src/main.c    **** 
1170:Src/main.c    ****       flag_disp = 0; // enable again by TIM2 interrupt
1171:Src/main.c    ****     }
1172:Src/main.c    **** 
1173:Src/main.c    ****   }
1174:Src/main.c    ****   /* USER CODE END 3 */
1175:Src/main.c    **** }
1176:Src/main.c    **** 
1177:Src/main.c    **** /**
1178:Src/main.c    ****   * @brief System Clock Configuration
1179:Src/main.c    ****   * @retval None
1180:Src/main.c    ****   */
1181:Src/main.c    **** void SystemClock_Config(void)
1182:Src/main.c    **** {
 457              		.loc 1 1182 0
 458              		.cfi_startproc
 459              		@ args = 0, pretend = 0, frame = 88
 460              		@ frame_needed = 0, uses_anonymous_args = 0
 461 0000 30B5     		push	{r4, r5, lr}
 462              	.LCFI15:
 463              		.cfi_def_cfa_offset 12
 464              		.cfi_offset 4, -12
 465              		.cfi_offset 5, -8
 466              		.cfi_offset 14, -4
 467 0002 97B0     		sub	sp, sp, #92
 468              	.LCFI16:
 469              		.cfi_def_cfa_offset 104
1183:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 470              		.loc 1 1183 0
 471 0004 0023     		movs	r3, #0
1184:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
1185:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
1186:Src/main.c    **** 
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s 			page 30


1187:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
1188:Src/main.c    ****   */
1189:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 472              		.loc 1 1189 0
 473 0006 0324     		movs	r4, #3
1190:Src/main.c    ****   RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 474              		.loc 1 1190 0
 475 0008 4FF4A022 		mov	r2, #327680
1191:Src/main.c    ****   RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
1192:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 476              		.loc 1 1192 0
 477 000c 0120     		movs	r0, #1
1183:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 478              		.loc 1 1183 0
 479 000e CDE90E33 		strd	r3, r3, [sp, #56]
 480 0012 1293     		str	r3, [sp, #72]
1184:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 481              		.loc 1 1184 0
 482 0014 0193     		str	r3, [sp, #4]
1185:Src/main.c    **** 
 483              		.loc 1 1185 0
 484 0016 0693     		str	r3, [sp, #24]
1184:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 485              		.loc 1 1184 0
 486 0018 CDE90233 		strd	r3, r3, [sp, #8]
 487 001c CDE90433 		strd	r3, r3, [sp, #16]
1185:Src/main.c    **** 
 488              		.loc 1 1185 0
 489 0020 CDE90733 		strd	r3, r3, [sp, #28]
 490 0024 CDE90933 		strd	r3, r3, [sp, #36]
 491 0028 0B93     		str	r3, [sp, #44]
1193:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 492              		.loc 1 1193 0
 493 002a 1021     		movs	r1, #16
1189:Src/main.c    ****   RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 494              		.loc 1 1189 0
 495 002c 0C94     		str	r4, [sp, #48]
1190:Src/main.c    ****   RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 496              		.loc 1 1190 0
 497 002e 0D92     		str	r2, [sp, #52]
1194:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 498              		.loc 1 1194 0
 499 0030 0224     		movs	r4, #2
1195:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 500              		.loc 1 1195 0
 501 0032 4FF48032 		mov	r2, #65536
1192:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 502              		.loc 1 1192 0
 503 0036 1090     		str	r0, [sp, #64]
1196:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 504              		.loc 1 1196 0
 505 0038 4FF4E013 		mov	r3, #1835008
1197:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 506              		.loc 1 1197 0
 507 003c 0CA8     		add	r0, sp, #48
1193:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 508              		.loc 1 1193 0
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s 			page 31


 509 003e 1191     		str	r1, [sp, #68]
1195:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 510              		.loc 1 1195 0
 511 0040 CDE91342 		strd	r4, r2, [sp, #76]
1196:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 512              		.loc 1 1196 0
 513 0044 1593     		str	r3, [sp, #84]
 514              		.loc 1 1197 0
 515 0046 FFF7FEFF 		bl	HAL_RCC_OscConfig
 516              	.LVL28:
 517 004a 00B1     		cbz	r0, .L30
 518              	.L31:
 519 004c FEE7     		b	.L31
 520              	.L30:
 521 004e 0346     		mov	r3, r0
1198:Src/main.c    ****   {
1199:Src/main.c    ****     Error_Handler();
1200:Src/main.c    ****   }
1201:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
1202:Src/main.c    ****   */
1203:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
1204:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
1205:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
1206:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
1207:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 522              		.loc 1 1207 0
 523 0050 4FF48062 		mov	r2, #1024
1208:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
1209:Src/main.c    **** 
1210:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 524              		.loc 1 1210 0
 525 0054 01A8     		add	r0, sp, #4
 526 0056 2146     		mov	r1, r4
1203:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 527              		.loc 1 1203 0
 528 0058 0F25     		movs	r5, #15
1206:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 529              		.loc 1 1206 0
 530 005a 0393     		str	r3, [sp, #12]
1208:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 531              		.loc 1 1208 0
 532 005c 0593     		str	r3, [sp, #20]
1205:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 533              		.loc 1 1205 0
 534 005e 0294     		str	r4, [sp, #8]
1203:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 535              		.loc 1 1203 0
 536 0060 0195     		str	r5, [sp, #4]
1207:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 537              		.loc 1 1207 0
 538 0062 0492     		str	r2, [sp, #16]
 539              		.loc 1 1210 0
 540 0064 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 541              	.LVL29:
 542 0068 0346     		mov	r3, r0
 543 006a 00B1     		cbz	r0, .L32
 544              	.L33:
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s 			page 32


 545 006c FEE7     		b	.L33
 546              	.L32:
1211:Src/main.c    ****   {
1212:Src/main.c    ****     Error_Handler();
1213:Src/main.c    ****   }
1214:Src/main.c    ****   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 547              		.loc 1 1214 0
 548 006e 41F22102 		movw	r2, #4129
1215:Src/main.c    ****                               |RCC_PERIPHCLK_TIM1;
1216:Src/main.c    ****   PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
1217:Src/main.c    ****   PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
1218:Src/main.c    ****   PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
1219:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 549              		.loc 1 1219 0
 550 0072 06A8     		add	r0, sp, #24
1217:Src/main.c    ****   PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 551              		.loc 1 1217 0
 552 0074 CDE90833 		strd	r3, r3, [sp, #32]
1218:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 553              		.loc 1 1218 0
 554 0078 0B93     		str	r3, [sp, #44]
1214:Src/main.c    ****                               |RCC_PERIPHCLK_TIM1;
 555              		.loc 1 1214 0
 556 007a 0692     		str	r2, [sp, #24]
 557              		.loc 1 1219 0
 558 007c FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 559              	.LVL30:
 560 0080 00B1     		cbz	r0, .L29
 561              	.L35:
 562 0082 FEE7     		b	.L35
 563              	.L29:
1220:Src/main.c    ****   {
1221:Src/main.c    ****     Error_Handler();
1222:Src/main.c    ****   }
1223:Src/main.c    **** }
 564              		.loc 1 1223 0
 565 0084 17B0     		add	sp, sp, #92
 566              	.LCFI17:
 567              		.cfi_def_cfa_offset 12
 568              		@ sp needed
 569 0086 30BD     		pop	{r4, r5, pc}
 570              		.cfi_endproc
 571              	.LFE133:
 573              		.section	.text.startup.main,"ax",%progbits
 574              		.align	1
 575              		.p2align 2,,3
 576              		.global	main
 577              		.syntax unified
 578              		.thumb
 579              		.thumb_func
 580              		.fpu fpv4-sp-d16
 582              	main:
 583              	.LFB132:
 393:Src/main.c    ****   /* USER CODE BEGIN 1 */
 584              		.loc 1 393 0
 585              		.cfi_startproc
 586              		@ args = 0, pretend = 0, frame = 280
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s 			page 33


 587              		@ frame_needed = 0, uses_anonymous_args = 0
 588 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 589              	.LCFI18:
 590              		.cfi_def_cfa_offset 36
 591              		.cfi_offset 4, -36
 592              		.cfi_offset 5, -32
 593              		.cfi_offset 6, -28
 594              		.cfi_offset 7, -24
 595              		.cfi_offset 8, -20
 596              		.cfi_offset 9, -16
 597              		.cfi_offset 10, -12
 598              		.cfi_offset 11, -8
 599              		.cfi_offset 14, -4
 600 0004 2DED048B 		vpush.64	{d8, d9}
 601              	.LCFI19:
 602              		.cfi_def_cfa_offset 52
 603              		.cfi_offset 80, -52
 604              		.cfi_offset 81, -48
 605              		.cfi_offset 82, -44
 606              		.cfi_offset 83, -40
 607 0008 CFB0     		sub	sp, sp, #316
 608              	.LCFI20:
 609              		.cfi_def_cfa_offset 368
 402:Src/main.c    **** 
 610              		.loc 1 402 0
 611 000a FFF7FEFF 		bl	HAL_Init
 612              	.LVL31:
 417:Src/main.c    **** 
 613              		.loc 1 417 0
 614 000e 0021     		movs	r1, #0
 615 0010 4FF48072 		mov	r2, #256
 616 0014 0EA8     		add	r0, sp, #56
 617 0016 FFF7FEFF 		bl	memset
 618              	.LVL32:
 422:Src/main.c    **** 
 619              		.loc 1 422 0
 620 001a FFF7FEFF 		bl	SystemClock_Config
 621              	.LVL33:
 429:Src/main.c    ****   MX_DMA_Init();
 622              		.loc 1 429 0
 623 001e FFF7FEFF 		bl	MX_GPIO_Init
 624              	.LVL34:
 430:Src/main.c    ****   MX_ADC1_Init();
 625              		.loc 1 430 0
 626 0022 FFF7FEFF 		bl	MX_DMA_Init
 627              	.LVL35:
 431:Src/main.c    ****   MX_CAN_Init();
 628              		.loc 1 431 0
 629 0026 FFF7FEFF 		bl	MX_ADC1_Init
 630              	.LVL36:
 432:Src/main.c    ****   MX_I2C1_Init();
 631              		.loc 1 432 0
 632 002a FFF7FEFF 		bl	MX_CAN_Init
 633              	.LVL37:
 433:Src/main.c    ****   MX_SPI1_Init();
 634              		.loc 1 433 0
 635 002e FFF7FEFF 		bl	MX_I2C1_Init
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s 			page 34


 636              	.LVL38:
 434:Src/main.c    ****   MX_TIM1_Init();
 637              		.loc 1 434 0
 638 0032 FFF7FEFF 		bl	MX_SPI1_Init
 639              	.LVL39:
 435:Src/main.c    ****   MX_TIM2_Init();
 640              		.loc 1 435 0
 641 0036 FFF7FEFF 		bl	MX_TIM1_Init
 642              	.LVL40:
 436:Src/main.c    ****   MX_TIM3_Init();
 643              		.loc 1 436 0
 644 003a FFF7FEFF 		bl	MX_TIM2_Init
 645              	.LVL41:
 437:Src/main.c    ****   MX_TIM6_Init();
 646              		.loc 1 437 0
 647 003e FFF7FEFF 		bl	MX_TIM3_Init
 648              	.LVL42:
 438:Src/main.c    ****   MX_USART1_UART_Init();
 649              		.loc 1 438 0
 650 0042 FFF7FEFF 		bl	MX_TIM6_Init
 651              	.LVL43:
 439:Src/main.c    ****   MX_USART2_UART_Init();
 652              		.loc 1 439 0
 653 0046 FFF7FEFF 		bl	MX_USART1_UART_Init
 654              	.LVL44:
 440:Src/main.c    ****   /* USER CODE BEGIN 2 */
 655              		.loc 1 440 0
 656 004a FFF7FEFF 		bl	MX_USART2_UART_Init
 657              	.LVL45:
 454:Src/main.c    ****   {
 658              		.loc 1 454 0
 659 004e 0021     		movs	r1, #0
 660 0050 0A48     		ldr	r0, .L140
 661 0052 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 662              	.LVL46:
 663 0056 00B1     		cbz	r0, .L38
 664              	.L39:
 665 0058 FEE7     		b	.L39
 666              	.L38:
 460:Src/main.c    ****   {
 667              		.loc 1 460 0
 668 005a 0948     		ldr	r0, .L140+4
 669 005c FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 670              	.LVL47:
 671 0060 00B1     		cbz	r0, .L40
 672              	.L41:
 673 0062 FEE7     		b	.L41
 674              	.L40:
 466:Src/main.c    ****   {
 675              		.loc 1 466 0
 676 0064 0748     		ldr	r0, .L140+8
 677 0066 FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 678              	.LVL48:
 679 006a 00B1     		cbz	r0, .L42
 680              	.L43:
 681 006c FEE7     		b	.L43
 682              	.L42:
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s 			page 35


 472:Src/main.c    ****   {
 683              		.loc 1 472 0
 684 006e 0648     		ldr	r0, .L140+12
 685 0070 FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 686              	.LVL49:
 687 0074 0546     		mov	r5, r0
 688 0076 48B1     		cbz	r0, .L44
 689              	.L45:
 690 0078 FEE7     		b	.L45
 691              	.L141:
 692 007a 00BF     		.align	2
 693              	.L140:
 694 007c 00000000 		.word	htim1
 695 0080 00000000 		.word	htim2
 696 0084 00000000 		.word	htim3
 697 0088 00000000 		.word	htim6
 698              	.L44:
 478:Src/main.c    **** 
 699              		.loc 1 478 0
 700 008c 0A22     		movs	r2, #10
 701 008e C849     		ldr	r1, .L142
 702 0090 C848     		ldr	r0, .L142+4
 512:Src/main.c    **** 
 703              		.loc 1 512 0
 704 0092 C94C     		ldr	r4, .L142+8
 478:Src/main.c    **** 
 705              		.loc 1 478 0
 706 0094 FFF7FEFF 		bl	HAL_ADC_Start_DMA
 707              	.LVL50:
 481:Src/main.c    ****   // variables is defined in 'defi.h'
 708              		.loc 1 481 0
 709 0098 0122     		movs	r2, #1
 710 009a C849     		ldr	r1, .L142+12
 711 009c C848     		ldr	r0, .L142+16
 712 009e FFF7FEFF 		bl	HAL_UART_Receive_IT
 713              	.LVL51:
 486:Src/main.c    **** 
 714              		.loc 1 486 0
 715 00a2 C84B     		ldr	r3, .L142+20
 716 00a4 C84A     		ldr	r2, .L142+24
 717 00a6 C949     		ldr	r1, .L142+28
 718 00a8 C948     		ldr	r0, .L142+32
 719 00aa FFF7FEFF 		bl	u8g2_Setup_ssd1309_128x64_noname2_f
 720              	.LVL52:
 489:Src/main.c    ****   HAL_Delay(5);
 721              		.loc 1 489 0
 722 00ae 2A46     		mov	r2, r5
 723 00b0 0821     		movs	r1, #8
 724 00b2 C848     		ldr	r0, .L142+36
 725 00b4 FFF7FEFF 		bl	HAL_GPIO_WritePin
 726              	.LVL53:
 490:Src/main.c    ****   HAL_GPIO_WritePin( GPIOB, GPIO_PIN_3, 1); // Set RES=H (OLED activate)
 727              		.loc 1 490 0
 728 00b8 0520     		movs	r0, #5
 729 00ba FFF7FEFF 		bl	HAL_Delay
 730              	.LVL54:
 491:Src/main.c    ****   u8g2_InitDisplay(&u8g2); // send init sequence to the display, display is in sleep mode after thi
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s 			page 36


 731              		.loc 1 491 0
 732 00be 0122     		movs	r2, #1
 733 00c0 0821     		movs	r1, #8
 734 00c2 C448     		ldr	r0, .L142+36
 735 00c4 FFF7FEFF 		bl	HAL_GPIO_WritePin
 736              	.LVL55:
 492:Src/main.c    ****   u8g2_SetPowerSave(&u8g2, 0); // wake up display
 737              		.loc 1 492 0
 738 00c8 C148     		ldr	r0, .L142+32
 739 00ca FFF7FEFF 		bl	u8x8_InitDisplay
 740              	.LVL56:
 493:Src/main.c    ****   u8g2_SetContrast(&u8g2, 255); // set contrast
 741              		.loc 1 493 0
 742 00ce 2946     		mov	r1, r5
 743 00d0 BF48     		ldr	r0, .L142+32
 744 00d2 FFF7FEFF 		bl	u8x8_SetPowerSave
 745              	.LVL57:
 494:Src/main.c    ****   u8g2_ClearDisplay(&u8g2);
 746              		.loc 1 494 0
 747 00d6 FF21     		movs	r1, #255
 748 00d8 BD48     		ldr	r0, .L142+32
 749 00da FFF7FEFF 		bl	u8x8_SetContrast
 750              	.LVL58:
 495:Src/main.c    **** 
 751              		.loc 1 495 0
 752 00de BC48     		ldr	r0, .L142+32
 753 00e0 FFF7FEFF 		bl	u8g2_ClearDisplay
 754              	.LVL59:
 498:Src/main.c    **** 
 755              		.loc 1 498 0
 756 00e4 BC4B     		ldr	r3, .L142+40
 757 00e6 0193     		str	r3, [sp, #4]
 758 00e8 3023     		movs	r3, #48
 759 00ea 0093     		str	r3, [sp]
 760 00ec 2A46     		mov	r2, r5
 761 00ee 2821     		movs	r1, #40
 762 00f0 B748     		ldr	r0, .L142+32
 763 00f2 FFF7FEFF 		bl	u8g2_DrawXBMP
 764              	.LVL60:
 500:Src/main.c    ****   u8g2_DrawStr(&u8g2, 16, 63 - 8, "Multi Function Meter");
 765              		.loc 1 500 0
 766 00f6 B949     		ldr	r1, .L142+44
 767 00f8 B548     		ldr	r0, .L142+32
 768 00fa FFF7FEFF 		bl	u8g2_SetFont
 769              	.LVL61:
 501:Src/main.c    ****   u8g2_DrawStr(&u8g2, 40, 64, "Rev. 0.2a");
 770              		.loc 1 501 0
 771 00fe B84B     		ldr	r3, .L142+48
 772 0100 B348     		ldr	r0, .L142+32
 773 0102 3722     		movs	r2, #55
 774 0104 1021     		movs	r1, #16
 775 0106 FFF7FEFF 		bl	u8g2_DrawStr
 776              	.LVL62:
 502:Src/main.c    ****   u8g2_SendBuffer(&u8g2);
 777              		.loc 1 502 0
 778 010a B64B     		ldr	r3, .L142+52
 779 010c B048     		ldr	r0, .L142+32
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s 			page 37


 780 010e 4022     		movs	r2, #64
 781 0110 2821     		movs	r1, #40
 782 0112 FFF7FEFF 		bl	u8g2_DrawStr
 783              	.LVL63:
 503:Src/main.c    **** 
 784              		.loc 1 503 0
 785 0116 AE48     		ldr	r0, .L142+32
 786 0118 FFF7FEFF 		bl	u8g2_SendBuffer
 787              	.LVL64:
 505:Src/main.c    **** 
 788              		.loc 1 505 0
 789 011c 4FF47A70 		mov	r0, #1000
 790 0120 FFF7FEFF 		bl	HAL_Delay
 791              	.LVL65:
 507:Src/main.c    **** 
 792              		.loc 1 507 0
 793 0124 AA48     		ldr	r0, .L142+32
 794 0126 FFF7FEFF 		bl	u8g2_ClearBuffer
 795              	.LVL66:
 509:Src/main.c    **** 
 796              		.loc 1 509 0
 797 012a AF49     		ldr	r1, .L142+56
 798 012c AF48     		ldr	r0, .L142+60
 799 012e FFF7FEFF 		bl	HAL_UART_Transmit_printf
 800              	.LVL67:
 512:Src/main.c    **** 
 801              		.loc 1 512 0
 802 0132 B4F90030 		ldrsh	r3, [r4]
 803 0136 AE4A     		ldr	r2, .L142+64
 804 0138 C3F16403 		rsb	r3, r3, #100
 805 013c 5363     		str	r3, [r2, #52]
 517:Src/main.c    ****   draw_indicators();
 806              		.loc 1 517 0
 807 013e FFF7FEFF 		bl	draw_MeasLabels
 808              	.LVL68:
 518:Src/main.c    ****   u8g2_SendBuffer(&u8g2);
 809              		.loc 1 518 0
 810 0142 FFF7FEFF 		bl	draw_indicators
 811              	.LVL69:
 519:Src/main.c    **** 
 812              		.loc 1 519 0
 813 0146 A248     		ldr	r0, .L142+32
 814 0148 FFF7FEFF 		bl	u8g2_SendBuffer
 815              	.LVL70:
 525:Src/main.c    ****   HAL_UART_Transmit_printf(&huart2, "ADXL324 DEVID %d\n", a); // debug
 816              		.loc 1 525 0
 817 014c 2946     		mov	r1, r5
 818 014e 1D20     		movs	r0, #29
 819 0150 FFF7FEFF 		bl	ADXL345_RegRead_1byte
 820              	.LVL71:
 821 0154 C6B2     		uxtb	r6, r0
 822              	.LVL72:
 526:Src/main.c    ****   if( a == 0xE5 ){
 823              		.loc 1 526 0
 824 0156 3246     		mov	r2, r6
 825 0158 A649     		ldr	r1, .L142+68
 826 015a A448     		ldr	r0, .L142+60
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s 			page 38


 827 015c FFF7FEFF 		bl	HAL_UART_Transmit_printf
 828              	.LVL73:
 527:Src/main.c    ****     Gsens_EN = 1;
 829              		.loc 1 527 0
 830 0160 E52E     		cmp	r6, #229
 528:Src/main.c    ****   }else{
 831              		.loc 1 528 0
 832 0162 A54B     		ldr	r3, .L142+72
 527:Src/main.c    ****     Gsens_EN = 1;
 833              		.loc 1 527 0
 834 0164 00F0EE85 		beq	.L126
 530:Src/main.c    ****   }
 835              		.loc 1 530 0
 836 0168 0993     		str	r3, [sp, #36]
 837 016a 1D70     		strb	r5, [r3]
 838              	.L47:
 839              	.LVL74:
 840              	.LBB68:
 841              	.LBB69:
 312:Src/main.c    **** }
 842              		.loc 1 312 0
 843 016c 0A25     		movs	r5, #10
 844 016e 0DAA     		add	r2, sp, #52
 845 0170 0223     		movs	r3, #2
 310:Src/main.c    ****   i2c_buf[1] = data;  
 846              		.loc 1 310 0
 847 0172 40F62D06 		movw	r6, #2093
 848              	.LVL75:
 312:Src/main.c    **** }
 849              		.loc 1 312 0
 850 0176 0095     		str	r5, [sp]
 851 0178 3A21     		movs	r1, #58
 852 017a A048     		ldr	r0, .L142+76
 310:Src/main.c    ****   i2c_buf[1] = data;  
 853              		.loc 1 310 0
 854 017c ADF83460 		strh	r6, [sp, #52]	@ movhi
 312:Src/main.c    **** }
 855              		.loc 1 312 0
 856 0180 FFF7FEFF 		bl	HAL_I2C_Master_Transmit
 857              	.LVL76:
 858              	.LBE69:
 859              	.LBE68:
 536:Src/main.c    **** 
 860              		.loc 1 536 0
 861 0184 2D21     		movs	r1, #45
 862 0186 1D20     		movs	r0, #29
 863 0188 FFF7FEFF 		bl	ADXL345_RegRead_1byte
 864              	.LVL77:
 865              	.LBB70:
 866              	.LBB71:
 312:Src/main.c    **** }
 867              		.loc 1 312 0
 868 018c 0223     		movs	r3, #2
 869 018e 0DAA     		add	r2, sp, #52
 870 0190 0095     		str	r5, [sp]
 871 0192 3A21     		movs	r1, #58
 310:Src/main.c    ****   i2c_buf[1] = data;  
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s 			page 39


 872              		.loc 1 310 0
 873 0194 40F23155 		movw	r5, #1329
 312:Src/main.c    **** }
 874              		.loc 1 312 0
 875 0198 9848     		ldr	r0, .L142+76
 310:Src/main.c    ****   i2c_buf[1] = data;  
 876              		.loc 1 310 0
 877 019a ADF83450 		strh	r5, [sp, #52]	@ movhi
 312:Src/main.c    **** }
 878              		.loc 1 312 0
 879 019e FFF7FEFF 		bl	HAL_I2C_Master_Transmit
 880              	.LVL78:
 881              	.LBE71:
 882              	.LBE70:
 542:Src/main.c    **** 
 883              		.loc 1 542 0
 884 01a2 3121     		movs	r1, #49
 885 01a4 1D20     		movs	r0, #29
 886 01a6 FFF7FEFF 		bl	ADXL345_RegRead_1byte
 887              	.LVL79:
 549:Src/main.c    ****   draw_indicators();
 888              		.loc 1 549 0
 889 01aa FFF7FEFF 		bl	draw_MeasLabels
 890              	.LVL80:
 550:Src/main.c    ****   u8g2_SendBuffer(&u8g2);
 891              		.loc 1 550 0
 892 01ae FFF7FEFF 		bl	draw_indicators
 893              	.LVL81:
 551:Src/main.c    **** 
 894              		.loc 1 551 0
 895 01b2 8748     		ldr	r0, .L142+32
 896 01b4 DFF85482 		ldr	r8, .L142+92
 897 01b8 DFF854A2 		ldr	r10, .L142+96
 898 01bc DFF85492 		ldr	r9, .L142+100
 899 01c0 DFF854B2 		ldr	fp, .L142+104
 900              	.LBB72:
 876:Src/main.c    **** 
 901              		.loc 1 876 0
 902 01c4 9FED8E9A 		vldr.32	s18, .L142+80
 903 01c8 9FED8E8A 		vldr.32	s16, .L142+84
 880:Src/main.c    ****     // Ressister attenation ratio '165/33'
 904              		.loc 1 880 0
 905 01cc DFED8E8A 		vldr.32	s17, .L142+88
 906              	.LBE72:
 551:Src/main.c    **** 
 907              		.loc 1 551 0
 908 01d0 FFF7FEFF 		bl	u8g2_SendBuffer
 909              	.LVL82:
 557:Src/main.c    ****   HAL_UART_Transmit_printf(&huart2, "ADXL324 DEVID %d\n", a); // debug
 910              		.loc 1 557 0
 911 01d4 0021     		movs	r1, #0
 912 01d6 1D20     		movs	r0, #29
 913 01d8 FFF7FEFF 		bl	ADXL345_RegRead_1byte
 914              	.LVL83:
 915 01dc C5B2     		uxtb	r5, r0
 916              	.LVL84:
 558:Src/main.c    ****   if( a == 0xE5 ){
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s 			page 40


 917              		.loc 1 558 0
 918 01de 2A46     		mov	r2, r5
 919 01e0 8449     		ldr	r1, .L142+68
 920 01e2 8248     		ldr	r0, .L142+60
 921 01e4 FFF7FEFF 		bl	HAL_UART_Transmit_printf
 922              	.LVL85:
 559:Src/main.c    ****     Gsens_EN = 1;
 923              		.loc 1 559 0
 924 01e8 E52D     		cmp	r5, #229
 562:Src/main.c    ****   }
 925              		.loc 1 562 0
 926 01ea 099A     		ldr	r2, [sp, #36]
 927              	.LBB83:
 928              	.LBB84:
 312:Src/main.c    **** }
 929              		.loc 1 312 0
 930 01ec 8348     		ldr	r0, .L142+76
 931              	.LBE84:
 932              	.LBE83:
 560:Src/main.c    ****   }else{
 933              		.loc 1 560 0
 934 01ee 0CBF     		ite	eq
 935 01f0 0123     		moveq	r3, #1
 562:Src/main.c    ****   }
 936              		.loc 1 562 0
 937 01f2 0023     		movne	r3, #0
 938              	.LBB87:
 939              	.LBB85:
 312:Src/main.c    **** }
 940              		.loc 1 312 0
 941 01f4 0A25     		movs	r5, #10
 942              	.LVL86:
 943              	.LBE85:
 944              	.LBE87:
 562:Src/main.c    ****   }
 945              		.loc 1 562 0
 946 01f6 1370     		strb	r3, [r2]
 947              	.LBB88:
 948              	.LBB86:
 310:Src/main.c    ****   i2c_buf[1] = data;  
 949              		.loc 1 310 0
 950 01f8 40F62D06 		movw	r6, #2093
 312:Src/main.c    **** }
 951              		.loc 1 312 0
 952 01fc 0223     		movs	r3, #2
 953 01fe 0DAA     		add	r2, sp, #52
 954 0200 0095     		str	r5, [sp]
 955 0202 3A21     		movs	r1, #58
 310:Src/main.c    ****   i2c_buf[1] = data;  
 956              		.loc 1 310 0
 957 0204 ADF83460 		strh	r6, [sp, #52]	@ movhi
 312:Src/main.c    **** }
 958              		.loc 1 312 0
 959 0208 FFF7FEFF 		bl	HAL_I2C_Master_Transmit
 960              	.LVL87:
 961              	.LBE86:
 962              	.LBE88:
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s 			page 41


 568:Src/main.c    **** 
 963              		.loc 1 568 0
 964 020c 2D21     		movs	r1, #45
 965 020e 1D20     		movs	r0, #29
 966 0210 FFF7FEFF 		bl	ADXL345_RegRead_1byte
 967              	.LVL88:
 968              	.LBB89:
 969              	.LBB90:
 312:Src/main.c    **** }
 970              		.loc 1 312 0
 971 0214 0223     		movs	r3, #2
 972 0216 0DAA     		add	r2, sp, #52
 973 0218 0095     		str	r5, [sp]
 974 021a 3A21     		movs	r1, #58
 310:Src/main.c    ****   i2c_buf[1] = data;  
 975              		.loc 1 310 0
 976 021c 40F23155 		movw	r5, #1329
 312:Src/main.c    **** }
 977              		.loc 1 312 0
 978 0220 7648     		ldr	r0, .L142+76
 310:Src/main.c    ****   i2c_buf[1] = data;  
 979              		.loc 1 310 0
 980 0222 ADF83450 		strh	r5, [sp, #52]	@ movhi
 312:Src/main.c    **** }
 981              		.loc 1 312 0
 982 0226 FFF7FEFF 		bl	HAL_I2C_Master_Transmit
 983              	.LVL89:
 984              	.LBE90:
 985              	.LBE89:
 574:Src/main.c    **** 
 986              		.loc 1 574 0
 987 022a 3121     		movs	r1, #49
 988 022c 1D20     		movs	r0, #29
 989 022e FFF7FEFF 		bl	ADXL345_RegRead_1byte
 990              	.LVL90:
 581:Src/main.c    ****   draw_indicators();
 991              		.loc 1 581 0
 992 0232 FFF7FEFF 		bl	draw_MeasLabels
 993              	.LVL91:
 582:Src/main.c    ****   u8g2_SendBuffer(&u8g2);
 994              		.loc 1 582 0
 995 0236 FFF7FEFF 		bl	draw_indicators
 996              	.LVL92:
 583:Src/main.c    **** 
 997              		.loc 1 583 0
 998 023a 6548     		ldr	r0, .L142+32
 999 023c FFF7FEFF 		bl	u8g2_SendBuffer
 1000              	.LVL93:
 589:Src/main.c    ****   HAL_UART_Transmit_printf(&huart2, "ADXL324 DEVID %d\n", a); // debug
 1001              		.loc 1 589 0
 1002 0240 0021     		movs	r1, #0
 1003 0242 1D20     		movs	r0, #29
 1004 0244 FFF7FEFF 		bl	ADXL345_RegRead_1byte
 1005              	.LVL94:
 1006 0248 C5B2     		uxtb	r5, r0
 1007              	.LVL95:
 590:Src/main.c    ****   if( a == 0xE5 ){
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s 			page 42


 1008              		.loc 1 590 0
 1009 024a 2A46     		mov	r2, r5
 1010 024c 6949     		ldr	r1, .L142+68
 1011 024e 6748     		ldr	r0, .L142+60
 1012 0250 FFF7FEFF 		bl	HAL_UART_Transmit_printf
 1013              	.LVL96:
 591:Src/main.c    ****     Gsens_EN = 1;
 1014              		.loc 1 591 0
 1015 0254 E52D     		cmp	r5, #229
 594:Src/main.c    ****   }
 1016              		.loc 1 594 0
 1017 0256 099A     		ldr	r2, [sp, #36]
 1018              	.LBB91:
 1019              	.LBB92:
 312:Src/main.c    **** }
 1020              		.loc 1 312 0
 1021 0258 6848     		ldr	r0, .L142+76
 1022              	.LBE92:
 1023              	.LBE91:
 592:Src/main.c    ****   }else{
 1024              		.loc 1 592 0
 1025 025a 0CBF     		ite	eq
 1026 025c 0123     		moveq	r3, #1
 594:Src/main.c    ****   }
 1027              		.loc 1 594 0
 1028 025e 0023     		movne	r3, #0
 1029              	.LBB95:
 1030              	.LBB93:
 312:Src/main.c    **** }
 1031              		.loc 1 312 0
 1032 0260 0A25     		movs	r5, #10
 1033              	.LVL97:
 1034              	.LBE93:
 1035              	.LBE95:
 594:Src/main.c    ****   }
 1036              		.loc 1 594 0
 1037 0262 1370     		strb	r3, [r2]
 1038              	.LBB96:
 1039              	.LBB94:
 310:Src/main.c    ****   i2c_buf[1] = data;  
 1040              		.loc 1 310 0
 1041 0264 40F62D06 		movw	r6, #2093
 312:Src/main.c    **** }
 1042              		.loc 1 312 0
 1043 0268 0223     		movs	r3, #2
 1044 026a 0DAA     		add	r2, sp, #52
 1045 026c 0095     		str	r5, [sp]
 1046 026e 3A21     		movs	r1, #58
 310:Src/main.c    ****   i2c_buf[1] = data;  
 1047              		.loc 1 310 0
 1048 0270 ADF83460 		strh	r6, [sp, #52]	@ movhi
 312:Src/main.c    **** }
 1049              		.loc 1 312 0
 1050 0274 FFF7FEFF 		bl	HAL_I2C_Master_Transmit
 1051              	.LVL98:
 1052              	.LBE94:
 1053              	.LBE96:
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s 			page 43


 600:Src/main.c    **** 
 1054              		.loc 1 600 0
 1055 0278 2D21     		movs	r1, #45
 1056 027a 1D20     		movs	r0, #29
 1057 027c FFF7FEFF 		bl	ADXL345_RegRead_1byte
 1058              	.LVL99:
 1059              	.LBB97:
 1060              	.LBB98:
 312:Src/main.c    **** }
 1061              		.loc 1 312 0
 1062 0280 0223     		movs	r3, #2
 1063 0282 0DAA     		add	r2, sp, #52
 1064 0284 0095     		str	r5, [sp]
 1065 0286 3A21     		movs	r1, #58
 310:Src/main.c    ****   i2c_buf[1] = data;  
 1066              		.loc 1 310 0
 1067 0288 40F23155 		movw	r5, #1329
 312:Src/main.c    **** }
 1068              		.loc 1 312 0
 1069 028c 5B48     		ldr	r0, .L142+76
 310:Src/main.c    ****   i2c_buf[1] = data;  
 1070              		.loc 1 310 0
 1071 028e ADF83450 		strh	r5, [sp, #52]	@ movhi
 312:Src/main.c    **** }
 1072              		.loc 1 312 0
 1073 0292 FFF7FEFF 		bl	HAL_I2C_Master_Transmit
 1074              	.LVL100:
 1075              	.LBE98:
 1076              	.LBE97:
 606:Src/main.c    **** 
 1077              		.loc 1 606 0
 1078 0296 3121     		movs	r1, #49
 1079 0298 1D20     		movs	r0, #29
 1080 029a FFF7FEFF 		bl	ADXL345_RegRead_1byte
 1081              	.LVL101:
 613:Src/main.c    ****   draw_indicators();
 1082              		.loc 1 613 0
 1083 029e FFF7FEFF 		bl	draw_MeasLabels
 1084              	.LVL102:
 614:Src/main.c    ****   u8g2_SendBuffer(&u8g2);
 1085              		.loc 1 614 0
 1086 02a2 FFF7FEFF 		bl	draw_indicators
 1087              	.LVL103:
 615:Src/main.c    **** 
 1088              		.loc 1 615 0
 1089 02a6 4A48     		ldr	r0, .L142+32
 1090 02a8 FFF7FEFF 		bl	u8g2_SendBuffer
 1091              	.LVL104:
 621:Src/main.c    ****   HAL_UART_Transmit_printf(&huart2, "ADXL324 DEVID %d\n", a); // debug
 1092              		.loc 1 621 0
 1093 02ac 0021     		movs	r1, #0
 1094 02ae 1D20     		movs	r0, #29
 1095 02b0 FFF7FEFF 		bl	ADXL345_RegRead_1byte
 1096              	.LVL105:
 1097 02b4 C5B2     		uxtb	r5, r0
 1098              	.LVL106:
 622:Src/main.c    ****   if( a == 0xE5 ){
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s 			page 44


 1099              		.loc 1 622 0
 1100 02b6 2A46     		mov	r2, r5
 1101 02b8 4E49     		ldr	r1, .L142+68
 1102 02ba 4C48     		ldr	r0, .L142+60
 1103 02bc FFF7FEFF 		bl	HAL_UART_Transmit_printf
 1104              	.LVL107:
 623:Src/main.c    ****     Gsens_EN = 1;
 1105              		.loc 1 623 0
 1106 02c0 E52D     		cmp	r5, #229
 626:Src/main.c    ****   }
 1107              		.loc 1 626 0
 1108 02c2 099A     		ldr	r2, [sp, #36]
 1109              	.LBB99:
 1110              	.LBB100:
 312:Src/main.c    **** }
 1111              		.loc 1 312 0
 1112 02c4 4D48     		ldr	r0, .L142+76
 1113              	.LBE100:
 1114              	.LBE99:
 624:Src/main.c    ****   }else{
 1115              		.loc 1 624 0
 1116 02c6 0CBF     		ite	eq
 1117 02c8 0123     		moveq	r3, #1
 626:Src/main.c    ****   }
 1118              		.loc 1 626 0
 1119 02ca 0023     		movne	r3, #0
 1120              	.LBB103:
 1121              	.LBB101:
 312:Src/main.c    **** }
 1122              		.loc 1 312 0
 1123 02cc 0A25     		movs	r5, #10
 1124              	.LVL108:
 1125              	.LBE101:
 1126              	.LBE103:
 626:Src/main.c    ****   }
 1127              		.loc 1 626 0
 1128 02ce 1370     		strb	r3, [r2]
 1129              	.LBB104:
 1130              	.LBB102:
 310:Src/main.c    ****   i2c_buf[1] = data;  
 1131              		.loc 1 310 0
 1132 02d0 40F62D06 		movw	r6, #2093
 312:Src/main.c    **** }
 1133              		.loc 1 312 0
 1134 02d4 0223     		movs	r3, #2
 1135 02d6 0DAA     		add	r2, sp, #52
 1136 02d8 0095     		str	r5, [sp]
 1137 02da 3A21     		movs	r1, #58
 310:Src/main.c    ****   i2c_buf[1] = data;  
 1138              		.loc 1 310 0
 1139 02dc ADF83460 		strh	r6, [sp, #52]	@ movhi
 312:Src/main.c    **** }
 1140              		.loc 1 312 0
 1141 02e0 FFF7FEFF 		bl	HAL_I2C_Master_Transmit
 1142              	.LVL109:
 1143              	.LBE102:
 1144              	.LBE104:
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s 			page 45


 632:Src/main.c    **** 
 1145              		.loc 1 632 0
 1146 02e4 2D21     		movs	r1, #45
 1147 02e6 1D20     		movs	r0, #29
 1148 02e8 FFF7FEFF 		bl	ADXL345_RegRead_1byte
 1149              	.LVL110:
 1150              	.LBB105:
 1151              	.LBB106:
 312:Src/main.c    **** }
 1152              		.loc 1 312 0
 1153 02ec 0223     		movs	r3, #2
 1154 02ee 0DAA     		add	r2, sp, #52
 1155 02f0 0095     		str	r5, [sp]
 1156 02f2 3A21     		movs	r1, #58
 310:Src/main.c    ****   i2c_buf[1] = data;  
 1157              		.loc 1 310 0
 1158 02f4 40F23155 		movw	r5, #1329
 312:Src/main.c    **** }
 1159              		.loc 1 312 0
 1160 02f8 4048     		ldr	r0, .L142+76
 310:Src/main.c    ****   i2c_buf[1] = data;  
 1161              		.loc 1 310 0
 1162 02fa ADF83450 		strh	r5, [sp, #52]	@ movhi
 312:Src/main.c    **** }
 1163              		.loc 1 312 0
 1164 02fe FFF7FEFF 		bl	HAL_I2C_Master_Transmit
 1165              	.LVL111:
 1166              	.LBE106:
 1167              	.LBE105:
 638:Src/main.c    **** 
 1168              		.loc 1 638 0
 1169 0302 3121     		movs	r1, #49
 1170 0304 1D20     		movs	r0, #29
 1171 0306 FFF7FEFF 		bl	ADXL345_RegRead_1byte
 1172              	.LVL112:
 645:Src/main.c    ****   draw_indicators();
 1173              		.loc 1 645 0
 1174 030a FFF7FEFF 		bl	draw_MeasLabels
 1175              	.LVL113:
 646:Src/main.c    ****   u8g2_SendBuffer(&u8g2);
 1176              		.loc 1 646 0
 1177 030e FFF7FEFF 		bl	draw_indicators
 1178              	.LVL114:
 647:Src/main.c    **** 
 1179              		.loc 1 647 0
 1180 0312 2F48     		ldr	r0, .L142+32
 1181 0314 FFF7FEFF 		bl	u8g2_SendBuffer
 1182              	.LVL115:
 653:Src/main.c    ****   HAL_UART_Transmit_printf(&huart2, "ADXL324 DEVID %d\n", a); // debug
 1183              		.loc 1 653 0
 1184 0318 0021     		movs	r1, #0
 1185 031a 1D20     		movs	r0, #29
 1186 031c FFF7FEFF 		bl	ADXL345_RegRead_1byte
 1187              	.LVL116:
 1188 0320 C5B2     		uxtb	r5, r0
 1189              	.LVL117:
 654:Src/main.c    ****   if( a == 0xE5 ){
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s 			page 46


 1190              		.loc 1 654 0
 1191 0322 2A46     		mov	r2, r5
 1192 0324 3349     		ldr	r1, .L142+68
 1193 0326 3148     		ldr	r0, .L142+60
 1194 0328 FFF7FEFF 		bl	HAL_UART_Transmit_printf
 1195              	.LVL118:
 655:Src/main.c    ****     Gsens_EN = 1;
 1196              		.loc 1 655 0
 1197 032c E52D     		cmp	r5, #229
 658:Src/main.c    ****   }
 1198              		.loc 1 658 0
 1199 032e 099A     		ldr	r2, [sp, #36]
 1200              	.LBB107:
 1201              	.LBB108:
 312:Src/main.c    **** }
 1202              		.loc 1 312 0
 1203 0330 3248     		ldr	r0, .L142+76
 1204              	.LBE108:
 1205              	.LBE107:
 656:Src/main.c    ****   }else{
 1206              		.loc 1 656 0
 1207 0332 0CBF     		ite	eq
 1208 0334 0123     		moveq	r3, #1
 658:Src/main.c    ****   }
 1209              		.loc 1 658 0
 1210 0336 0023     		movne	r3, #0
 1211              	.LBB111:
 1212              	.LBB109:
 312:Src/main.c    **** }
 1213              		.loc 1 312 0
 1214 0338 0A25     		movs	r5, #10
 1215              	.LVL119:
 1216              	.LBE109:
 1217              	.LBE111:
 658:Src/main.c    ****   }
 1218              		.loc 1 658 0
 1219 033a 1370     		strb	r3, [r2]
 1220              	.LBB112:
 1221              	.LBB110:
 310:Src/main.c    ****   i2c_buf[1] = data;  
 1222              		.loc 1 310 0
 1223 033c 40F62D06 		movw	r6, #2093
 312:Src/main.c    **** }
 1224              		.loc 1 312 0
 1225 0340 0223     		movs	r3, #2
 1226 0342 0DAA     		add	r2, sp, #52
 1227 0344 0095     		str	r5, [sp]
 1228 0346 3A21     		movs	r1, #58
 310:Src/main.c    ****   i2c_buf[1] = data;  
 1229              		.loc 1 310 0
 1230 0348 ADF83460 		strh	r6, [sp, #52]	@ movhi
 312:Src/main.c    **** }
 1231              		.loc 1 312 0
 1232 034c FFF7FEFF 		bl	HAL_I2C_Master_Transmit
 1233              	.LVL120:
 1234              	.LBE110:
 1235              	.LBE112:
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s 			page 47


 664:Src/main.c    **** 
 1236              		.loc 1 664 0
 1237 0350 2D21     		movs	r1, #45
 1238 0352 1D20     		movs	r0, #29
 1239 0354 FFF7FEFF 		bl	ADXL345_RegRead_1byte
 1240              	.LVL121:
 1241              	.LBB113:
 1242              	.LBB114:
 312:Src/main.c    **** }
 1243              		.loc 1 312 0
 1244 0358 0223     		movs	r3, #2
 1245 035a 0DAA     		add	r2, sp, #52
 1246 035c 0095     		str	r5, [sp]
 1247 035e 3A21     		movs	r1, #58
 310:Src/main.c    ****   i2c_buf[1] = data;  
 1248              		.loc 1 310 0
 1249 0360 40F23155 		movw	r5, #1329
 312:Src/main.c    **** }
 1250              		.loc 1 312 0
 1251 0364 2548     		ldr	r0, .L142+76
 310:Src/main.c    ****   i2c_buf[1] = data;  
 1252              		.loc 1 310 0
 1253 0366 ADF83450 		strh	r5, [sp, #52]	@ movhi
 312:Src/main.c    **** }
 1254              		.loc 1 312 0
 1255 036a FFF7FEFF 		bl	HAL_I2C_Master_Transmit
 1256              	.LVL122:
 1257              	.LBE114:
 1258              	.LBE113:
 670:Src/main.c    **** 
 1259              		.loc 1 670 0
 1260 036e 3121     		movs	r1, #49
 1261 0370 1D20     		movs	r0, #29
 1262 0372 FFF7FEFF 		bl	ADXL345_RegRead_1byte
 1263              	.LVL123:
 677:Src/main.c    ****   draw_indicators();
 1264              		.loc 1 677 0
 1265 0376 FFF7FEFF 		bl	draw_MeasLabels
 1266              	.LVL124:
 678:Src/main.c    ****   u8g2_SendBuffer(&u8g2);
 1267              		.loc 1 678 0
 1268 037a FFF7FEFF 		bl	draw_indicators
 1269              	.LVL125:
 679:Src/main.c    **** 
 1270              		.loc 1 679 0
 1271 037e 1448     		ldr	r0, .L142+32
 1272 0380 FFF7FEFF 		bl	u8g2_SendBuffer
 1273              	.LVL126:
 685:Src/main.c    ****   HAL_UART_Transmit_printf(&huart2, "ADXL324 DEVID %d\n", a); // debug
 1274              		.loc 1 685 0
 1275 0384 0021     		movs	r1, #0
 1276 0386 1D20     		movs	r0, #29
 1277 0388 FFF7FEFF 		bl	ADXL345_RegRead_1byte
 1278              	.LVL127:
 1279 038c C5B2     		uxtb	r5, r0
 1280              	.LVL128:
 686:Src/main.c    ****   if( a == 0xE5 ){
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s 			page 48


 1281              		.loc 1 686 0
 1282 038e 2A46     		mov	r2, r5
 1283 0390 1849     		ldr	r1, .L142+68
 1284 0392 1648     		ldr	r0, .L142+60
 1285 0394 FFF7FEFF 		bl	HAL_UART_Transmit_printf
 1286              	.LVL129:
 687:Src/main.c    ****     Gsens_EN = 1;
 1287              		.loc 1 687 0
 1288 0398 E52D     		cmp	r5, #229
 690:Src/main.c    ****   }
 1289              		.loc 1 690 0
 1290 039a 099A     		ldr	r2, [sp, #36]
 1291              	.LBB115:
 1292              	.LBB116:
 312:Src/main.c    **** }
 1293              		.loc 1 312 0
 1294 039c 1748     		ldr	r0, .L142+76
 1295              	.LBE116:
 1296              	.LBE115:
 688:Src/main.c    ****   }else{
 1297              		.loc 1 688 0
 1298 039e 0CBF     		ite	eq
 1299 03a0 0123     		moveq	r3, #1
 690:Src/main.c    ****   }
 1300              		.loc 1 690 0
 1301 03a2 0023     		movne	r3, #0
 1302              	.LBB119:
 1303              	.LBB117:
 312:Src/main.c    **** }
 1304              		.loc 1 312 0
 1305 03a4 0A25     		movs	r5, #10
 1306              	.LVL130:
 1307              	.LBE117:
 1308              	.LBE119:
 690:Src/main.c    ****   }
 1309              		.loc 1 690 0
 1310 03a6 1370     		strb	r3, [r2]
 1311              	.LBB120:
 1312              	.LBB118:
 310:Src/main.c    ****   i2c_buf[1] = data;  
 1313              		.loc 1 310 0
 1314 03a8 40F62D06 		movw	r6, #2093
 312:Src/main.c    **** }
 1315              		.loc 1 312 0
 1316 03ac 0223     		movs	r3, #2
 1317 03ae 35E0     		b	.L143
 1318              	.L144:
 1319              		.align	2
 1320              	.L142:
 1321 03b0 00000000 		.word	g_ADCBuffer
 1322 03b4 00000000 		.word	hadc1
 1323 03b8 00000000 		.word	.LANCHOR4
 1324 03bc 00000000 		.word	UART1_Data
 1325 03c0 00000000 		.word	huart1
 1326 03c4 00000000 		.word	u8x8_gpio_and_delay_STM32F303
 1327 03c8 00000000 		.word	u8x8_byte_4wire_hw_spi
 1328 03cc 00000000 		.word	u8g2_cb_r0
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s 			page 49


 1329 03d0 00000000 		.word	u8g2
 1330 03d4 00040048 		.word	1207960576
 1331 03d8 00000000 		.word	.LANCHOR3
 1332 03dc 00000000 		.word	u8g2_font_5x7_tf
 1333 03e0 00000000 		.word	.LC2
 1334 03e4 18000000 		.word	.LC3
 1335 03e8 24000000 		.word	.LC4
 1336 03ec 00000000 		.word	huart2
 1337 03f0 002C0140 		.word	1073818624
 1338 03f4 3C000000 		.word	.LC5
 1339 03f8 00000000 		.word	Gsens_EN
 1340 03fc 00000000 		.word	hi2c1
 1341 0400 0000A543 		.word	1134886912
 1342 0404 00007F43 		.word	1132396544
 1343 0408 00002543 		.word	1126498304
 1344 040c 00000000 		.word	adc
 1345 0410 00000000 		.word	flag_meas
 1346 0414 00000000 		.word	.LANCHOR7
 1347 0418 00000000 		.word	flag_disp
 1348              	.L143:
 1349 041c 0DAA     		add	r2, sp, #52
 1350 041e 0095     		str	r5, [sp]
 1351 0420 3A21     		movs	r1, #58
 310:Src/main.c    ****   i2c_buf[1] = data;  
 1352              		.loc 1 310 0
 1353 0422 ADF83460 		strh	r6, [sp, #52]	@ movhi
 312:Src/main.c    **** }
 1354              		.loc 1 312 0
 1355 0426 FFF7FEFF 		bl	HAL_I2C_Master_Transmit
 1356              	.LVL131:
 1357              	.LBE118:
 1358              	.LBE120:
 696:Src/main.c    **** 
 1359              		.loc 1 696 0
 1360 042a 2D21     		movs	r1, #45
 1361 042c 1D20     		movs	r0, #29
 1362 042e FFF7FEFF 		bl	ADXL345_RegRead_1byte
 1363              	.LVL132:
 1364              	.LBB121:
 1365              	.LBB122:
 312:Src/main.c    **** }
 1366              		.loc 1 312 0
 1367 0432 0223     		movs	r3, #2
 1368 0434 0DAA     		add	r2, sp, #52
 1369 0436 0095     		str	r5, [sp]
 1370 0438 3A21     		movs	r1, #58
 310:Src/main.c    ****   i2c_buf[1] = data;  
 1371              		.loc 1 310 0
 1372 043a 40F23155 		movw	r5, #1329
 312:Src/main.c    **** }
 1373              		.loc 1 312 0
 1374 043e 8D48     		ldr	r0, .L145
 310:Src/main.c    ****   i2c_buf[1] = data;  
 1375              		.loc 1 310 0
 1376 0440 ADF83450 		strh	r5, [sp, #52]	@ movhi
 312:Src/main.c    **** }
 1377              		.loc 1 312 0
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s 			page 50


 1378 0444 FFF7FEFF 		bl	HAL_I2C_Master_Transmit
 1379              	.LVL133:
 1380              	.LBE122:
 1381              	.LBE121:
 702:Src/main.c    **** 
 1382              		.loc 1 702 0
 1383 0448 3121     		movs	r1, #49
 1384 044a 1D20     		movs	r0, #29
 1385 044c FFF7FEFF 		bl	ADXL345_RegRead_1byte
 1386              	.LVL134:
 709:Src/main.c    ****   draw_indicators();
 1387              		.loc 1 709 0
 1388 0450 FFF7FEFF 		bl	draw_MeasLabels
 1389              	.LVL135:
 710:Src/main.c    ****   u8g2_SendBuffer(&u8g2);
 1390              		.loc 1 710 0
 1391 0454 FFF7FEFF 		bl	draw_indicators
 1392              	.LVL136:
 711:Src/main.c    **** 
 1393              		.loc 1 711 0
 1394 0458 8748     		ldr	r0, .L145+4
 1395 045a FFF7FEFF 		bl	u8g2_SendBuffer
 1396              	.LVL137:
 717:Src/main.c    ****   HAL_UART_Transmit_printf(&huart2, "ADXL324 DEVID %d\n", a); // debug
 1397              		.loc 1 717 0
 1398 045e 0021     		movs	r1, #0
 1399 0460 1D20     		movs	r0, #29
 1400 0462 FFF7FEFF 		bl	ADXL345_RegRead_1byte
 1401              	.LVL138:
 1402 0466 C5B2     		uxtb	r5, r0
 1403              	.LVL139:
 718:Src/main.c    ****   if( a == 0xE5 ){
 1404              		.loc 1 718 0
 1405 0468 2A46     		mov	r2, r5
 1406 046a 8449     		ldr	r1, .L145+8
 1407 046c 8448     		ldr	r0, .L145+12
 1408 046e FFF7FEFF 		bl	HAL_UART_Transmit_printf
 1409              	.LVL140:
 719:Src/main.c    ****     Gsens_EN = 1;
 1410              		.loc 1 719 0
 1411 0472 E52D     		cmp	r5, #229
 722:Src/main.c    ****   }
 1412              		.loc 1 722 0
 1413 0474 099A     		ldr	r2, [sp, #36]
 1414              	.LBB123:
 1415              	.LBB124:
 312:Src/main.c    **** }
 1416              		.loc 1 312 0
 1417 0476 7F48     		ldr	r0, .L145
 1418              	.LBE124:
 1419              	.LBE123:
 720:Src/main.c    ****   }else{
 1420              		.loc 1 720 0
 1421 0478 0CBF     		ite	eq
 1422 047a 0123     		moveq	r3, #1
 722:Src/main.c    ****   }
 1423              		.loc 1 722 0
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s 			page 51


 1424 047c 0023     		movne	r3, #0
 1425              	.LBB127:
 1426              	.LBB125:
 312:Src/main.c    **** }
 1427              		.loc 1 312 0
 1428 047e 0A25     		movs	r5, #10
 1429              	.LVL141:
 1430              	.LBE125:
 1431              	.LBE127:
 722:Src/main.c    ****   }
 1432              		.loc 1 722 0
 1433 0480 1370     		strb	r3, [r2]
 1434              	.LBB128:
 1435              	.LBB126:
 310:Src/main.c    ****   i2c_buf[1] = data;  
 1436              		.loc 1 310 0
 1437 0482 40F62D06 		movw	r6, #2093
 312:Src/main.c    **** }
 1438              		.loc 1 312 0
 1439 0486 0223     		movs	r3, #2
 1440 0488 0DAA     		add	r2, sp, #52
 1441 048a 0095     		str	r5, [sp]
 1442 048c 3A21     		movs	r1, #58
 310:Src/main.c    ****   i2c_buf[1] = data;  
 1443              		.loc 1 310 0
 1444 048e ADF83460 		strh	r6, [sp, #52]	@ movhi
 312:Src/main.c    **** }
 1445              		.loc 1 312 0
 1446 0492 FFF7FEFF 		bl	HAL_I2C_Master_Transmit
 1447              	.LVL142:
 1448              	.LBE126:
 1449              	.LBE128:
 728:Src/main.c    **** 
 1450              		.loc 1 728 0
 1451 0496 2D21     		movs	r1, #45
 1452 0498 1D20     		movs	r0, #29
 1453 049a FFF7FEFF 		bl	ADXL345_RegRead_1byte
 1454              	.LVL143:
 1455              	.LBB129:
 1456              	.LBB130:
 312:Src/main.c    **** }
 1457              		.loc 1 312 0
 1458 049e 0223     		movs	r3, #2
 1459 04a0 0DAA     		add	r2, sp, #52
 1460 04a2 0095     		str	r5, [sp]
 1461 04a4 3A21     		movs	r1, #58
 310:Src/main.c    ****   i2c_buf[1] = data;  
 1462              		.loc 1 310 0
 1463 04a6 40F23155 		movw	r5, #1329
 312:Src/main.c    **** }
 1464              		.loc 1 312 0
 1465 04aa 7248     		ldr	r0, .L145
 310:Src/main.c    ****   i2c_buf[1] = data;  
 1466              		.loc 1 310 0
 1467 04ac ADF83450 		strh	r5, [sp, #52]	@ movhi
 312:Src/main.c    **** }
 1468              		.loc 1 312 0
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s 			page 52


 1469 04b0 FFF7FEFF 		bl	HAL_I2C_Master_Transmit
 1470              	.LVL144:
 1471              	.LBE130:
 1472              	.LBE129:
 734:Src/main.c    **** 
 1473              		.loc 1 734 0
 1474 04b4 3121     		movs	r1, #49
 1475 04b6 1D20     		movs	r0, #29
 1476 04b8 FFF7FEFF 		bl	ADXL345_RegRead_1byte
 1477              	.LVL145:
 741:Src/main.c    ****   draw_indicators();
 1478              		.loc 1 741 0
 1479 04bc FFF7FEFF 		bl	draw_MeasLabels
 1480              	.LVL146:
 742:Src/main.c    ****   u8g2_SendBuffer(&u8g2);
 1481              		.loc 1 742 0
 1482 04c0 FFF7FEFF 		bl	draw_indicators
 1483              	.LVL147:
 743:Src/main.c    **** 
 1484              		.loc 1 743 0
 1485 04c4 6C48     		ldr	r0, .L145+4
 1486 04c6 FFF7FEFF 		bl	u8g2_SendBuffer
 1487              	.LVL148:
 749:Src/main.c    ****   HAL_UART_Transmit_printf(&huart2, "ADXL324 DEVID %d\n", a); // debug
 1488              		.loc 1 749 0
 1489 04ca 0021     		movs	r1, #0
 1490 04cc 1D20     		movs	r0, #29
 1491 04ce FFF7FEFF 		bl	ADXL345_RegRead_1byte
 1492              	.LVL149:
 1493 04d2 C5B2     		uxtb	r5, r0
 1494              	.LVL150:
 750:Src/main.c    ****   if( a == 0xE5 ){
 1495              		.loc 1 750 0
 1496 04d4 2A46     		mov	r2, r5
 1497 04d6 6949     		ldr	r1, .L145+8
 1498 04d8 6948     		ldr	r0, .L145+12
 1499 04da FFF7FEFF 		bl	HAL_UART_Transmit_printf
 1500              	.LVL151:
 751:Src/main.c    ****     Gsens_EN = 1;
 1501              		.loc 1 751 0
 1502 04de E52D     		cmp	r5, #229
 754:Src/main.c    ****   }
 1503              		.loc 1 754 0
 1504 04e0 099A     		ldr	r2, [sp, #36]
 1505              	.LBB131:
 1506              	.LBB132:
 312:Src/main.c    **** }
 1507              		.loc 1 312 0
 1508 04e2 6448     		ldr	r0, .L145
 1509              	.LBE132:
 1510              	.LBE131:
 752:Src/main.c    ****   }else{
 1511              		.loc 1 752 0
 1512 04e4 0CBF     		ite	eq
 1513 04e6 0123     		moveq	r3, #1
 754:Src/main.c    ****   }
 1514              		.loc 1 754 0
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s 			page 53


 1515 04e8 0023     		movne	r3, #0
 1516              	.LBB135:
 1517              	.LBB133:
 312:Src/main.c    **** }
 1518              		.loc 1 312 0
 1519 04ea 0A25     		movs	r5, #10
 1520              	.LVL152:
 1521              	.LBE133:
 1522              	.LBE135:
 754:Src/main.c    ****   }
 1523              		.loc 1 754 0
 1524 04ec 1370     		strb	r3, [r2]
 1525              	.LBB136:
 1526              	.LBB134:
 310:Src/main.c    ****   i2c_buf[1] = data;  
 1527              		.loc 1 310 0
 1528 04ee 40F62D06 		movw	r6, #2093
 312:Src/main.c    **** }
 1529              		.loc 1 312 0
 1530 04f2 0223     		movs	r3, #2
 1531 04f4 0DAA     		add	r2, sp, #52
 1532 04f6 0095     		str	r5, [sp]
 1533 04f8 3A21     		movs	r1, #58
 310:Src/main.c    ****   i2c_buf[1] = data;  
 1534              		.loc 1 310 0
 1535 04fa ADF83460 		strh	r6, [sp, #52]	@ movhi
 312:Src/main.c    **** }
 1536              		.loc 1 312 0
 1537 04fe FFF7FEFF 		bl	HAL_I2C_Master_Transmit
 1538              	.LVL153:
 1539              	.LBE134:
 1540              	.LBE136:
 760:Src/main.c    **** 
 1541              		.loc 1 760 0
 1542 0502 2D21     		movs	r1, #45
 1543 0504 1D20     		movs	r0, #29
 1544 0506 FFF7FEFF 		bl	ADXL345_RegRead_1byte
 1545              	.LVL154:
 1546              	.LBB137:
 1547              	.LBB138:
 312:Src/main.c    **** }
 1548              		.loc 1 312 0
 1549 050a 0223     		movs	r3, #2
 1550 050c 0DAA     		add	r2, sp, #52
 1551 050e 0095     		str	r5, [sp]
 1552 0510 3A21     		movs	r1, #58
 310:Src/main.c    ****   i2c_buf[1] = data;  
 1553              		.loc 1 310 0
 1554 0512 40F23155 		movw	r5, #1329
 312:Src/main.c    **** }
 1555              		.loc 1 312 0
 1556 0516 5748     		ldr	r0, .L145
 310:Src/main.c    ****   i2c_buf[1] = data;  
 1557              		.loc 1 310 0
 1558 0518 ADF83450 		strh	r5, [sp, #52]	@ movhi
 312:Src/main.c    **** }
 1559              		.loc 1 312 0
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s 			page 54


 1560 051c FFF7FEFF 		bl	HAL_I2C_Master_Transmit
 1561              	.LVL155:
 1562              	.LBE138:
 1563              	.LBE137:
 766:Src/main.c    **** 
 1564              		.loc 1 766 0
 1565 0520 3121     		movs	r1, #49
 1566 0522 1D20     		movs	r0, #29
 1567 0524 FFF7FEFF 		bl	ADXL345_RegRead_1byte
 1568              	.LVL156:
 773:Src/main.c    ****   draw_indicators();
 1569              		.loc 1 773 0
 1570 0528 FFF7FEFF 		bl	draw_MeasLabels
 1571              	.LVL157:
 774:Src/main.c    ****   u8g2_SendBuffer(&u8g2);
 1572              		.loc 1 774 0
 1573 052c FFF7FEFF 		bl	draw_indicators
 1574              	.LVL158:
 775:Src/main.c    **** 
 1575              		.loc 1 775 0
 1576 0530 5148     		ldr	r0, .L145+4
 1577 0532 FFF7FEFF 		bl	u8g2_SendBuffer
 1578              	.LVL159:
 781:Src/main.c    ****   HAL_UART_Transmit_printf(&huart2, "ADXL324 DEVID %d\n", a); // debug
 1579              		.loc 1 781 0
 1580 0536 0021     		movs	r1, #0
 1581 0538 1D20     		movs	r0, #29
 1582 053a FFF7FEFF 		bl	ADXL345_RegRead_1byte
 1583              	.LVL160:
 1584 053e C5B2     		uxtb	r5, r0
 1585              	.LVL161:
 782:Src/main.c    ****   if( a == 0xE5 ){
 1586              		.loc 1 782 0
 1587 0540 2A46     		mov	r2, r5
 1588 0542 4E49     		ldr	r1, .L145+8
 1589 0544 4E48     		ldr	r0, .L145+12
 1590 0546 FFF7FEFF 		bl	HAL_UART_Transmit_printf
 1591              	.LVL162:
 783:Src/main.c    ****     Gsens_EN = 1;
 1592              		.loc 1 783 0
 1593 054a E52D     		cmp	r5, #229
 786:Src/main.c    ****   }
 1594              		.loc 1 786 0
 1595 054c 099A     		ldr	r2, [sp, #36]
 1596              	.LBB139:
 1597              	.LBB140:
 312:Src/main.c    **** }
 1598              		.loc 1 312 0
 1599 054e 4948     		ldr	r0, .L145
 1600              	.LBE140:
 1601              	.LBE139:
 784:Src/main.c    ****   }else{
 1602              		.loc 1 784 0
 1603 0550 0CBF     		ite	eq
 1604 0552 0123     		moveq	r3, #1
 786:Src/main.c    ****   }
 1605              		.loc 1 786 0
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s 			page 55


 1606 0554 0023     		movne	r3, #0
 1607              	.LBB143:
 1608              	.LBB141:
 312:Src/main.c    **** }
 1609              		.loc 1 312 0
 1610 0556 0A25     		movs	r5, #10
 1611              	.LVL163:
 1612              	.LBE141:
 1613              	.LBE143:
 786:Src/main.c    ****   }
 1614              		.loc 1 786 0
 1615 0558 1370     		strb	r3, [r2]
 1616              	.LBB144:
 1617              	.LBB142:
 310:Src/main.c    ****   i2c_buf[1] = data;  
 1618              		.loc 1 310 0
 1619 055a 40F62D06 		movw	r6, #2093
 312:Src/main.c    **** }
 1620              		.loc 1 312 0
 1621 055e 0223     		movs	r3, #2
 1622 0560 0DAA     		add	r2, sp, #52
 1623 0562 0095     		str	r5, [sp]
 1624 0564 3A21     		movs	r1, #58
 310:Src/main.c    ****   i2c_buf[1] = data;  
 1625              		.loc 1 310 0
 1626 0566 ADF83460 		strh	r6, [sp, #52]	@ movhi
 312:Src/main.c    **** }
 1627              		.loc 1 312 0
 1628 056a FFF7FEFF 		bl	HAL_I2C_Master_Transmit
 1629              	.LVL164:
 1630              	.LBE142:
 1631              	.LBE144:
 792:Src/main.c    **** 
 1632              		.loc 1 792 0
 1633 056e 2D21     		movs	r1, #45
 1634 0570 1D20     		movs	r0, #29
 1635 0572 FFF7FEFF 		bl	ADXL345_RegRead_1byte
 1636              	.LVL165:
 1637              	.LBB145:
 1638              	.LBB146:
 312:Src/main.c    **** }
 1639              		.loc 1 312 0
 1640 0576 0223     		movs	r3, #2
 1641 0578 0DAA     		add	r2, sp, #52
 1642 057a 0095     		str	r5, [sp]
 1643 057c 3A21     		movs	r1, #58
 310:Src/main.c    ****   i2c_buf[1] = data;  
 1644              		.loc 1 310 0
 1645 057e 40F23155 		movw	r5, #1329
 312:Src/main.c    **** }
 1646              		.loc 1 312 0
 1647 0582 3C48     		ldr	r0, .L145
 310:Src/main.c    ****   i2c_buf[1] = data;  
 1648              		.loc 1 310 0
 1649 0584 ADF83450 		strh	r5, [sp, #52]	@ movhi
 312:Src/main.c    **** }
 1650              		.loc 1 312 0
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s 			page 56


 1651 0588 FFF7FEFF 		bl	HAL_I2C_Master_Transmit
 1652              	.LVL166:
 1653              	.LBE146:
 1654              	.LBE145:
 798:Src/main.c    **** 
 1655              		.loc 1 798 0
 1656 058c 3121     		movs	r1, #49
 1657 058e 1D20     		movs	r0, #29
 1658 0590 FFF7FEFF 		bl	ADXL345_RegRead_1byte
 1659              	.LVL167:
 805:Src/main.c    ****   draw_indicators();
 1660              		.loc 1 805 0
 1661 0594 FFF7FEFF 		bl	draw_MeasLabels
 1662              	.LVL168:
 806:Src/main.c    ****   u8g2_SendBuffer(&u8g2);
 1663              		.loc 1 806 0
 1664 0598 FFF7FEFF 		bl	draw_indicators
 1665              	.LVL169:
 807:Src/main.c    **** 
 1666              		.loc 1 807 0
 1667 059c 3648     		ldr	r0, .L145+4
 1668 059e FFF7FEFF 		bl	u8g2_SendBuffer
 1669              	.LVL170:
 813:Src/main.c    ****   HAL_UART_Transmit_printf(&huart2, "ADXL324 DEVID %d\n", a); // debug
 1670              		.loc 1 813 0
 1671 05a2 0021     		movs	r1, #0
 1672 05a4 1D20     		movs	r0, #29
 1673 05a6 FFF7FEFF 		bl	ADXL345_RegRead_1byte
 1674              	.LVL171:
 1675 05aa C5B2     		uxtb	r5, r0
 1676              	.LVL172:
 814:Src/main.c    ****   if( a == 0xE5 ){
 1677              		.loc 1 814 0
 1678 05ac 2A46     		mov	r2, r5
 1679 05ae 3349     		ldr	r1, .L145+8
 1680 05b0 3348     		ldr	r0, .L145+12
 1681 05b2 FFF7FEFF 		bl	HAL_UART_Transmit_printf
 1682              	.LVL173:
 815:Src/main.c    ****     Gsens_EN = 1;
 1683              		.loc 1 815 0
 1684 05b6 E52D     		cmp	r5, #229
 818:Src/main.c    ****   }
 1685              		.loc 1 818 0
 1686 05b8 099A     		ldr	r2, [sp, #36]
 1687              	.LBB147:
 1688              	.LBB148:
 312:Src/main.c    **** }
 1689              		.loc 1 312 0
 1690 05ba 2E48     		ldr	r0, .L145
 1691              	.LBE148:
 1692              	.LBE147:
 816:Src/main.c    ****   }else{
 1693              		.loc 1 816 0
 1694 05bc 0CBF     		ite	eq
 1695 05be 0123     		moveq	r3, #1
 818:Src/main.c    ****   }
 1696              		.loc 1 818 0
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s 			page 57


 1697 05c0 0023     		movne	r3, #0
 1698              	.LBB151:
 1699              	.LBB149:
 312:Src/main.c    **** }
 1700              		.loc 1 312 0
 1701 05c2 0A25     		movs	r5, #10
 1702              	.LVL174:
 1703              	.LBE149:
 1704              	.LBE151:
 818:Src/main.c    ****   }
 1705              		.loc 1 818 0
 1706 05c4 1370     		strb	r3, [r2]
 1707              	.LBB152:
 1708              	.LBB150:
 310:Src/main.c    ****   i2c_buf[1] = data;  
 1709              		.loc 1 310 0
 1710 05c6 40F62D06 		movw	r6, #2093
 312:Src/main.c    **** }
 1711              		.loc 1 312 0
 1712 05ca 0223     		movs	r3, #2
 1713 05cc 0DAA     		add	r2, sp, #52
 1714 05ce 0095     		str	r5, [sp]
 1715 05d0 3A21     		movs	r1, #58
 310:Src/main.c    ****   i2c_buf[1] = data;  
 1716              		.loc 1 310 0
 1717 05d2 ADF83460 		strh	r6, [sp, #52]	@ movhi
 312:Src/main.c    **** }
 1718              		.loc 1 312 0
 1719 05d6 FFF7FEFF 		bl	HAL_I2C_Master_Transmit
 1720              	.LVL175:
 1721              	.LBE150:
 1722              	.LBE152:
 824:Src/main.c    **** 
 1723              		.loc 1 824 0
 1724 05da 2D21     		movs	r1, #45
 1725 05dc 1D20     		movs	r0, #29
 1726 05de FFF7FEFF 		bl	ADXL345_RegRead_1byte
 1727              	.LVL176:
 1728              	.LBB153:
 1729              	.LBB154:
 312:Src/main.c    **** }
 1730              		.loc 1 312 0
 1731 05e2 0223     		movs	r3, #2
 1732 05e4 0DAA     		add	r2, sp, #52
 1733 05e6 0095     		str	r5, [sp]
 1734 05e8 3A21     		movs	r1, #58
 310:Src/main.c    ****   i2c_buf[1] = data;  
 1735              		.loc 1 310 0
 1736 05ea 40F23155 		movw	r5, #1329
 312:Src/main.c    **** }
 1737              		.loc 1 312 0
 1738 05ee 2148     		ldr	r0, .L145
 310:Src/main.c    ****   i2c_buf[1] = data;  
 1739              		.loc 1 310 0
 1740 05f0 ADF83450 		strh	r5, [sp, #52]	@ movhi
 312:Src/main.c    **** }
 1741              		.loc 1 312 0
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s 			page 58


 1742 05f4 FFF7FEFF 		bl	HAL_I2C_Master_Transmit
 1743              	.LVL177:
 1744              	.LBE154:
 1745              	.LBE153:
 830:Src/main.c    **** 
 1746              		.loc 1 830 0
 1747 05f8 3121     		movs	r1, #49
 1748 05fa 1D20     		movs	r0, #29
 1749 05fc FFF7FEFF 		bl	ADXL345_RegRead_1byte
 1750              	.LVL178:
 837:Src/main.c    ****   draw_indicators();
 1751              		.loc 1 837 0
 1752 0600 FFF7FEFF 		bl	draw_MeasLabels
 1753              	.LVL179:
 838:Src/main.c    ****   u8g2_SendBuffer(&u8g2);
 1754              		.loc 1 838 0
 1755 0604 FFF7FEFF 		bl	draw_indicators
 1756              	.LVL180:
 839:Src/main.c    **** 
 1757              		.loc 1 839 0
 1758 0608 1B48     		ldr	r0, .L145+4
 1759 060a FFF7FEFF 		bl	u8g2_SendBuffer
 1760              	.LVL181:
 845:Src/main.c    ****   HAL_UART_Transmit_printf(&huart2, "ADXL324 DEVID %d\n", a); // debug
 1761              		.loc 1 845 0
 1762 060e 0021     		movs	r1, #0
 1763 0610 1D20     		movs	r0, #29
 1764 0612 FFF7FEFF 		bl	ADXL345_RegRead_1byte
 1765              	.LVL182:
 1766 0616 C5B2     		uxtb	r5, r0
 1767              	.LVL183:
 846:Src/main.c    ****   if( a == 0xE5 ){
 1768              		.loc 1 846 0
 1769 0618 2A46     		mov	r2, r5
 1770 061a 1849     		ldr	r1, .L145+8
 1771 061c 1848     		ldr	r0, .L145+12
 1772 061e FFF7FEFF 		bl	HAL_UART_Transmit_printf
 1773              	.LVL184:
 847:Src/main.c    ****     Gsens_EN = 1;
 1774              		.loc 1 847 0
 1775 0622 E52D     		cmp	r5, #229
 850:Src/main.c    ****   }
 1776              		.loc 1 850 0
 1777 0624 099A     		ldr	r2, [sp, #36]
 1778              	.LBB155:
 1779              	.LBB156:
 312:Src/main.c    **** }
 1780              		.loc 1 312 0
 1781 0626 1348     		ldr	r0, .L145
 1782              	.LBE156:
 1783              	.LBE155:
 848:Src/main.c    ****   }else{
 1784              		.loc 1 848 0
 1785 0628 0CBF     		ite	eq
 1786 062a 0123     		moveq	r3, #1
 850:Src/main.c    ****   }
 1787              		.loc 1 850 0
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s 			page 59


 1788 062c 0023     		movne	r3, #0
 1789              	.LBB159:
 1790              	.LBB157:
 312:Src/main.c    **** }
 1791              		.loc 1 312 0
 1792 062e 0A25     		movs	r5, #10
 1793              	.LVL185:
 1794              	.LBE157:
 1795              	.LBE159:
 850:Src/main.c    ****   }
 1796              		.loc 1 850 0
 1797 0630 1370     		strb	r3, [r2]
 1798              	.LVL186:
 1799              	.LBB160:
 1800              	.LBB158:
 312:Src/main.c    **** }
 1801              		.loc 1 312 0
 1802 0632 3A21     		movs	r1, #58
 1803 0634 0223     		movs	r3, #2
 1804 0636 0DAA     		add	r2, sp, #52
 1805 0638 0095     		str	r5, [sp]
 310:Src/main.c    ****   i2c_buf[1] = data;  
 1806              		.loc 1 310 0
 1807 063a 40F62D06 		movw	r6, #2093
 1808 063e ADF83460 		strh	r6, [sp, #52]	@ movhi
 312:Src/main.c    **** }
 1809              		.loc 1 312 0
 1810 0642 FFF7FEFF 		bl	HAL_I2C_Master_Transmit
 1811              	.LVL187:
 1812              	.LBE158:
 1813              	.LBE160:
 856:Src/main.c    **** 
 1814              		.loc 1 856 0
 1815 0646 2D21     		movs	r1, #45
 1816 0648 1D20     		movs	r0, #29
 1817 064a FFF7FEFF 		bl	ADXL345_RegRead_1byte
 1818              	.LVL188:
 1819              	.LBB161:
 1820              	.LBB162:
 312:Src/main.c    **** }
 1821              		.loc 1 312 0
 1822 064e 0223     		movs	r3, #2
 1823 0650 0095     		str	r5, [sp]
 1824 0652 0DAA     		add	r2, sp, #52
 310:Src/main.c    ****   i2c_buf[1] = data;  
 1825              		.loc 1 310 0
 1826 0654 40F23155 		movw	r5, #1329
 312:Src/main.c    **** }
 1827              		.loc 1 312 0
 1828 0658 3A21     		movs	r1, #58
 1829 065a 0648     		ldr	r0, .L145
 310:Src/main.c    ****   i2c_buf[1] = data;  
 1830              		.loc 1 310 0
 1831 065c ADF83450 		strh	r5, [sp, #52]	@ movhi
 312:Src/main.c    **** }
 1832              		.loc 1 312 0
 1833 0660 FFF7FEFF 		bl	HAL_I2C_Master_Transmit
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s 			page 60


 1834              	.LVL189:
 1835              	.LBE162:
 1836              	.LBE161:
 862:Src/main.c    **** 
 1837              		.loc 1 862 0
 1838 0664 3121     		movs	r1, #49
 1839 0666 1D20     		movs	r0, #29
 1840 0668 FFF7FEFF 		bl	ADXL345_RegRead_1byte
 1841              	.LVL190:
 416:Src/main.c    ****   int16_t circular_buffer[128]={};
 1842              		.loc 1 416 0
 1843 066c 0023     		movs	r3, #0
 1844 066e 054D     		ldr	r5, .L145+16
 1845 0670 0A93     		str	r3, [sp, #40]
 1846 0672 37E0     		b	.L93
 1847              	.L146:
 1848              		.align	2
 1849              	.L145:
 1850 0674 00000000 		.word	hi2c1
 1851 0678 00000000 		.word	u8g2
 1852 067c 3C000000 		.word	.LC5
 1853 0680 00000000 		.word	huart2
 1854 0684 00000000 		.word	DEFI_value
 1855              	.LVL191:
 1856              	.L72:
 1857              	.LBB163:
 972:Src/main.c    **** 
 1858              		.loc 1 972 0
 1859 0688 B4F90030 		ldrsh	r3, [r4]
 1860 068c B34A     		ldr	r2, .L147
 1861 068e C3F16403 		rsb	r3, r3, #100
 1862 0692 5363     		str	r3, [r2, #52]
 975:Src/main.c    ****       switch( flag_sw ){
 1863              		.loc 1 975 0
 1864 0694 B24B     		ldr	r3, .L147+4
 1865 0696 1B68     		ldr	r3, [r3]
 1866 0698 03B3     		cbz	r3, .L77
 976:Src/main.c    ****         case 1:
 1867              		.loc 1 976 0
 1868 069a 022B     		cmp	r3, #2
 1869 069c 00F0C080 		beq	.L79
 1870 06a0 032B     		cmp	r3, #3
 1871 06a2 00F0A080 		beq	.L80
 1872 06a6 012B     		cmp	r3, #1
 1873 06a8 00F0A580 		beq	.L127
 1874              	.L78:
1017:Src/main.c    ****       if( mode == MODE_BAR_METER ){
 1875              		.loc 1 1017 0
 1876 06ac AD48     		ldr	r0, .L147+8
 1877 06ae FFF7FEFF 		bl	u8g2_ClearBuffer
 1878              	.LVL192:
1018:Src/main.c    ****         draw_MeasLabels();
 1879              		.loc 1 1018 0
 1880 06b2 AD4B     		ldr	r3, .L147+12
 1881 06b4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1882 06b6 002B     		cmp	r3, #0
 1883 06b8 78D0     		beq	.L128
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s 			page 61


1022:Src/main.c    ****         for( n=0; n<N_meas_C; n++ ){
 1884              		.loc 1 1022 0
 1885 06ba 012B     		cmp	r3, #1
 1886 06bc 00F0C480 		beq	.L129
1040:Src/main.c    ****         draw_Wave_axis(&u8g2, wave_x, wave_y, wave_width, wave_height, wave_value_min, wave_value_m
 1887              		.loc 1 1040 0
 1888 06c0 022B     		cmp	r3, #2
 1889 06c2 00F07F81 		beq	.L130
1044:Src/main.c    ****         draw_Wave_axis(&u8g2, wave_x, wave_y, wave_width, wave_height, -200, 200, 4);
 1890              		.loc 1 1044 0
 1891 06c6 032B     		cmp	r3, #3
 1892 06c8 00F09A81 		beq	.L131
 1893              	.L87:
1049:Src/main.c    ****       TIM6->CNT = 0;
 1894              		.loc 1 1049 0
 1895 06cc A548     		ldr	r0, .L147+8
 1896 06ce FFF7FEFF 		bl	u8g2_SendBuffer
 1897              	.LVL193:
1050:Src/main.c    ****       flag_sw = 0;
 1898              		.loc 1 1050 0
 1899 06d2 A64A     		ldr	r2, .L147+16
 1900 06d4 0023     		movs	r3, #0
 1901 06d6 5362     		str	r3, [r2, #36]
1051:Src/main.c    ****     }
 1902              		.loc 1 1051 0
 1903 06d8 A14A     		ldr	r2, .L147+4
 1904 06da 1360     		str	r3, [r2]
 1905              	.L77:
1055:Src/main.c    **** 
 1906              		.loc 1 1055 0
 1907 06dc DBF80030 		ldr	r3, [fp]
 1908 06e0 002B     		cmp	r3, #0
 1909 06e2 68D1     		bne	.L132
 1910              	.L93:
 876:Src/main.c    **** 
 1911              		.loc 1 876 0
 1912 06e4 B8F80030 		ldrh	r3, [r8]
 1913 06e8 A148     		ldr	r0, .L147+20
 1914 06ea 07EE103A 		vmov	s14, r3	@ int
 880:Src/main.c    ****     // Ressister attenation ratio '165/33'
 1915              		.loc 1 880 0
 1916 06ee B8F80230 		ldrh	r3, [r8, #2]
 876:Src/main.c    **** 
 1917              		.loc 1 876 0
 1918 06f2 B8EE477A 		vcvt.f32.u32	s14, s14
 880:Src/main.c    ****     // Ressister attenation ratio '165/33'
 1919              		.loc 1 880 0
 1920 06f6 07EE903A 		vmov	s15, r3	@ int
 876:Src/main.c    **** 
 1921              		.loc 1 876 0
 1922 06fa 27EE097A 		vmul.f32	s14, s14, s18
 880:Src/main.c    ****     // Ressister attenation ratio '165/33'
 1923              		.loc 1 880 0
 1924 06fe F8EE677A 		vcvt.f32.u32	s15, s15
 876:Src/main.c    **** 
 1925              		.loc 1 876 0
 1926 0702 C7EE086A 		vdiv.f32	s13, s14, s16
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s 			page 62


 885:Src/main.c    ****       FP_duty = 100;
 1927              		.loc 1 885 0
 1928 0706 9B4B     		ldr	r3, .L147+24
 1929 0708 1B88     		ldrh	r3, [r3]
 1930 070a 2A88     		ldrh	r2, [r5]
 1931 070c 1BB2     		sxth	r3, r3
 1932 070e 40F6B731 		movw	r1, #2999
 1933 0712 8B42     		cmp	r3, r1
 1934 0714 12B2     		sxth	r2, r2
 880:Src/main.c    ****     // Ressister attenation ratio '165/33'
 1935              		.loc 1 880 0
 1936 0716 67EEA87A 		vmul.f32	s15, s15, s17
 876:Src/main.c    **** 
 1937              		.loc 1 876 0
 1938 071a FDEEE66A 		vcvt.s32.f32	s13, s13
 880:Src/main.c    ****     // Ressister attenation ratio '165/33'
 1939              		.loc 1 880 0
 1940 071e 87EE887A 		vdiv.f32	s14, s15, s16
 876:Src/main.c    **** 
 1941              		.loc 1 876 0
 1942 0722 16EE906A 		vmov	r6, s13	@ int
 880:Src/main.c    ****     // Ressister attenation ratio '165/33'
 1943              		.loc 1 880 0
 1944 0726 BDEEC77A 		vcvt.s32.f32	s14, s14
 876:Src/main.c    **** 
 1945              		.loc 1 876 0
 1946 072a 0680     		strh	r6, [r0]	@ movhi
 880:Src/main.c    ****     // Ressister attenation ratio '165/33'
 1947              		.loc 1 880 0
 1948 072c 9248     		ldr	r0, .L147+28
 1949 072e 17EE106A 		vmov	r6, s14	@ int
 1950 0732 0680     		strh	r6, [r0]	@ movhi
 885:Src/main.c    ****       FP_duty = 100;
 1951              		.loc 1 885 0
 1952 0734 14DC     		bgt	.L71
 1953 0736 002A     		cmp	r2, #0
 1954 0738 12DA     		bge	.L71
 888:Src/main.c    ****     }
 1955              		.loc 1 888 0
 1956 073a 8E4B     		ldr	r3, .L147+24
 1957 073c 8F4A     		ldr	r2, .L147+32
 1958 073e 1B88     		ldrh	r3, [r3]
 1959 0740 1BB2     		sxth	r3, r3
 1960 0742 82FB0312 		smull	r1, r2, r2, r3
 1961 0746 DB17     		asrs	r3, r3, #31
 1962 0748 C3EBA213 		rsb	r3, r3, r2, asr #6
 1963 074c 03EB8303 		add	r3, r3, r3, lsl #2
 1964 0750 03EB8303 		add	r3, r3, r3, lsl #2
 1965 0754 9B00     		lsls	r3, r3, #2
 1966 0756 1BB2     		sxth	r3, r3
 891:Src/main.c    ****       FP_duty = 100;
 1967              		.loc 1 891 0
 1968 0758 642B     		cmp	r3, #100
 888:Src/main.c    ****     }
 1969              		.loc 1 888 0
 1970 075a 2380     		strh	r3, [r4]	@ movhi
 891:Src/main.c    ****       FP_duty = 100;
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s 			page 63


 1971              		.loc 1 891 0
 1972 075c 40F3F882 		ble	.L133
 1973              	.L71:
 886:Src/main.c    ****     }else{
 1974              		.loc 1 886 0
 1975 0760 6423     		movs	r3, #100
 1976 0762 2380     		strh	r3, [r4]	@ movhi
 1977              	.L70:
 898:Src/main.c    **** 
 1978              		.loc 1 898 0
 1979 0764 8648     		ldr	r0, .L147+36
 1980 0766 FFF7FEFF 		bl	defi_decoder
 1981              	.LVL194:
 900:Src/main.c    **** 
 1982              		.loc 1 900 0
 1983 076a DAF80030 		ldr	r3, [r10]
 1984 076e 012B     		cmp	r3, #1
 1985 0770 8AD1     		bne	.L72
 903:Src/main.c    ****         /*
 1986              		.loc 1 903 0
 1987 0772 099B     		ldr	r3, [sp, #36]
 1988 0774 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1989 0776 012B     		cmp	r3, #1
 1990 0778 00F0B580 		beq	.L134
 1991              	.L73:
 962:Src/main.c    **** 		  meas_value[3] = DEFI_value[6];  // ECT
 1992              		.loc 1 962 0
 1993 077c 7E4A     		ldr	r2, .L147+28
 960:Src/main.c    **** 		  meas_value[1] = DEFI_value[2];  // OILP
 1994              		.loc 1 960 0
 1995 077e 2B88     		ldrh	r3, [r5]
 962:Src/main.c    **** 		  meas_value[3] = DEFI_value[6];  // ECT
 1996              		.loc 1 962 0
 1997 0780 1288     		ldrh	r2, [r2]
 960:Src/main.c    **** 		  meas_value[1] = DEFI_value[2];  // OILP
 1998              		.loc 1 960 0
 1999 0782 A9F80030 		strh	r3, [r9]	@ movhi
 961:Src/main.c    **** 			meas_value[2] = FP_volt;        // FuelPump Voltage
 2000              		.loc 1 961 0
 2001 0786 AB88     		ldrh	r3, [r5, #4]
 2002 0788 A9F80230 		strh	r3, [r9, #2]	@ movhi
 962:Src/main.c    **** 		  meas_value[3] = DEFI_value[6];  // ECT
 2003              		.loc 1 962 0
 2004 078c A9F80420 		strh	r2, [r9, #4]	@ movhi
 963:Src/main.c    **** 			meas_value[4] = DEFI_value[5];  // OILT
 2005              		.loc 1 963 0
 2006 0790 AB89     		ldrh	r3, [r5, #12]
 965:Src/main.c    **** 
 2007              		.loc 1 965 0
 2008 0792 774A     		ldr	r2, .L147+20
 963:Src/main.c    **** 			meas_value[4] = DEFI_value[5];  // OILT
 2009              		.loc 1 963 0
 2010 0794 A9F80630 		strh	r3, [r9, #6]	@ movhi
 964:Src/main.c    **** 		  meas_value[5] = O2_volt;        // O2
 2011              		.loc 1 964 0
 2012 0798 6B89     		ldrh	r3, [r5, #10]
 965:Src/main.c    **** 
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s 			page 64


 2013              		.loc 1 965 0
 2014 079a 1288     		ldrh	r2, [r2]
 964:Src/main.c    **** 		  meas_value[5] = O2_volt;        // O2
 2015              		.loc 1 964 0
 2016 079c A9F80830 		strh	r3, [r9, #8]	@ movhi
 967:Src/main.c    ****     }
 2017              		.loc 1 967 0
 2018 07a0 0023     		movs	r3, #0
 965:Src/main.c    **** 
 2019              		.loc 1 965 0
 2020 07a2 A9F80A20 		strh	r2, [r9, #10]	@ movhi
 967:Src/main.c    ****     }
 2021              		.loc 1 967 0
 2022 07a6 CAF80030 		str	r3, [r10]
 2023 07aa 6DE7     		b	.L72
 2024              	.L128:
1019:Src/main.c    ****         draw_indicators();
 2025              		.loc 1 1019 0
 2026 07ac FFF7FEFF 		bl	draw_MeasLabels
 2027              	.LVL195:
1020:Src/main.c    **** 
 2028              		.loc 1 1020 0
 2029 07b0 FFF7FEFF 		bl	draw_indicators
 2030              	.LVL196:
 2031 07b4 8AE7     		b	.L87
 2032              	.L132:
1058:Src/main.c    ****         // update Fuel Pump Voltage
 2033              		.loc 1 1058 0
 2034 07b6 6C4B     		ldr	r3, .L147+12
 2035 07b8 1E78     		ldrb	r6, [r3]	@ zero_extendqisi2
 2036 07ba 002E     		cmp	r6, #0
 2037 07bc 00F06581 		beq	.L135
1078:Src/main.c    **** 
 2038              		.loc 1 1078 0
 2039 07c0 012E     		cmp	r6, #1
 2040 07c2 00F01382 		beq	.L136
1120:Src/main.c    **** 
 2041              		.loc 1 1120 0
 2042 07c6 022E     		cmp	r6, #2
 2043 07c8 00F02D81 		beq	.L137
1134:Src/main.c    **** 
 2044              		.loc 1 1134 0
 2045 07cc 032E     		cmp	r6, #3
 2046 07ce 00F0E281 		beq	.L138
1148:Src/main.c    **** 
 2047              		.loc 1 1148 0
 2048 07d2 042E     		cmp	r6, #4
 2049 07d4 00F07E82 		beq	.L139
 2050              	.L95:
 2051              	.LVL197:
1168:Src/main.c    **** 
 2052              		.loc 1 1168 0
 2053 07d8 6248     		ldr	r0, .L147+8
 2054 07da FFF7FEFF 		bl	u8g2_SendBuffer
 2055              	.LVL198:
1170:Src/main.c    ****     }
 2056              		.loc 1 1170 0
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s 			page 65


 2057 07de 0023     		movs	r3, #0
 2058 07e0 CBF80030 		str	r3, [fp]
 2059 07e4 7EE7     		b	.L93
 2060              	.LVL199:
 2061              	.L80:
1002:Src/main.c    ****           HAL_NVIC_DisableIRQ (EXTI1_IRQn);
 2062              		.loc 1 1002 0
 2063 07e6 6749     		ldr	r1, .L147+40
 2064 07e8 6748     		ldr	r0, .L147+44
 2065 07ea FFF7FEFF 		bl	HAL_UART_Transmit_printf
 2066              	.LVL200:
1003:Src/main.c    ****           // SW "ENTER"
 2067              		.loc 1 1003 0
 2068 07ee 0720     		movs	r0, #7
 2069 07f0 FFF7FEFF 		bl	HAL_NVIC_DisableIRQ
 2070              	.LVL201:
 2071 07f4 5AE7     		b	.L78
 2072              	.L127:
 978:Src/main.c    ****           HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 2073              		.loc 1 978 0
 2074 07f6 6549     		ldr	r1, .L147+48
 2075 07f8 6348     		ldr	r0, .L147+44
 2076 07fa FFF7FEFF 		bl	HAL_UART_Transmit_printf
 2077              	.LVL202:
 979:Src/main.c    ****           // SW "UP"
 2078              		.loc 1 979 0
 2079 07fe 1720     		movs	r0, #23
 2080 0800 FFF7FEFF 		bl	HAL_NVIC_DisableIRQ
 2081              	.LVL203:
 981:Src/main.c    ****             if( mode == N_mode-1 ){
 2082              		.loc 1 981 0
 2083 0804 624B     		ldr	r3, .L147+52
 2084 0806 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2085 0808 002B     		cmp	r3, #0
 2086 080a 7FF44FAF 		bne	.L78
 982:Src/main.c    ****               mode = 0;
 2087              		.loc 1 982 0
 2088 080e 564A     		ldr	r2, .L147+12
 2089 0810 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 2090 0812 042A     		cmp	r2, #4
 2091 0814 00F0F180 		beq	.L123
 985:Src/main.c    ****             }
 2092              		.loc 1 985 0
 2093 0818 534B     		ldr	r3, .L147+12
 2094 081a 0132     		adds	r2, r2, #1
 2095 081c 1A70     		strb	r2, [r3]
 2096 081e 45E7     		b	.L78
 2097              	.L79:
 990:Src/main.c    ****           HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 2098              		.loc 1 990 0
 2099 0820 5C49     		ldr	r1, .L147+56
 2100 0822 5948     		ldr	r0, .L147+44
 2101 0824 FFF7FEFF 		bl	HAL_UART_Transmit_printf
 2102              	.LVL204:
 991:Src/main.c    ****           // SW "DOWN"
 2103              		.loc 1 991 0
 2104 0828 1720     		movs	r0, #23
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s 			page 66


 2105 082a FFF7FEFF 		bl	HAL_NVIC_DisableIRQ
 2106              	.LVL205:
 993:Src/main.c    ****             if( mode == 0 ){
 2107              		.loc 1 993 0
 2108 082e 584B     		ldr	r3, .L147+52
 2109 0830 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2110 0832 002B     		cmp	r3, #0
 2111 0834 7FF43AAF 		bne	.L78
 994:Src/main.c    ****               mode = N_mode-1;
 2112              		.loc 1 994 0
 2113 0838 4B4A     		ldr	r2, .L147+12
 2114 083a 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 2115 083c 002B     		cmp	r3, #0
 2116 083e 40F0DB80 		bne	.L85
 995:Src/main.c    ****             }else{
 2117              		.loc 1 995 0
 2118 0842 0423     		movs	r3, #4
 2119 0844 1370     		strb	r3, [r2]
 2120 0846 31E7     		b	.L78
 2121              	.L129:
 2122 0848 534B     		ldr	r3, .L147+60
 2123 084a 544F     		ldr	r7, .L147+64
 2124 084c 0893     		str	r3, [sp, #32]
1022:Src/main.c    ****         for( n=0; n<N_meas_C; n++ ){
 2125              		.loc 1 1022 0
 2126 084e 0226     		movs	r6, #2
 2127              	.L89:
 2128              	.LVL206:
 2129              	.LBB73:
1026:Src/main.c    ****         }
 2130              		.loc 1 1026 0 discriminator 3
 2131 0850 089B     		ldr	r3, [sp, #32]
 2132 0852 0297     		str	r7, [sp, #8]
 2133 0854 0D22     		movs	r2, #13
 2134 0856 0193     		str	r3, [sp, #4]
 2135 0858 0092     		str	r2, [sp]
 2136 085a 3C23     		movs	r3, #60
 2137 085c 3246     		mov	r2, r6
 2138 085e 4421     		movs	r1, #68
 2139 0860 4048     		ldr	r0, .L147+8
 2140 0862 FFF7FEFF 		bl	draw_MeasLabelUnit
 2141              	.LVL207:
 2142 0866 0D36     		adds	r6, r6, #13
 2143              	.LVL208:
 2144 0868 089B     		ldr	r3, [sp, #32]
 2145 086a F6B2     		uxtb	r6, r6
 2146 086c 0733     		adds	r3, r3, #7
1023:Src/main.c    ****           x = meas_C_x;
 2147              		.loc 1 1023 0 discriminator 3
 2148 086e 362E     		cmp	r6, #54
 2149 0870 0893     		str	r3, [sp, #32]
 2150 0872 07F10507 		add	r7, r7, #5
 2151 0876 EBD1     		bne	.L89
 2152 0878 494B     		ldr	r3, .L147+68
 2153 087a 4A4F     		ldr	r7, .L147+72
 2154 087c 0893     		str	r3, [sp, #32]
1023:Src/main.c    ****           x = meas_C_x;
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s 			page 67


 2155              		.loc 1 1023 0 is_stmt 0
 2156 087e 4826     		movs	r6, #72
 2157 0880 0123     		movs	r3, #1
 2158              	.L91:
 2159              	.LVL209:
1030:Src/main.c    ****         }
 2160              		.loc 1 1030 0 is_stmt 1 discriminator 3
 2161 0882 CDE90137 		strd	r3, r7, [sp, #4]
 2162 0886 3146     		mov	r1, r6
 2163 0888 0923     		movs	r3, #9
 2164 088a 1D36     		adds	r6, r6, #29
 2165 088c 0093     		str	r3, [sp]
 2166 088e 3522     		movs	r2, #53
 2167 0890 1B23     		movs	r3, #27
 2168 0892 3448     		ldr	r0, .L147+8
 2169 0894 F6B2     		uxtb	r6, r6
 2170 0896 FFF7FEFF 		bl	draw_IndicatorBox
 2171              	.LVL210:
1029:Src/main.c    ****           draw_IndicatorBox(&u8g2, idct_x+(idct_width+2)*n, idct_y, idct_width, idct_height, idct_s
 2172              		.loc 1 1029 0 discriminator 3
 2173 089a BC2E     		cmp	r6, #188
 2174 089c 07F10507 		add	r7, r7, #5
 2175 08a0 04D0     		beq	.L90
 2176 08a2 089A     		ldr	r2, [sp, #32]
 2177 08a4 12F8013B 		ldrb	r3, [r2], #1	@ zero_extendqisi2
 2178 08a8 0892     		str	r2, [sp, #32]
 2179              	.LVL211:
 2180 08aa EAE7     		b	.L91
 2181              	.LVL212:
 2182              	.L90:
1032:Src/main.c    **** //        draw_CircularMeter_Init(26, 26, 26, 3, -60, 300, 10, 20, -1, -80, 120);
 2183              		.loc 1 1032 0
 2184 08ac 7822     		movs	r2, #120
 2185 08ae 6FF04F03 		mvn	r3, #79
 2186 08b2 4FF0FF31 		mov	r1, #-1
 2187 08b6 0692     		str	r2, [sp, #24]
 2188 08b8 0593     		str	r3, [sp, #20]
 2189 08ba 0491     		str	r1, [sp, #16]
 2190 08bc 1426     		movs	r6, #20
 2191 08be 2021     		movs	r1, #32
 2192 08c0 0A20     		movs	r0, #10
 2193 08c2 4FF49672 		mov	r2, #300
 2194 08c6 6FF03B03 		mvn	r3, #59
 2195 08ca CDE90032 		strd	r3, r2, [sp]
 2196 08ce CDE90206 		strd	r0, r6, [sp, #8]
 2197 08d2 0323     		movs	r3, #3
 2198 08d4 0846     		mov	r0, r1
 2199 08d6 1F22     		movs	r2, #31
 2200 08d8 FFF7FEFF 		bl	draw_CircularMeter_Init
 2201              	.LVL213:
1034:Src/main.c    **** /*
 2202              		.loc 1 1034 0
 2203 08dc 0021     		movs	r1, #0
 2204 08de 2148     		ldr	r0, .L147+8
 2205 08e0 FFF7FEFF 		bl	draw_CircularMeter
 2206              	.LVL214:
 2207              	.LBE73:
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s 			page 68


 2208 08e4 F2E6     		b	.L87
 2209              	.LVL215:
 2210              	.L134:
 919:Src/main.c    ****         Gsens_Y1 = ADXL345_RegRead_1byte(ADXL0_ADDR, 0x35); // Check "DATAY1" (MSB side)
 2211              		.loc 1 919 0
 2212 08e6 3321     		movs	r1, #51
 2213 08e8 1D20     		movs	r0, #29
 2214 08ea FFF7FEFF 		bl	ADXL345_RegRead_1byte
 2215              	.LVL216:
 2216 08ee 2E4E     		ldr	r6, .L147+76
 925:Src/main.c    **** 
 2217              		.loc 1 925 0
 2218 08f0 2E4F     		ldr	r7, .L147+80
 919:Src/main.c    ****         Gsens_Y1 = ADXL345_RegRead_1byte(ADXL0_ADDR, 0x35); // Check "DATAY1" (MSB side)
 2219              		.loc 1 919 0
 2220 08f2 3070     		strb	r0, [r6]
 920:Src/main.c    ****         Gsens_Z1 = ADXL345_RegRead_1byte(ADXL0_ADDR, 0x37); // Check "DATAZ1" (MSB side)
 2221              		.loc 1 920 0
 2222 08f4 3521     		movs	r1, #53
 2223 08f6 1D20     		movs	r0, #29
 2224 08f8 FFF7FEFF 		bl	ADXL345_RegRead_1byte
 2225              	.LVL217:
 2226 08fc 2C4B     		ldr	r3, .L147+84
 921:Src/main.c    ****         // Acceration 1G = 100
 2227              		.loc 1 921 0
 2228 08fe 3721     		movs	r1, #55
 920:Src/main.c    ****         Gsens_Z1 = ADXL345_RegRead_1byte(ADXL0_ADDR, 0x37); // Check "DATAZ1" (MSB side)
 2229              		.loc 1 920 0
 2230 0900 1870     		strb	r0, [r3]
 921:Src/main.c    ****         // Acceration 1G = 100
 2231              		.loc 1 921 0
 2232 0902 1D20     		movs	r0, #29
 2233 0904 FFF7FEFF 		bl	ADXL345_RegRead_1byte
 2234              	.LVL218:
 2235 0908 2A4A     		ldr	r2, .L147+88
 923:Src/main.c    ****         Gsens_Y = 400 * (int8_t)Gsens_Y1 / 128; // unsigned->signed & scaling
 2236              		.loc 1 923 0
 2237 090a 96F90030 		ldrsb	r3, [r6]
 921:Src/main.c    ****         // Acceration 1G = 100
 2238              		.loc 1 921 0
 2239 090e 1070     		strb	r0, [r2]
 923:Src/main.c    ****         Gsens_Y = 400 * (int8_t)Gsens_Y1 / 128; // unsigned->signed & scaling
 2240              		.loc 1 923 0
 2241 0910 4FF4C872 		mov	r2, #400
 2242 0914 02FB03F2 		mul	r2, r2, r3
 924:Src/main.c    ****         Gsens_Z = 400 * (int8_t)Gsens_Z1 / 128; // unsigned->signed & scaling
 2243              		.loc 1 924 0
 2244 0918 254B     		ldr	r3, .L147+84
 2245 091a 93F90010 		ldrsb	r1, [r3]
 923:Src/main.c    ****         Gsens_Y = 400 * (int8_t)Gsens_Y1 / 128; // unsigned->signed & scaling
 2246              		.loc 1 923 0
 2247 091e 002A     		cmp	r2, #0
 924:Src/main.c    ****         Gsens_Z = 400 * (int8_t)Gsens_Z1 / 128; // unsigned->signed & scaling
 2248              		.loc 1 924 0
 2249 0920 4FF4C873 		mov	r3, #400
 2250 0924 03FB01F3 		mul	r3, r3, r1
 923:Src/main.c    ****         Gsens_Y = 400 * (int8_t)Gsens_Y1 / 128; // unsigned->signed & scaling
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s 			page 69


 2251              		.loc 1 923 0
 2252 0928 B8BF     		it	lt
 2253 092a 7F32     		addlt	r2, r2, #127
 2254 092c 2249     		ldr	r1, .L147+92
 2255 092e D211     		asrs	r2, r2, #7
 2256 0930 0A80     		strh	r2, [r1]	@ movhi
 925:Src/main.c    **** 
 2257              		.loc 1 925 0
 2258 0932 4FF4C871 		mov	r1, #400
 2259 0936 01FB00F1 		mul	r1, r1, r0
 924:Src/main.c    ****         Gsens_Z = 400 * (int8_t)Gsens_Z1 / 128; // unsigned->signed & scaling
 2260              		.loc 1 924 0
 2261 093a 002B     		cmp	r3, #0
 2262 093c B8BF     		it	lt
 2263 093e 7F33     		addlt	r3, r3, #127
 925:Src/main.c    **** 
 2264              		.loc 1 925 0
 2265 0940 0029     		cmp	r1, #0
 2266 0942 B8BF     		it	lt
 2267 0944 7F31     		addlt	r1, r1, #127
 924:Src/main.c    ****         Gsens_Z = 400 * (int8_t)Gsens_Z1 / 128; // unsigned->signed & scaling
 2268              		.loc 1 924 0
 2269 0946 1D48     		ldr	r0, .L147+96
 925:Src/main.c    **** 
 2270              		.loc 1 925 0
 2271 0948 CE11     		asrs	r6, r1, #7
 924:Src/main.c    ****         Gsens_Z = 400 * (int8_t)Gsens_Z1 / 128; // unsigned->signed & scaling
 2272              		.loc 1 924 0
 2273 094a DB11     		asrs	r3, r3, #7
 2274 094c 0380     		strh	r3, [r0]	@ movhi
 927:Src/main.c    ****         
 2275              		.loc 1 927 0
 2276 094e 1C49     		ldr	r1, .L147+100
 2277 0950 0096     		str	r6, [sp]
 2278 0952 0D48     		ldr	r0, .L147+44
 925:Src/main.c    **** 
 2279              		.loc 1 925 0
 2280 0954 3E80     		strh	r6, [r7]	@ movhi
 927:Src/main.c    ****         
 2281              		.loc 1 927 0
 2282 0956 FFF7FEFF 		bl	HAL_UART_Transmit_printf
 2283              	.LVL219:
 2284 095a 0FE7     		b	.L73
 2285              	.L148:
 2286              		.align	2
 2287              	.L147:
 2288 095c 002C0140 		.word	1073818624
 2289 0960 00000000 		.word	flag_sw
 2290 0964 00000000 		.word	u8g2
 2291 0968 00000000 		.word	mode
 2292 096c 00100040 		.word	1073745920
 2293 0970 00000000 		.word	.LANCHOR5
 2294 0974 00000000 		.word	rpm
 2295 0978 00000000 		.word	.LANCHOR6
 2296 097c F1197605 		.word	91625969
 2297 0980 00000000 		.word	UART1_RxData
 2298 0984 68000000 		.word	.LC9
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s 			page 70


 2299 0988 00000000 		.word	huart2
 2300 098c 5C000000 		.word	.LC7
 2301 0990 00000000 		.word	setting
 2302 0994 60000000 		.word	.LC8
 2303 0998 00000000 		.word	.LANCHOR2
 2304 099c 00000000 		.word	.LANCHOR1
 2305 09a0 01000000 		.word	.LANCHOR8+1
 2306 09a4 00000000 		.word	.LANCHOR0
 2307 09a8 00000000 		.word	Gsens_X1
 2308 09ac 00000000 		.word	Gsens_Z
 2309 09b0 00000000 		.word	Gsens_Y1
 2310 09b4 00000000 		.word	Gsens_Z1
 2311 09b8 00000000 		.word	Gsens_X
 2312 09bc 00000000 		.word	Gsens_Y
 2313 09c0 50000000 		.word	.LC6
 2314              	.L130:
 2315              	.LBB74:
1041:Src/main.c    ****         draw_MeasLabelUnit(&u8g2, 0, 0, 64, 13, "MAP", "kPa");
 2316              		.loc 1 1041 0
 2317 09c4 3420     		movs	r0, #52
 2318 09c6 6FF06301 		mvn	r1, #99
 2319 09ca C822     		movs	r2, #200
 2320 09cc 0323     		movs	r3, #3
 2321 09ce 8DE80F00 		stm	sp, {r0, r1, r2, r3}
 2322 09d2 8023     		movs	r3, #128
 2323 09d4 0D22     		movs	r2, #13
 2324 09d6 0021     		movs	r1, #0
 2325 09d8 AD48     		ldr	r0, .L149
 2326 09da FFF7FEFF 		bl	draw_Wave_axis
 2327              	.LVL220:
1042:Src/main.c    **** 
 2328              		.loc 1 1042 0
 2329 09de AD49     		ldr	r1, .L149+4
 2330 09e0 0291     		str	r1, [sp, #8]
 2331 09e2 AD49     		ldr	r1, .L149+8
 2332 09e4 0D23     		movs	r3, #13
 2333 09e6 0022     		movs	r2, #0
 2334              	.L124:
 2335              	.LBE74:
 2336              	.LBB75:
1046:Src/main.c    **** 
 2337              		.loc 1 1046 0
 2338 09e8 CDE90031 		strd	r3, r1, [sp]
 2339 09ec A848     		ldr	r0, .L149
 2340 09ee 1146     		mov	r1, r2
 2341 09f0 4023     		movs	r3, #64
 2342 09f2 FFF7FEFF 		bl	draw_MeasLabelUnit
 2343              	.LVL221:
 2344 09f6 69E6     		b	.L87
 2345              	.L85:
 2346              	.LBE75:
 997:Src/main.c    ****             }
 2347              		.loc 1 997 0
 2348 09f8 013B     		subs	r3, r3, #1
 2349              	.L123:
 2350 09fa A84A     		ldr	r2, .L149+12
 2351 09fc 1370     		strb	r3, [r2]
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s 			page 71


 2352 09fe 55E6     		b	.L78
 2353              	.L131:
 2354              	.LBB76:
1045:Src/main.c    ****         draw_MeasLabelUnit(&u8g2, 0, 0, 64, 13, "LatG", "G");
 2355              		.loc 1 1045 0
 2356 0a00 3420     		movs	r0, #52
 2357 0a02 6FF0C701 		mvn	r1, #199
 2358 0a06 C822     		movs	r2, #200
 2359 0a08 0423     		movs	r3, #4
 2360 0a0a 8DE80F00 		stm	sp, {r0, r1, r2, r3}
 2361 0a0e 8023     		movs	r3, #128
 2362 0a10 0D22     		movs	r2, #13
 2363 0a12 0021     		movs	r1, #0
 2364 0a14 9E48     		ldr	r0, .L149
 2365 0a16 FFF7FEFF 		bl	draw_Wave_axis
 2366              	.LVL222:
1046:Src/main.c    **** 
 2367              		.loc 1 1046 0
 2368 0a1a A149     		ldr	r1, .L149+16
 2369 0a1c 0291     		str	r1, [sp, #8]
 2370 0a1e 0D23     		movs	r3, #13
 2371 0a20 0022     		movs	r2, #0
 2372 0a22 A049     		ldr	r1, .L149+20
 2373 0a24 E0E7     		b	.L124
 2374              	.L137:
 2375              	.LBE76:
 2376              	.LBB77:
1122:Src/main.c    ****           circular_buffer_index--;
 2377              		.loc 1 1122 0
 2378 0a26 0A9B     		ldr	r3, [sp, #40]
 2379 0a28 002B     		cmp	r3, #0
 2380 0a2a 00F0DB80 		beq	.L108
1123:Src/main.c    ****         }else{
 2381              		.loc 1 1123 0
 2382 0a2e 013B     		subs	r3, r3, #1
 2383 0a30 9BB2     		uxth	r3, r3
 2384 0a32 0A93     		str	r3, [sp, #40]
 2385              	.LVL223:
 2386 0a34 1E46     		mov	r6, r3
 2387              	.LVL224:
 2388              	.L100:
1130:Src/main.c    ****         draw_Value(&u8g2, 0, 0, 64, 13, circular_buffer[circular_buffer_index], 3, 2, 1, "kPa");
 2389              		.loc 1 1130 0
 2390 0a36 6FF06302 		mvn	r2, #99
 2391 0a3a 3423     		movs	r3, #52
 2392 0a3c CDE90032 		strd	r3, r2, [sp]
1127:Src/main.c    **** 
 2393              		.loc 1 1127 0
 2394 0a40 0EAA     		add	r2, sp, #56
 2395 0a42 B9F80030 		ldrh	r3, [r9]
1130:Src/main.c    ****         draw_Value(&u8g2, 0, 0, 64, 13, circular_buffer[circular_buffer_index], 3, 2, 1, "kPa");
 2396              		.loc 1 1130 0
 2397 0a46 0496     		str	r6, [sp, #16]
 2398 0a48 C821     		movs	r1, #200
 2399 0a4a 0EA8     		add	r0, sp, #56
 2400 0a4c CDE90210 		strd	r1, r0, [sp, #8]
1127:Src/main.c    **** 
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s 			page 72


 2401              		.loc 1 1127 0
 2402 0a50 22F81630 		strh	r3, [r2, r6, lsl #1]	@ movhi
1130:Src/main.c    ****         draw_Value(&u8g2, 0, 0, 64, 13, circular_buffer[circular_buffer_index], 3, 2, 1, "kPa");
 2403              		.loc 1 1130 0
 2404 0a54 0021     		movs	r1, #0
 2405 0a56 8023     		movs	r3, #128
 2406 0a58 0D22     		movs	r2, #13
 2407 0a5a 8D48     		ldr	r0, .L149
1131:Src/main.c    **** 
 2408              		.loc 1 1131 0
 2409 0a5c 8D4F     		ldr	r7, .L149+4
1130:Src/main.c    ****         draw_Value(&u8g2, 0, 0, 64, 13, circular_buffer[circular_buffer_index], 3, 2, 1, "kPa");
 2410              		.loc 1 1130 0
 2411 0a5e FFF7FEFF 		bl	draw_Wave
 2412              	.LVL225:
1131:Src/main.c    **** 
 2413              		.loc 1 1131 0
 2414 0a62 0EAB     		add	r3, sp, #56
 2415 0a64 0220     		movs	r0, #2
 2416 0a66 33F91630 		ldrsh	r3, [r3, r6, lsl #1]
 2417 0a6a 0193     		str	r3, [sp, #4]
 2418 0a6c 0126     		movs	r6, #1
 2419 0a6e 0321     		movs	r1, #3
 2420 0a70 0D23     		movs	r3, #13
 2421 0a72 0022     		movs	r2, #0
 2422              	.L125:
 2423              	.LBE77:
 2424              	.LBB78:
1145:Src/main.c    **** 
 2425              		.loc 1 1145 0
 2426 0a74 CDE90210 		strd	r1, r0, [sp, #8]
 2427 0a78 0093     		str	r3, [sp]
 2428 0a7a CDE90467 		strd	r6, r7, [sp, #16]
 2429 0a7e 1146     		mov	r1, r2
 2430 0a80 4023     		movs	r3, #64
 2431 0a82 8348     		ldr	r0, .L149
 2432 0a84 FFF7FEFF 		bl	draw_Value
 2433              	.LVL226:
 2434              	.LBE78:
 2435 0a88 A6E6     		b	.L95
 2436              	.LVL227:
 2437              	.L135:
1060:Src/main.c    **** 
 2438              		.loc 1 1060 0
 2439 0a8a B4F90030 		ldrsh	r3, [r4]
 2440 0a8e 864A     		ldr	r2, .L149+24
 2441 0a90 0193     		str	r3, [sp, #4]
 2442 0a92 0327     		movs	r7, #3
 2443 0a94 0C23     		movs	r3, #12
 2444 0a96 CDE90462 		strd	r6, r2, [sp, #16]
 2445 0a9a CDE90276 		strd	r7, r6, [sp, #8]
 2446 0a9e 0093     		str	r3, [sp]
 2447 0aa0 3422     		movs	r2, #52
 2448 0aa2 4623     		movs	r3, #70
 2449 0aa4 3146     		mov	r1, r6
 2450 0aa6 7A48     		ldr	r0, .L149
 2451 0aa8 FFF7FEFF 		bl	draw_Value
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s 			page 73


 2452              	.LVL228:
1063:Src/main.c    **** 
 2453              		.loc 1 1063 0
 2454 0aac 7F4B     		ldr	r3, .L149+28
 2455 0aae 7848     		ldr	r0, .L149
 2456 0ab0 1988     		ldrh	r1, [r3]
 2457 0ab2 0191     		str	r1, [sp, #4]
 2458 0ab4 42F22832 		movw	r2, #9000
 2459 0ab8 0E23     		movs	r3, #14
 2460 0aba 0392     		str	r2, [sp, #12]
 2461 0abc 0093     		str	r3, [sp]
 2462 0abe 3246     		mov	r2, r6
 2463 0ac0 8023     		movs	r3, #128
 2464 0ac2 3146     		mov	r1, r6
 2465 0ac4 0296     		str	r6, [sp, #8]
 2466 0ac6 FFF7FEFF 		bl	draw_BarGraph
 2467              	.LVL229:
1069:Src/main.c    ****         }
 2468              		.loc 1 1069 0
 2469 0aca 0C21     		movs	r1, #12
 2470 0acc 0091     		str	r1, [sp]
 2471 0ace 7849     		ldr	r1, .L149+32
 2472 0ad0 B9F90030 		ldrsh	r3, [r9]
 2473 0ad4 0591     		str	r1, [sp, #20]
 2474 0ad6 0222     		movs	r2, #2
 2475 0ad8 0121     		movs	r1, #1
 2476 0ada CDE90321 		strd	r2, r1, [sp, #12]
 2477 0ade 0297     		str	r7, [sp, #8]
 2478 0ae0 0193     		str	r3, [sp, #4]
 2479 0ae2 1022     		movs	r2, #16
 2480 0ae4 4623     		movs	r3, #70
 2481 0ae6 3146     		mov	r1, r6
 2482 0ae8 6948     		ldr	r0, .L149
 2483 0aea FFF7FEFF 		bl	draw_Value
 2484              	.LVL230:
 2485 0aee 0122     		movs	r2, #1
 2486 0af0 CDE90272 		strd	r7, r2, [sp, #8]
 2487 0af4 0C22     		movs	r2, #12
 2488 0af6 0092     		str	r2, [sp]
 2489 0af8 6E4A     		ldr	r2, .L149+36
 2490 0afa B9F90230 		ldrsh	r3, [r9, #2]
 2491 0afe 0193     		str	r3, [sp, #4]
 2492 0b00 CDE90462 		strd	r6, r2, [sp, #16]
 2493 0b04 4623     		movs	r3, #70
 2494 0b06 1C22     		movs	r2, #28
 2495 0b08 3146     		mov	r1, r6
 2496 0b0a 6148     		ldr	r0, .L149
 2497 0b0c FFF7FEFF 		bl	draw_Value
 2498              	.LVL231:
 2499 0b10 0122     		movs	r2, #1
 2500 0b12 CDE90272 		strd	r7, r2, [sp, #8]
 2501 0b16 0C22     		movs	r2, #12
 2502 0b18 0092     		str	r2, [sp]
 2503 0b1a 674A     		ldr	r2, .L149+40
 2504 0b1c B9F90430 		ldrsh	r3, [r9, #4]
 2505 0b20 0B97     		str	r7, [sp, #44]
 2506 0b22 CDE90462 		strd	r6, r2, [sp, #16]
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s 			page 74


 2507 0b26 0193     		str	r3, [sp, #4]
 2508 0b28 3146     		mov	r1, r6
 2509 0b2a 5948     		ldr	r0, .L149
1074:Src/main.c    ****         }
 2510              		.loc 1 1074 0
 2511 0b2c 0C27     		movs	r7, #12
1069:Src/main.c    ****         }
 2512              		.loc 1 1069 0
 2513 0b2e 4623     		movs	r3, #70
 2514 0b30 2822     		movs	r2, #40
1074:Src/main.c    ****         }
 2515              		.loc 1 1074 0
 2516 0b32 0897     		str	r7, [sp, #32]
1069:Src/main.c    ****         }
 2517              		.loc 1 1069 0
 2518 0b34 FFF7FEFF 		bl	draw_Value
 2519              	.LVL232:
 2520 0b38 0B98     		ldr	r0, [sp, #44]
 2521 0b3a 3146     		mov	r1, r6
 2522 0b3c 0746     		mov	r7, r0
 2523              	.LVL233:
 2524              	.L96:
1073:Src/main.c    ****           draw_Value(&u8g2, x, y, meas_width2, meas_height, meas_value[n], meas_digit[n], meas_frac
 2525              		.loc 1 1073 0 discriminator 3
 2526 0b3e 5F4A     		ldr	r2, .L149+44
1074:Src/main.c    ****         }
 2527              		.loc 1 1074 0 discriminator 3
 2528 0b40 0491     		str	r1, [sp, #16]
1073:Src/main.c    ****           draw_Value(&u8g2, x, y, meas_width2, meas_height, meas_value[n], meas_digit[n], meas_frac
 2529              		.loc 1 1073 0 discriminator 3
 2530 0b42 FBB2     		uxtb	r3, r7
 2531 0b44 A2FB03C2 		umull	ip, r2, r2, r3
 2532 0b48 5208     		lsrs	r2, r2, #1
 2533 0b4a 02EB4202 		add	r2, r2, r2, lsl #1
 2534 0b4e 9B1A     		subs	r3, r3, r2
 2535 0b50 03EB4303 		add	r3, r3, r3, lsl #1
 2536 0b54 9A00     		lsls	r2, r3, #2
 2537 0b56 02F1100C 		add	ip, r2, #16
1074:Src/main.c    ****         }
 2538              		.loc 1 1074 0 discriminator 3
 2539 0b5a 554A     		ldr	r2, .L149+32
 2540 0b5c 39F91710 		ldrsh	r1, [r9, r7, lsl #1]
 2541 0b60 0191     		str	r1, [sp, #4]
 2542 0b62 07EB8703 		add	r3, r7, r7, lsl #2
 2543 0b66 1344     		add	r3, r3, r2
 2544 0b68 089A     		ldr	r2, [sp, #32]
 2545 0b6a 0092     		str	r2, [sp]
 2546 0b6c CDE90206 		strd	r0, r6, [sp, #8]
 2547 0b70 0593     		str	r3, [sp, #20]
 2548 0b72 0CF0FC02 		and	r2, ip, #252
 2549 0b76 0137     		adds	r7, r7, #1
 2550              	.LVL234:
 2551 0b78 3823     		movs	r3, #56
 2552 0b7a 4821     		movs	r1, #72
 2553 0b7c 4448     		ldr	r0, .L149
 2554 0b7e FFF7FEFF 		bl	draw_Value
 2555              	.LVL235:
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s 			page 75


1071:Src/main.c    ****           x = meas_width1 + meas_x + meas_x_offset;
 2556              		.loc 1 1071 0 discriminator 3
 2557 0b82 062F     		cmp	r7, #6
 2558 0b84 3FF428AE 		beq	.L95
 2559 0b88 4D4B     		ldr	r3, .L149+48
 2560 0b8a D85D     		ldrb	r0, [r3, r7]	@ zero_extendqisi2
 2561 0b8c 4D4B     		ldr	r3, .L149+52
 2562 0b8e DE5D     		ldrb	r6, [r3, r7]	@ zero_extendqisi2
 2563 0b90 4D4B     		ldr	r3, .L149+56
 2564 0b92 D95D     		ldrb	r1, [r3, r7]	@ zero_extendqisi2
 2565 0b94 D3E7     		b	.L96
 2566              	.LVL236:
 2567              	.L138:
 2568              	.LBB79:
1136:Src/main.c    ****           circular_buffer_index--;
 2569              		.loc 1 1136 0
 2570 0b96 0A9B     		ldr	r3, [sp, #40]
 2571 0b98 002B     		cmp	r3, #0
 2572 0b9a 74D0     		beq	.L109
1137:Src/main.c    ****         }else{
 2573              		.loc 1 1137 0
 2574 0b9c 013B     		subs	r3, r3, #1
 2575 0b9e 9BB2     		uxth	r3, r3
 2576 0ba0 0A93     		str	r3, [sp, #40]
 2577              	.LVL237:
 2578 0ba2 1E46     		mov	r6, r3
 2579              	.LVL238:
 2580              	.L102:
1144:Src/main.c    ****         draw_Value(&u8g2, 0, 0, 64, 13, circular_buffer[circular_buffer_index], 3, 2, 1, "G");
 2581              		.loc 1 1144 0
 2582 0ba4 C821     		movs	r1, #200
 2583 0ba6 6FF0C702 		mvn	r2, #199
 2584 0baa 3423     		movs	r3, #52
 2585 0bac 0EA8     		add	r0, sp, #56
 2586 0bae CDE90210 		strd	r1, r0, [sp, #8]
 2587 0bb2 CDE90032 		strd	r3, r2, [sp]
1141:Src/main.c    **** 
 2588              		.loc 1 1141 0
 2589 0bb6 454B     		ldr	r3, .L149+60
1144:Src/main.c    ****         draw_Value(&u8g2, 0, 0, 64, 13, circular_buffer[circular_buffer_index], 3, 2, 1, "G");
 2590              		.loc 1 1144 0
 2591 0bb8 0496     		str	r6, [sp, #16]
1141:Src/main.c    **** 
 2592              		.loc 1 1141 0
 2593 0bba 0EAA     		add	r2, sp, #56
 2594 0bbc 1B88     		ldrh	r3, [r3]
 2595 0bbe 22F81630 		strh	r3, [r2, r6, lsl #1]	@ movhi
1144:Src/main.c    ****         draw_Value(&u8g2, 0, 0, 64, 13, circular_buffer[circular_buffer_index], 3, 2, 1, "G");
 2596              		.loc 1 1144 0
 2597 0bc2 0021     		movs	r1, #0
 2598 0bc4 8023     		movs	r3, #128
 2599 0bc6 0D22     		movs	r2, #13
 2600 0bc8 3148     		ldr	r0, .L149
1145:Src/main.c    **** 
 2601              		.loc 1 1145 0
 2602 0bca 354F     		ldr	r7, .L149+16
1144:Src/main.c    ****         draw_Value(&u8g2, 0, 0, 64, 13, circular_buffer[circular_buffer_index], 3, 2, 1, "G");
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s 			page 76


 2603              		.loc 1 1144 0
 2604 0bcc FFF7FEFF 		bl	draw_Wave
 2605              	.LVL239:
1145:Src/main.c    **** 
 2606              		.loc 1 1145 0
 2607 0bd0 0EAB     		add	r3, sp, #56
 2608 0bd2 0220     		movs	r0, #2
 2609 0bd4 33F91630 		ldrsh	r3, [r3, r6, lsl #1]
 2610 0bd8 0193     		str	r3, [sp, #4]
 2611 0bda 0126     		movs	r6, #1
 2612 0bdc 0321     		movs	r1, #3
 2613 0bde 0D23     		movs	r3, #13
 2614 0be0 0022     		movs	r2, #0
 2615 0be2 47E7     		b	.L125
 2616              	.LVL240:
 2617              	.L108:
 2618              	.LBE79:
 2619              	.LBB80:
 2620 0be4 8023     		movs	r3, #128
 2621 0be6 0A93     		str	r3, [sp, #40]
1125:Src/main.c    ****         }
 2622              		.loc 1 1125 0
 2623 0be8 1E46     		mov	r6, r3
 2624 0bea 24E7     		b	.L100
 2625              	.L136:
 2626              	.LBE80:
 2627              	.LBB81:
1080:Src/main.c    ****         
 2628              		.loc 1 1080 0
 2629 0bec B9F90010 		ldrsh	r1, [r9]
 2630 0bf0 2748     		ldr	r0, .L149
 2631 0bf2 FFF7FEFF 		bl	draw_CircularMeter
 2632              	.LVL241:
1082:Src/main.c    ****         draw_MeasUnit(&u8g2, 38, 40, 28, 16, "kPa");
 2633              		.loc 1 1082 0
 2634 0bf6 B9F90030 		ldrsh	r3, [r9]
 2635 0bfa 354A     		ldr	r2, .L149+64
 2636 0bfc 0592     		str	r2, [sp, #20]
 2637 0bfe 4FF0020C 		mov	ip, #2
 2638 0c02 1027     		movs	r7, #16
 2639 0c04 0322     		movs	r2, #3
 2640 0c06 CDE903C6 		strd	ip, r6, [sp, #12]
 2641 0c0a CDE90132 		strd	r3, r2, [sp, #4]
 2642 0c0e 0097     		str	r7, [sp]
 2643 0c10 1E23     		movs	r3, #30
 2644 0c12 2122     		movs	r2, #33
 2645 0c14 2421     		movs	r1, #36
 2646 0c16 1E48     		ldr	r0, .L149
1083:Src/main.c    **** /*        
 2647              		.loc 1 1083 0
 2648 0c18 CDF820C0 		str	ip, [sp, #32]
1082:Src/main.c    ****         draw_MeasUnit(&u8g2, 38, 40, 28, 16, "kPa");
 2649              		.loc 1 1082 0
 2650 0c1c FFF7FEFF 		bl	draw_Value
 2651              	.LVL242:
1083:Src/main.c    **** /*        
 2652              		.loc 1 1083 0
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s 			page 77


 2653 0c20 1C4B     		ldr	r3, .L149+4
 2654 0c22 0097     		str	r7, [sp]
 2655 0c24 0193     		str	r3, [sp, #4]
 2656 0c26 2822     		movs	r2, #40
 2657 0c28 2621     		movs	r1, #38
 2658 0c2a 1948     		ldr	r0, .L149
 2659 0c2c 1C23     		movs	r3, #28
 2660 0c2e FFF7FEFF 		bl	draw_MeasUnit
 2661              	.LVL243:
 2662 0c32 0899     		ldr	r1, [sp, #32]
 2663 0c34 3046     		mov	r0, r6
 2664 0c36 0322     		movs	r2, #3
1093:Src/main.c    ****         }
 2665              		.loc 1 1093 0
 2666 0c38 8446     		mov	ip, r0
1083:Src/main.c    **** /*        
 2667              		.loc 1 1083 0
 2668 0c3a 0027     		movs	r7, #0
1093:Src/main.c    ****         }
 2669              		.loc 1 1093 0
 2670 0c3c 0846     		mov	r0, r1
 2671 0c3e 0D26     		movs	r6, #13
 2672 0c40 1146     		mov	r1, r2
 2673              	.LVL244:
 2674              	.L98:
1093:Src/main.c    ****         }
 2675              		.loc 1 1093 0 is_stmt 0 discriminator 3
 2676 0c42 1B4A     		ldr	r2, .L149+32
 2677 0c44 0291     		str	r1, [sp, #8]
 2678 0c46 07EB8703 		add	r3, r7, r7, lsl #2
 2679 0c4a 1344     		add	r3, r3, r2
 2680 0c4c 39F91720 		ldrsh	r2, [r9, r7, lsl #1]
 2681 0c50 0593     		str	r3, [sp, #20]
 2682 0c52 CDE9030C 		strd	r0, ip, [sp, #12]
 2683 0c56 0192     		str	r2, [sp, #4]
 2684 0c58 3C23     		movs	r3, #60
 2685 0c5a 0096     		str	r6, [sp]
 2686 0c5c 089A     		ldr	r2, [sp, #32]
 2687 0c5e 0C48     		ldr	r0, .L149
 2688 0c60 4421     		movs	r1, #68
 2689 0c62 FFF7FEFF 		bl	draw_Value
 2690              	.LVL245:
 2691 0c66 089B     		ldr	r3, [sp, #32]
 2692 0c68 0137     		adds	r7, r7, #1
 2693 0c6a 0D33     		adds	r3, r3, #13
 2694 0c6c DBB2     		uxtb	r3, r3
1090:Src/main.c    ****           x = meas_C_x;
 2695              		.loc 1 1090 0 is_stmt 1 discriminator 3
 2696 0c6e 042F     		cmp	r7, #4
 2697 0c70 0893     		str	r3, [sp, #32]
 2698              	.LVL246:
 2699 0c72 3FF4B1AD 		beq	.L95
 2700 0c76 124B     		ldr	r3, .L149+48
 2701 0c78 D95D     		ldrb	r1, [r3, r7]	@ zero_extendqisi2
 2702 0c7a 124B     		ldr	r3, .L149+52
 2703 0c7c D85D     		ldrb	r0, [r3, r7]	@ zero_extendqisi2
 2704 0c7e 124B     		ldr	r3, .L149+56
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s 			page 78


 2705 0c80 13F807C0 		ldrb	ip, [r3, r7]	@ zero_extendqisi2
 2706 0c84 DDE7     		b	.L98
 2707              	.LVL247:
 2708              	.L109:
 2709              	.LBE81:
 2710              	.LBB82:
 2711 0c86 8023     		movs	r3, #128
 2712 0c88 0A93     		str	r3, [sp, #40]
1139:Src/main.c    ****         }
 2713              		.loc 1 1139 0
 2714 0c8a 1E46     		mov	r6, r3
 2715 0c8c 8AE7     		b	.L102
 2716              	.L150:
 2717 0c8e 00BF     		.align	2
 2718              	.L149:
 2719 0c90 00000000 		.word	u8g2
 2720 0c94 70000000 		.word	.LC10
 2721 0c98 74000000 		.word	.LC11
 2722 0c9c 00000000 		.word	mode
 2723 0ca0 78000000 		.word	.LC12
 2724 0ca4 7C000000 		.word	.LC13
 2725 0ca8 00000000 		.word	.LC0
 2726 0cac 00000000 		.word	rpm
 2727 0cb0 00000000 		.word	.LANCHOR1
 2728 0cb4 05000000 		.word	.LANCHOR1+5
 2729 0cb8 0A000000 		.word	.LANCHOR1+10
 2730 0cbc ABAAAAAA 		.word	-1431655765
 2731 0cc0 00000000 		.word	.LANCHOR9
 2732 0cc4 00000000 		.word	.LANCHOR10
 2733 0cc8 00000000 		.word	.LANCHOR11
 2734 0ccc 00000000 		.word	Gsens_Y
 2735 0cd0 84000000 		.word	.LC14
 2736              	.L139:
 2737              	.LBE82:
1150:Src/main.c    ****         u8g2_SetFont(&u8g2, u8g2_font_7x14B_tf);
 2738              		.loc 1 1150 0
 2739 0cd4 2148     		ldr	r0, .L151
 2740 0cd6 FFF7FEFF 		bl	u8g2_ClearBuffer
 2741              	.LVL248:
1151:Src/main.c    ****         u8g2_DrawStr(&u8g2, 2, 15, "Mode Setting" );
 2742              		.loc 1 1151 0
 2743 0cda 2149     		ldr	r1, .L151+4
 2744 0cdc 1F48     		ldr	r0, .L151
 2745 0cde FFF7FEFF 		bl	u8g2_SetFont
 2746              	.LVL249:
1152:Src/main.c    ****         if( cursor == 0 ){
 2747              		.loc 1 1152 0
 2748 0ce2 204B     		ldr	r3, .L151+8
 2749 0ce4 1D48     		ldr	r0, .L151
 2750 0ce6 0F22     		movs	r2, #15
 2751 0ce8 0221     		movs	r1, #2
 2752 0cea FFF7FEFF 		bl	u8g2_DrawStr
 2753              	.LVL250:
1153:Src/main.c    ****           u8g2_DrawStr(&u8g2, 2, 30, ">" );
 2754              		.loc 1 1153 0
 2755 0cee 1E4B     		ldr	r3, .L151+12
 2756 0cf0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s 			page 79


 2757 0cf2 03BB     		cbnz	r3, .L103
1154:Src/main.c    ****         }else{
 2758              		.loc 1 1154 0
 2759 0cf4 1D4B     		ldr	r3, .L151+16
 2760 0cf6 1948     		ldr	r0, .L151
 2761 0cf8 1E22     		movs	r2, #30
 2762 0cfa 0221     		movs	r1, #2
 2763 0cfc FFF7FEFF 		bl	u8g2_DrawStr
 2764              	.LVL251:
 2765              	.L104:
1158:Src/main.c    ****         if( cursor == 1 ){
 2766              		.loc 1 1158 0
 2767 0d00 1B4B     		ldr	r3, .L151+20
 2768 0d02 1648     		ldr	r0, .L151
 2769 0d04 1E22     		movs	r2, #30
 2770 0d06 0A21     		movs	r1, #10
 2771 0d08 FFF7FEFF 		bl	u8g2_DrawStr
 2772              	.LVL252:
1159:Src/main.c    ****           u8g2_DrawStr(&u8g2, 2, 45, ">" );
 2773              		.loc 1 1159 0
 2774 0d0c 164B     		ldr	r3, .L151+12
1162:Src/main.c    ****         }
 2775              		.loc 1 1162 0
 2776 0d0e 1348     		ldr	r0, .L151
1159:Src/main.c    ****           u8g2_DrawStr(&u8g2, 2, 45, ">" );
 2777              		.loc 1 1159 0
 2778 0d10 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2779 0d12 012B     		cmp	r3, #1
1160:Src/main.c    ****         }else{
 2780              		.loc 1 1160 0
 2781 0d14 0CBF     		ite	eq
 2782 0d16 154B     		ldreq	r3, .L151+16
1162:Src/main.c    ****         }
 2783              		.loc 1 1162 0
 2784 0d18 164B     		ldrne	r3, .L151+24
 2785 0d1a 2D22     		movs	r2, #45
 2786 0d1c 0221     		movs	r1, #2
 2787 0d1e FFF7FEFF 		bl	u8g2_DrawStr
 2788              	.LVL253:
1164:Src/main.c    ****         u8g2_SendBuffer(&u8g2);
 2789              		.loc 1 1164 0
 2790 0d22 154B     		ldr	r3, .L151+28
 2791 0d24 0D48     		ldr	r0, .L151
 2792 0d26 2D22     		movs	r2, #45
 2793 0d28 0A21     		movs	r1, #10
 2794 0d2a FFF7FEFF 		bl	u8g2_DrawStr
 2795              	.LVL254:
1165:Src/main.c    ****       }
 2796              		.loc 1 1165 0
 2797 0d2e 0B48     		ldr	r0, .L151
 2798 0d30 FFF7FEFF 		bl	u8g2_SendBuffer
 2799              	.LVL255:
 2800 0d34 50E5     		b	.L95
 2801              	.L103:
1156:Src/main.c    ****         }
 2802              		.loc 1 1156 0
 2803 0d36 0F4B     		ldr	r3, .L151+24
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s 			page 80


 2804 0d38 0848     		ldr	r0, .L151
 2805 0d3a 1E22     		movs	r2, #30
 2806 0d3c 0221     		movs	r1, #2
 2807 0d3e FFF7FEFF 		bl	u8g2_DrawStr
 2808              	.LVL256:
 2809 0d42 DDE7     		b	.L104
 2810              	.LVL257:
 2811              	.L126:
 2812              	.LBE163:
 528:Src/main.c    ****   }else{
 2813              		.loc 1 528 0
 2814 0d44 1A46     		mov	r2, r3
 2815 0d46 0993     		str	r3, [sp, #36]
 2816 0d48 0123     		movs	r3, #1
 2817 0d4a 1370     		strb	r3, [r2]
 2818 0d4c FFF70EBA 		b	.L47
 2819              	.LVL258:
 2820              	.L133:
 2821              	.LBB164:
 893:Src/main.c    ****       FP_duty = 60;
 2822              		.loc 1 893 0
 2823 0d50 3B2B     		cmp	r3, #59
 894:Src/main.c    ****     }
 2824              		.loc 1 894 0
 2825 0d52 DCBF     		itt	le
 2826 0d54 3C23     		movle	r3, #60
 2827 0d56 2380     		strhle	r3, [r4]	@ movhi
 2828 0d58 04E5     		b	.L70
 2829              	.L152:
 2830 0d5a 00BF     		.align	2
 2831              	.L151:
 2832 0d5c 00000000 		.word	u8g2
 2833 0d60 00000000 		.word	u8g2_font_7x14B_tf
 2834 0d64 88000000 		.word	.LC15
 2835 0d68 00000000 		.word	.LANCHOR12
 2836 0d6c 98000000 		.word	.LC16
 2837 0d70 A0000000 		.word	.LC18
 2838 0d74 9C000000 		.word	.LC17
 2839 0d78 AC000000 		.word	.LC19
 2840              	.LBE164:
 2841              		.cfi_endproc
 2842              	.LFE132:
 2844              		.section	.text.Error_Handler,"ax",%progbits
 2845              		.align	1
 2846              		.p2align 2,,3
 2847              		.global	Error_Handler
 2848              		.syntax unified
 2849              		.thumb
 2850              		.thumb_func
 2851              		.fpu fpv4-sp-d16
 2853              	Error_Handler:
 2854              	.LFB134:
1224:Src/main.c    **** 
1225:Src/main.c    **** /* USER CODE BEGIN 4 */
1226:Src/main.c    **** 
1227:Src/main.c    **** /* USER CODE END 4 */
1228:Src/main.c    **** 
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s 			page 81


1229:Src/main.c    **** /**
1230:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
1231:Src/main.c    ****   * @retval None
1232:Src/main.c    ****   */
1233:Src/main.c    **** void Error_Handler(void)
1234:Src/main.c    **** {
 2855              		.loc 1 1234 0
 2856              		.cfi_startproc
 2857              		@ Volatile: function does not return.
 2858              		@ args = 0, pretend = 0, frame = 0
 2859              		@ frame_needed = 0, uses_anonymous_args = 0
 2860              		@ link register save eliminated.
 2861              	.L154:
 2862 0000 FEE7     		b	.L154
 2863              		.cfi_endproc
 2864              	.LFE134:
 2866              		.comm	adc,20,4
 2867              		.comm	g_ADCBuffer,20,4
 2868              		.comm	Gsens_Z,2,2
 2869              		.comm	Gsens_Z0,1,1
 2870              		.comm	Gsens_Z1,1,1
 2871              		.comm	Gsens_Y,2,2
 2872              		.comm	Gsens_Y0,1,1
 2873              		.comm	Gsens_Y1,1,1
 2874              		.comm	Gsens_X,2,2
 2875              		.comm	Gsens_X0,1,1
 2876              		.comm	Gsens_X1,1,1
 2877              		.comm	Gsens_EN,1,1
 2878              		.global	FP_duty
 2879              		.global	FP_volt
 2880              		.global	O2_volt
 2881              		.global	meas_value
 2882              		.global	meas_sign
 2883              		.global	meas_frac
 2884              		.global	meas_digit
 2885              		.global	meas_unit
 2886              		.global	meas_name
 2887              		.global	idct_status
 2888              		.global	idct_name
 2889              		.global	cursor
 2890              		.comm	setting,1,1
 2891              		.comm	mode,1,1
 2892              		.global	MT
 2893              		.global	gear
 2894              		.global	speed
 2895              		.global	update_display
 2896              		.comm	u8g2,128,4
 2897              		.global	logo_bits
 2898 0002 00BF     		.section	.bss.cursor,"aw",%nobits
 2899              		.set	.LANCHOR12,. + 0
 2902              	cursor:
 2903 0000 00       		.space	1
 2904              		.section	.bss.gear,"aw",%nobits
 2907              	gear:
 2908 0000 00       		.space	1
 2909              		.section	.bss.update_display,"aw",%nobits
 2912              	update_display:
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s 			page 82


 2913 0000 00       		.space	1
 2914              		.section	.data.FP_duty,"aw",%progbits
 2915              		.align	1
 2916              		.set	.LANCHOR4,. + 0
 2919              	FP_duty:
 2920 0000 6400     		.short	100
 2921              		.section	.data.FP_volt,"aw",%progbits
 2922              		.align	1
 2923              		.set	.LANCHOR6,. + 0
 2926              	FP_volt:
 2927 0000 4A01     		.short	330
 2928              		.section	.data.MT,"aw",%progbits
 2929              		.align	3
 2932              	MT:
 2933 0000 77BE9F1A 		.word	446676599
 2934 0004 2FDD0B40 		.word	1074519343
 2935 0008 1F85EB51 		.word	1374389535
 2936 000c B81E0040 		.word	1073749688
 2937 0010 A8C64B37 		.word	927712936
 2938 0014 8941F63F 		.word	1073103241
 2939 0018 00000000 		.word	0
 2940 001c 0000F03F 		.word	1072693248
 2941 0020 986E1283 		.word	2199023256
 2942 0024 C0CAE93F 		.word	1072286400
 2943              		.section	.data.O2_volt,"aw",%progbits
 2944              		.align	1
 2945              		.set	.LANCHOR5,. + 0
 2948              	O2_volt:
 2949 0000 4A01     		.short	330
 2950              		.section	.data.meas_value,"aw",%progbits
 2951              		.align	2
 2952              		.set	.LANCHOR7,. + 0
 2955              	meas_value:
 2956 0000 6900     		.short	105
 2957 0002 EB00     		.short	235
 2958 0004 8502     		.short	645
 2959 0006 5900     		.short	89
 2960 0008 4900     		.short	73
 2961 000a 8F00     		.short	143
 2962              		.section	.data.speed,"aw",%progbits
 2963              		.align	1
 2966              	speed:
 2967 0000 F000     		.short	240
 2968              		.section	.rodata.draw_MeasLabels.str1.4,"aMS",%progbits,1
 2969              		.align	2
 2970              	.LC0:
 2971 0000 25202000 		.ascii	"%  \000"
 2972              	.LC1:
 2973 0004 44555459 		.ascii	"DUTY\000"
 2973      00
 2974              		.section	.rodata.idct_name,"a",%progbits
 2975              		.align	2
 2976              		.set	.LANCHOR0,. + 0
 2979              	idct_name:
 2980 0000 43414E00 		.ascii	"CAN\000"
 2981 0004 00       		.space	1
 2982 0005 4F324642 		.ascii	"O2FB\000"
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s 			page 83


 2982      00
 2983              		.section	.rodata.idct_status,"a",%progbits
 2984              		.align	2
 2985              		.set	.LANCHOR8,. + 0
 2988              	idct_status:
 2989 0000 01       		.byte	1
 2990 0001 01       		.byte	1
 2991              		.section	.rodata.logo_bits,"a",%progbits
 2992              		.align	2
 2993              		.set	.LANCHOR3,. + 0
 2996              	logo_bits:
 2997 0000 00       		.byte	0
 2998 0001 00       		.byte	0
 2999 0002 00       		.byte	0
 3000 0003 00       		.byte	0
 3001 0004 00       		.byte	0
 3002 0005 00       		.byte	0
 3003 0006 00       		.byte	0
 3004 0007 00       		.byte	0
 3005 0008 00       		.byte	0
 3006 0009 00       		.byte	0
 3007 000a 00       		.byte	0
 3008 000b 00       		.byte	0
 3009 000c 00       		.byte	0
 3010 000d 00       		.byte	0
 3011 000e 00       		.byte	0
 3012 000f 00       		.byte	0
 3013 0010 00       		.byte	0
 3014 0011 00       		.byte	0
 3015 0012 00       		.byte	0
 3016 0013 00       		.byte	0
 3017 0014 00       		.byte	0
 3018 0015 00       		.byte	0
 3019 0016 00       		.byte	0
 3020 0017 00       		.byte	0
 3021 0018 00       		.byte	0
 3022 0019 00       		.byte	0
 3023 001a F0       		.byte	-16
 3024 001b 0F       		.byte	15
 3025 001c 00       		.byte	0
 3026 001d 00       		.byte	0
 3027 001e 00       		.byte	0
 3028 001f FC       		.byte	-4
 3029 0020 FF       		.byte	-1
 3030 0021 FF       		.byte	-1
 3031 0022 3F       		.byte	63
 3032 0023 00       		.byte	0
 3033 0024 80       		.byte	-128
 3034 0025 FF       		.byte	-1
 3035 0026 FF       		.byte	-1
 3036 0027 FF       		.byte	-1
 3037 0028 FF       		.byte	-1
 3038 0029 01       		.byte	1
 3039 002a E0       		.byte	-32
 3040 002b 1F       		.byte	31
 3041 002c 00       		.byte	0
 3042 002d 80       		.byte	-128
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s 			page 84


 3043 002e FF       		.byte	-1
 3044 002f 07       		.byte	7
 3045 0030 E0       		.byte	-32
 3046 0031 01       		.byte	1
 3047 0032 00       		.byte	0
 3048 0033 80       		.byte	-128
 3049 0034 81       		.byte	-127
 3050 0035 07       		.byte	7
 3051 0036 E0       		.byte	-32
 3052 0037 01       		.byte	1
 3053 0038 00       		.byte	0
 3054 0039 80       		.byte	-128
 3055 003a 81       		.byte	-127
 3056 003b 07       		.byte	7
 3057 003c C0       		.byte	-64
 3058 003d E1       		.byte	-31
 3059 003e 07       		.byte	7
 3060 003f C0       		.byte	-64
 3061 0040 80       		.byte	-128
 3062 0041 03       		.byte	3
 3063 0042 00       		.byte	0
 3064 0043 FC       		.byte	-4
 3065 0044 1F       		.byte	31
 3066 0045 E0       		.byte	-32
 3067 0046 80       		.byte	-128
 3068 0047 03       		.byte	3
 3069 0048 00       		.byte	0
 3070 0049 FE       		.byte	-2
 3071 004a 7F       		.byte	127
 3072 004b 70       		.byte	112
 3073 004c C0       		.byte	-64
 3074 004d 01       		.byte	1
 3075 004e 00       		.byte	0
 3076 004f 0F       		.byte	15
 3077 0050 FE       		.byte	-2
 3078 0051 39       		.byte	57
 3079 0052 E0       		.byte	-32
 3080 0053 00       		.byte	0
 3081 0054 00       		.byte	0
 3082 0055 07       		.byte	7
 3083 0056 F8       		.byte	-8
 3084 0057 1F       		.byte	31
 3085 0058 F0       		.byte	-16
 3086 0059 00       		.byte	0
 3087 005a 00       		.byte	0
 3088 005b 0E       		.byte	14
 3089 005c E0       		.byte	-32
 3090 005d 1F       		.byte	31
 3091 005e 78       		.byte	120
 3092 005f 00       		.byte	0
 3093 0060 00       		.byte	0
 3094 0061 0C       		.byte	12
 3095 0062 C0       		.byte	-64
 3096 0063 FF       		.byte	-1
 3097 0064 3F       		.byte	63
 3098 0065 00       		.byte	0
 3099 0066 00       		.byte	0
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s 			page 85


 3100 0067 18       		.byte	24
 3101 0068 00       		.byte	0
 3102 0069 FF       		.byte	-1
 3103 006a 1F       		.byte	31
 3104 006b 00       		.byte	0
 3105 006c 00       		.byte	0
 3106 006d 38       		.byte	56
 3107 006e C0       		.byte	-64
 3108 006f FF       		.byte	-1
 3109 0070 0F       		.byte	15
 3110 0071 00       		.byte	0
 3111 0072 00       		.byte	0
 3112 0073 70       		.byte	112
 3113 0074 E0       		.byte	-32
 3114 0075 F1       		.byte	-15
 3115 0076 03       		.byte	3
 3116 0077 00       		.byte	0
 3117 0078 00       		.byte	0
 3118 0079 E0       		.byte	-32
 3119 007a 78       		.byte	120
 3120 007b 00       		.byte	0
 3121 007c 00       		.byte	0
 3122 007d 00       		.byte	0
 3123 007e 00       		.byte	0
 3124 007f C0       		.byte	-64
 3125 0080 3F       		.byte	63
 3126 0081 E0       		.byte	-32
 3127 0082 01       		.byte	1
 3128 0083 00       		.byte	0
 3129 0084 00       		.byte	0
 3130 0085 80       		.byte	-128
 3131 0086 1F       		.byte	31
 3132 0087 F0       		.byte	-16
 3133 0088 01       		.byte	1
 3134 0089 00       		.byte	0
 3135 008a 00       		.byte	0
 3136 008b 00       		.byte	0
 3137 008c 07       		.byte	7
 3138 008d F8       		.byte	-8
 3139 008e 00       		.byte	0
 3140 008f 00       		.byte	0
 3141 0090 00       		.byte	0
 3142 0091 00       		.byte	0
 3143 0092 1E       		.byte	30
 3144 0093 7C       		.byte	124
 3145 0094 00       		.byte	0
 3146 0095 00       		.byte	0
 3147 0096 00       		.byte	0
 3148 0097 00       		.byte	0
 3149 0098 F8       		.byte	-8
 3150 0099 1F       		.byte	31
 3151 009a 00       		.byte	0
 3152 009b 00       		.byte	0
 3153 009c 00       		.byte	0
 3154 009d 00       		.byte	0
 3155 009e F0       		.byte	-16
 3156 009f 0F       		.byte	15
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s 			page 86


 3157 00a0 00       		.byte	0
 3158 00a1 00       		.byte	0
 3159 00a2 00       		.byte	0
 3160 00a3 00       		.byte	0
 3161 00a4 80       		.byte	-128
 3162 00a5 01       		.byte	1
 3163 00a6 00       		.byte	0
 3164 00a7 00       		.byte	0
 3165 00a8 00       		.byte	0
 3166 00a9 00       		.byte	0
 3167 00aa 00       		.byte	0
 3168 00ab 00       		.byte	0
 3169 00ac 00       		.byte	0
 3170 00ad 00       		.byte	0
 3171 00ae 00       		.byte	0
 3172 00af 00       		.byte	0
 3173 00b0 00       		.byte	0
 3174 00b1 00       		.byte	0
 3175 00b2 00       		.byte	0
 3176 00b3 00       		.byte	0
 3177 00b4 00       		.byte	0
 3178 00b5 00       		.byte	0
 3179 00b6 00       		.byte	0
 3180 00b7 00       		.byte	0
 3181 00b8 00       		.byte	0
 3182 00b9 00       		.byte	0
 3183 00ba 00       		.byte	0
 3184 00bb 00       		.byte	0
 3185 00bc 00       		.byte	0
 3186 00bd 00       		.byte	0
 3187 00be 00       		.byte	0
 3188 00bf 00       		.byte	0
 3189 00c0 00       		.byte	0
 3190 00c1 00       		.byte	0
 3191 00c2 00       		.byte	0
 3192 00c3 00       		.byte	0
 3193 00c4 00       		.byte	0
 3194 00c5 00       		.byte	0
 3195 00c6 00       		.byte	0
 3196 00c7 4C       		.byte	76
 3197 00c8 1C       		.byte	28
 3198 00c9 00       		.byte	0
 3199 00ca 00       		.byte	0
 3200 00cb 00       		.byte	0
 3201 00cc 00       		.byte	0
 3202 00cd 32       		.byte	50
 3203 00ce 0E       		.byte	14
 3204 00cf 00       		.byte	0
 3205 00d0 00       		.byte	0
 3206 00d1 00       		.byte	0
 3207 00d2 00       		.byte	0
 3208 00d3 00       		.byte	0
 3209 00d4 C6       		.byte	-58
 3210 00d5 00       		.byte	0
 3211 00d6 18       		.byte	24
 3212 00d7 00       		.byte	0
 3213 00d8 00       		.byte	0
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s 			page 87


 3214 00d9 7C       		.byte	124
 3215 00da EF       		.byte	-17
 3216 00db FC       		.byte	-4
 3217 00dc 39       		.byte	57
 3218 00dd 00       		.byte	0
 3219 00de 00       		.byte	0
 3220 00df 4E       		.byte	78
 3221 00e0 C6       		.byte	-58
 3222 00e1 B8       		.byte	-72
 3223 00e2 31       		.byte	49
 3224 00e3 00       		.byte	0
 3225 00e4 00       		.byte	0
 3226 00e5 3E       		.byte	62
 3227 00e6 C6       		.byte	-58
 3228 00e7 98       		.byte	-104
 3229 00e8 31       		.byte	49
 3230 00e9 00       		.byte	0
 3231 00ea 00       		.byte	0
 3232 00eb 3C       		.byte	60
 3233 00ec C6       		.byte	-58
 3234 00ed 98       		.byte	-104
 3235 00ee 31       		.byte	49
 3236 00ef 00       		.byte	0
 3237 00f0 00       		.byte	0
 3238 00f1 0E       		.byte	14
 3239 00f2 C6       		.byte	-58
 3240 00f3 98       		.byte	-104
 3241 00f4 31       		.byte	49
 3242 00f5 00       		.byte	0
 3243 00f6 00       		.byte	0
 3244 00f7 4E       		.byte	78
 3245 00f8 CE       		.byte	-50
 3246 00f9 99       		.byte	-103
 3247 00fa 31       		.byte	49
 3248 00fb 00       		.byte	0
 3249 00fc 00       		.byte	0
 3250 00fd 7C       		.byte	124
 3251 00fe EF       		.byte	-17
 3252 00ff FD       		.byte	-3
 3253 0100 7B       		.byte	123
 3254 0101 00       		.byte	0
 3255 0102 00       		.byte	0
 3256 0103 00       		.byte	0
 3257 0104 00       		.byte	0
 3258 0105 00       		.byte	0
 3259 0106 00       		.byte	0
 3260 0107 00       		.byte	0
 3261 0108 00       		.byte	0
 3262 0109 00       		.byte	0
 3263 010a 00       		.byte	0
 3264 010b 00       		.byte	0
 3265 010c 00       		.byte	0
 3266 010d 00       		.byte	0
 3267 010e 00       		.byte	0
 3268 010f 00       		.byte	0
 3269 0110 00       		.byte	0
 3270 0111 00       		.byte	0
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s 			page 88


 3271 0112 00       		.byte	0
 3272 0113 00       		.byte	0
 3273 0114 00       		.byte	0
 3274 0115 00       		.byte	0
 3275 0116 00       		.byte	0
 3276 0117 00       		.byte	0
 3277 0118 00       		.byte	0
 3278 0119 00       		.byte	0
 3279 011a 00       		.byte	0
 3280 011b 00       		.byte	0
 3281 011c 00       		.byte	0
 3282 011d 00       		.byte	0
 3283 011e 00       		.byte	0
 3284 011f 00       		.byte	0
 3285              		.section	.rodata.main.str1.4,"aMS",%progbits,1
 3286              		.align	2
 3287              	.LC2:
 3288 0000 4D756C74 		.ascii	"Multi Function Meter\000"
 3288      69204675 
 3288      6E637469 
 3288      6F6E204D 
 3288      65746572 
 3289 0015 000000   		.space	3
 3290              	.LC3:
 3291 0018 5265762E 		.ascii	"Rev. 0.2a\000"
 3291      20302E32 
 3291      6100
 3292 0022 0000     		.space	2
 3293              	.LC4:
 3294 0024 48656C6C 		.ascii	"Hello. This is MFM.\012\000"
 3294      6F2E2054 
 3294      68697320 
 3294      6973204D 
 3294      464D2E0A 
 3295 0039 000000   		.space	3
 3296              	.LC5:
 3297 003c 4144584C 		.ascii	"ADXL324 DEVID %d\012\000"
 3297      33323420 
 3297      44455649 
 3297      44202564 
 3297      0A00
 3298 004e 0000     		.space	2
 3299              	.LC6:
 3300 0050 2825642C 		.ascii	"(%d,%d,%d)\012\000"
 3300      25642C25 
 3300      64290A00 
 3301              	.LC7:
 3302 005c 55502000 		.ascii	"UP \000"
 3303              	.LC8:
 3304 0060 444F574E 		.ascii	"DOWN \000"
 3304      2000
 3305 0066 0000     		.space	2
 3306              	.LC9:
 3307 0068 454E5445 		.ascii	"ENTER \000"
 3307      522000
 3308 006f 00       		.space	1
 3309              	.LC10:
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s 			page 89


 3310 0070 6B506100 		.ascii	"kPa\000"
 3311              	.LC11:
 3312 0074 4D415000 		.ascii	"MAP\000"
 3313              	.LC12:
 3314 0078 4700     		.ascii	"G\000"
 3315 007a 0000     		.space	2
 3316              	.LC13:
 3317 007c 4C617447 		.ascii	"LatG\000"
 3317      00
 3318 0081 000000   		.space	3
 3319              	.LC14:
 3320 0084 00       		.ascii	"\000"
 3321 0085 000000   		.space	3
 3322              	.LC15:
 3323 0088 4D6F6465 		.ascii	"Mode Setting\000"
 3323      20536574 
 3323      74696E67 
 3323      00
 3324 0095 000000   		.space	3
 3325              	.LC16:
 3326 0098 3E00     		.ascii	">\000"
 3327 009a 0000     		.space	2
 3328              	.LC17:
 3329 009c 2000     		.ascii	" \000"
 3330 009e 0000     		.space	2
 3331              	.LC18:
 3332 00a0 4D756C74 		.ascii	"Multi-Meter\000"
 3332      692D4D65 
 3332      74657200 
 3333              	.LC19:
 3334 00ac 53636F70 		.ascii	"Scope\000"
 3334      6500
 3335              		.section	.rodata.meas_digit,"a",%progbits
 3336              		.align	2
 3337              		.set	.LANCHOR9,. + 0
 3340              	meas_digit:
 3341 0000 03       		.byte	3
 3342 0001 03       		.byte	3
 3343 0002 03       		.byte	3
 3344 0003 03       		.byte	3
 3345 0004 03       		.byte	3
 3346 0005 03       		.byte	3
 3347              		.section	.rodata.meas_frac,"a",%progbits
 3348              		.align	2
 3349              		.set	.LANCHOR10,. + 0
 3352              	meas_frac:
 3353 0000 02       		.byte	2
 3354 0001 01       		.byte	1
 3355 0002 01       		.byte	1
 3356 0003 00       		.byte	0
 3357 0004 00       		.byte	0
 3358 0005 02       		.byte	2
 3359              		.section	.rodata.meas_name,"a",%progbits
 3360              		.align	2
 3361              		.set	.LANCHOR2,. + 0
 3364              	meas_name:
 3365 0000 4D415000 		.ascii	"MAP\000"
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s 			page 90


 3366 0004 000000   		.space	3
 3367 0007 4F494C50 		.ascii	"OILP\000"
 3367      00
 3368 000c 0000     		.space	2
 3369 000e 46505600 		.ascii	"FPV\000"
 3370 0012 000000   		.space	3
 3371 0015 45435400 		.ascii	"ECT\000"
 3372 0019 000000   		.space	3
 3373 001c 4F494C54 		.ascii	"OILT\000"
 3373      00
 3374 0021 0000     		.space	2
 3375 0023 4F3200   		.ascii	"O2\000"
 3376 0026 00000000 		.space	4
 3377              		.section	.rodata.meas_sign,"a",%progbits
 3378              		.align	2
 3379              		.set	.LANCHOR11,. + 0
 3382              	meas_sign:
 3383 0000 01       		.byte	1
 3384 0001 00       		.byte	0
 3385 0002 00       		.byte	0
 3386 0003 00       		.byte	0
 3387 0004 00       		.byte	0
 3388 0005 00       		.byte	0
 3389              		.section	.rodata.meas_unit,"a",%progbits
 3390              		.align	2
 3391              		.set	.LANCHOR1,. + 0
 3394              	meas_unit:
 3395 0000 6B706100 		.ascii	"kpa\000"
 3396 0004 00       		.space	1
 3397 0005 6B706100 		.ascii	"kpa\000"
 3398 0009 00       		.space	1
 3399 000a 56202000 		.ascii	"V  \000"
 3400 000e 00       		.space	1
 3401 000f B0       		.byte	-80
 3402 0010 43       		.byte	67
 3403 0011 00       		.byte	0
 3404 0012 0000     		.space	2
 3405 0014 B0       		.byte	-80
 3406 0015 43       		.byte	67
 3407 0016 00       		.byte	0
 3408 0017 0000     		.space	2
 3409 0019 5600     		.ascii	"V\000"
 3410 001b 000000   		.space	3
 3411              		.text
 3412              	.Letext0:
 3413              		.file 2 "/usr/local/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/machine/_default_type
 3414              		.file 3 "/usr/local/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/_stdint.h"
 3415              		.file 4 "Drivers/CMSIS/Include/core_cm4.h"
 3416              		.file 5 "Drivers/CMSIS/Device/ST/STM32F3xx/Include/system_stm32f3xx.h"
 3417              		.file 6 "Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f303x8.h"
 3418              		.file 7 "Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f3xx.h"
 3419              		.file 8 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_def.h"
 3420              		.file 9 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc.h"
 3421              		.file 10 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc_ex.h"
 3422              		.file 11 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_dma.h"
 3423              		.file 12 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_adc_ex.h"
 3424              		.file 13 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_adc.h"
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s 			page 91


 3425              		.file 14 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_can.h"
 3426              		.file 15 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_i2c.h"
 3427              		.file 16 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_spi.h"
 3428              		.file 17 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_tim.h"
 3429              		.file 18 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_uart.h"
 3430              		.file 19 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal.h"
 3431              		.file 20 "Inc/adc.h"
 3432              		.file 21 "Inc/can.h"
 3433              		.file 22 "Inc/i2c.h"
 3434              		.file 23 "Inc/spi.h"
 3435              		.file 24 "Inc/tim.h"
 3436              		.file 25 "Inc/usart.h"
 3437              		.file 26 "/usr/local/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/lock.h"
 3438              		.file 27 "/usr/local/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/_types.h"
 3439              		.file 28 "/usr/local/gcc-arm-none-eabi-7-2018-q2-update/lib/gcc/arm-none-eabi/7.3.1/include/stddef
 3440              		.file 29 "/usr/local/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/reent.h"
 3441              		.file 30 "/usr/local/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/math.h"
 3442              		.file 31 "/Users/imashio/Electronics/ARM/_Library/u8x8.h"
 3443              		.file 32 "/Users/imashio/Electronics/ARM/_Library/u8g2.h"
 3444              		.file 33 "/Users/imashio/Electronics/ARM/_Library/flag.h"
 3445              		.file 34 "Inc/defi_decoder.h"
 3446              		.file 35 "Src/pulse_counter.h"
 3447              		.file 36 "/Users/imashio/Electronics/ARM/_Library/draw_Value.h"
 3448              		.file 37 "/Users/imashio/Electronics/ARM/_Library/draw_IndicatorBox.h"
 3449              		.file 38 "/Users/imashio/Electronics/ARM/_Library/usart_transmit_printf.h"
 3450              		.file 39 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_cortex.h"
 3451              		.file 40 "/Users/imashio/Electronics/ARM/_Library/draw_BarGraph.h"
 3452              		.file 41 "Inc/gpio.h"
 3453              		.file 42 "Inc/dma.h"
 3454              		.file 43 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_gpio.h"
 3455              		.file 44 "<built-in>"
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s 			page 92


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s:18     .text.ADXL345_RegWrite:0000000000000000 $t
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s:26     .text.ADXL345_RegWrite:0000000000000000 ADXL345_RegWrite
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s:67     .text.ADXL345_RegWrite:0000000000000024 $d
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s:72     .text.ADXL345_RegRead_1byte:0000000000000000 $t
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s:80     .text.ADXL345_RegRead_1byte:0000000000000000 ADXL345_RegRead_1byte
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s:132    .text.ADXL345_RegRead_1byte:0000000000000034 $d
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s:137    .text.draw_indicators:0000000000000000 $t
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s:145    .text.draw_indicators:0000000000000000 draw_indicators
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s:196    .text.draw_indicators:0000000000000038 $d
                            *COM*:0000000000000080 u8g2
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s:202    .text.draw_MeasLabels:0000000000000000 $t
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s:210    .text.draw_MeasLabels:0000000000000000 draw_MeasLabels
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s:327    .text.draw_MeasLabels:00000000000000d0 $d
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s:336    .text.draw_MeasLabels_Rotary:0000000000000000 $t
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s:344    .text.draw_MeasLabels_Rotary:0000000000000000 draw_MeasLabels_Rotary
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s:400    .text.draw_MeasLabels_Rotary:000000000000003c $d
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s:407    .text.HAL_ADC_ConvCpltCallback:0000000000000000 $t
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s:415    .text.HAL_ADC_ConvCpltCallback:0000000000000000 HAL_ADC_ConvCpltCallback
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s:441    .text.HAL_ADC_ConvCpltCallback:0000000000000018 $d
                            *COM*:0000000000000014 g_ADCBuffer
                            *COM*:0000000000000014 adc
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s:447    .text.SystemClock_Config:0000000000000000 $t
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s:455    .text.SystemClock_Config:0000000000000000 SystemClock_Config
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s:574    .text.startup.main:0000000000000000 $t
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s:582    .text.startup.main:0000000000000000 main
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s:694    .text.startup.main:000000000000007c $d
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s:700    .text.startup.main:000000000000008c $t
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s:1321   .text.startup.main:00000000000003b0 $d
                            *COM*:0000000000000001 Gsens_EN
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s:1349   .text.startup.main:000000000000041c $t
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s:1850   .text.startup.main:0000000000000674 $d
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s:1859   .text.startup.main:0000000000000688 $t
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s:2288   .text.startup.main:000000000000095c $d
                            *COM*:0000000000000001 mode
                            *COM*:0000000000000001 setting
                            *COM*:0000000000000001 Gsens_X1
                            *COM*:0000000000000002 Gsens_Z
                            *COM*:0000000000000001 Gsens_Y1
                            *COM*:0000000000000001 Gsens_Z1
                            *COM*:0000000000000002 Gsens_X
                            *COM*:0000000000000002 Gsens_Y
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s:2317   .text.startup.main:00000000000009c4 $t
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s:2719   .text.startup.main:0000000000000c90 $d
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s:2739   .text.startup.main:0000000000000cd4 $t
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s:2832   .text.startup.main:0000000000000d5c $d
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s:2845   .text.Error_Handler:0000000000000000 $t
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s:2853   .text.Error_Handler:0000000000000000 Error_Handler
                            *COM*:0000000000000001 Gsens_Z0
                            *COM*:0000000000000001 Gsens_Y0
                            *COM*:0000000000000001 Gsens_X0
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s:2919   .data.FP_duty:0000000000000000 FP_duty
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s:2926   .data.FP_volt:0000000000000000 FP_volt
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s:2948   .data.O2_volt:0000000000000000 O2_volt
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s:2955   .data.meas_value:0000000000000000 meas_value
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s:3382   .rodata.meas_sign:0000000000000000 meas_sign
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s 			page 93


/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s:3352   .rodata.meas_frac:0000000000000000 meas_frac
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s:3340   .rodata.meas_digit:0000000000000000 meas_digit
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s:3394   .rodata.meas_unit:0000000000000000 meas_unit
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s:3364   .rodata.meas_name:0000000000000000 meas_name
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s:2988   .rodata.idct_status:0000000000000000 idct_status
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s:2979   .rodata.idct_name:0000000000000000 idct_name
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s:2902   .bss.cursor:0000000000000000 cursor
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s:2932   .data.MT:0000000000000000 MT
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s:2907   .bss.gear:0000000000000000 gear
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s:2966   .data.speed:0000000000000000 speed
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s:2912   .bss.update_display:0000000000000000 update_display
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s:2996   .rodata.logo_bits:0000000000000000 logo_bits
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s:2903   .bss.cursor:0000000000000000 $d
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s:2908   .bss.gear:0000000000000000 $d
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s:2913   .bss.update_display:0000000000000000 $d
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s:2915   .data.FP_duty:0000000000000000 $d
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s:2922   .data.FP_volt:0000000000000000 $d
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s:2929   .data.MT:0000000000000000 $d
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s:2944   .data.O2_volt:0000000000000000 $d
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s:2951   .data.meas_value:0000000000000000 $d
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s:2963   .data.speed:0000000000000000 $d
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s:2969   .rodata.draw_MeasLabels.str1.4:0000000000000000 $d
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s:2975   .rodata.idct_name:0000000000000000 $d
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s:2984   .rodata.idct_status:0000000000000000 $d
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s:2992   .rodata.logo_bits:0000000000000000 $d
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s:3286   .rodata.main.str1.4:0000000000000000 $d
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s:3336   .rodata.meas_digit:0000000000000000 $d
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s:3348   .rodata.meas_frac:0000000000000000 $d
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s:3360   .rodata.meas_name:0000000000000000 $d
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s:3378   .rodata.meas_sign:0000000000000000 $d
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s:3390   .rodata.meas_unit:0000000000000000 $d

UNDEFINED SYMBOLS
HAL_I2C_Master_Transmit
hi2c1
HAL_I2C_Master_Receive
draw_IndicatorBox
draw_MeasLabelUnit
draw_Value
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_Init
memset
MX_GPIO_Init
MX_DMA_Init
MX_ADC1_Init
MX_CAN_Init
MX_I2C1_Init
MX_SPI1_Init
MX_TIM1_Init
MX_TIM2_Init
MX_TIM3_Init
MX_TIM6_Init
MX_USART1_UART_Init
MX_USART2_UART_Init
HAL_TIM_PWM_Start
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccFPUNCl.s 			page 94


HAL_TIM_Base_Start_IT
htim1
htim2
htim3
htim6
HAL_ADC_Start_DMA
HAL_UART_Receive_IT
u8g2_Setup_ssd1309_128x64_noname2_f
HAL_GPIO_WritePin
HAL_Delay
u8x8_InitDisplay
u8x8_SetPowerSave
u8x8_SetContrast
u8g2_ClearDisplay
u8g2_DrawXBMP
u8g2_SetFont
u8g2_DrawStr
u8g2_SendBuffer
u8g2_ClearBuffer
HAL_UART_Transmit_printf
hadc1
UART1_Data
huart1
u8x8_gpio_and_delay_STM32F303
u8x8_byte_4wire_hw_spi
u8g2_cb_r0
u8g2_font_5x7_tf
huart2
flag_meas
flag_disp
DEFI_value
defi_decoder
HAL_NVIC_DisableIRQ
draw_CircularMeter_Init
draw_CircularMeter
flag_sw
rpm
UART1_RxData
draw_Wave_axis
draw_Wave
draw_BarGraph
draw_MeasUnit
u8g2_font_7x14B_tf
