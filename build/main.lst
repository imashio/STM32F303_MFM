ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.draw_indicators,"ax",%progbits
  18              		.align	1
  19              		.p2align 2,,3
  20              		.global	draw_indicators
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	draw_indicators:
  27              	.LFB126:
  28              		.file 1 "Src/main.c"
   1:Src/main.c    **** /* USER CODE BEGIN Header */
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   * @attention
   8:Src/main.c    ****   *
   9:Src/main.c    ****   * <h2><center>&copy; Copyright (c) 2019 STMicroelectronics.
  10:Src/main.c    ****   * All rights reserved.</center></h2>
  11:Src/main.c    ****   *
  12:Src/main.c    ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Src/main.c    ****   * the "License"; You may not use this file except in compliance with the
  14:Src/main.c    ****   * License. You may obtain a copy of the License at:
  15:Src/main.c    ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Src/main.c    ****   *
  17:Src/main.c    ****   ******************************************************************************
  18:Src/main.c    ****   */
  19:Src/main.c    **** /* USER CODE END Header */
  20:Src/main.c    **** 
  21:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  22:Src/main.c    **** #include "main.h"
  23:Src/main.c    **** #include "adc.h"
  24:Src/main.c    **** #include "can.h"
  25:Src/main.c    **** #include "dma.h"
  26:Src/main.c    **** #include "i2c.h"
  27:Src/main.c    **** #include "spi.h"
  28:Src/main.c    **** #include "tim.h"
  29:Src/main.c    **** #include "usart.h"
  30:Src/main.c    **** #include "gpio.h"
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s 			page 2


  31:Src/main.c    **** 
  32:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  33:Src/main.c    **** /* USER CODE BEGIN Includes */
  34:Src/main.c    **** #include <stdio.h>
  35:Src/main.c    **** #include <math.h>
  36:Src/main.c    **** 
  37:Src/main.c    **** // #include "basic.h"  // original library
  38:Src/main.c    **** #include "usart_transmit_printf.h"
  39:Src/main.c    **** #include "u8g2.h"		// graphic display library
  40:Src/main.c    **** #include "u8x8_gpio_STM32F303.h"
  41:Src/main.c    **** #include "u8x8_byte_4wire_hw_spi.h"
  42:Src/main.c    **** #include "draw_Value.h"
  43:Src/main.c    **** #include "draw_BarGraph.h"
  44:Src/main.c    **** #include "draw_IndicatorBox.h"
  45:Src/main.c    **** //#include "draw_Rotary.h"
  46:Src/main.c    **** 
  47:Src/main.c    **** #include "flag.h"
  48:Src/main.c    **** #include "defi_decoder.h"
  49:Src/main.c    **** #include "pulse_counter.h"
  50:Src/main.c    **** #include "can_obd.h"
  51:Src/main.c    **** #include "gsens_ADXL345.h"
  52:Src/main.c    **** 
  53:Src/main.c    **** /* USER CODE END Includes */
  54:Src/main.c    **** 
  55:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  56:Src/main.c    **** /* USER CODE BEGIN PTD */
  57:Src/main.c    **** 
  58:Src/main.c    **** /* USER CODE END PTD */
  59:Src/main.c    **** 
  60:Src/main.c    **** /* Private define ------------------------------------------------------------*/
  61:Src/main.c    **** /* USER CODE BEGIN PD */
  62:Src/main.c    **** /* USER CODE END PD */
  63:Src/main.c    **** 
  64:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
  65:Src/main.c    **** /* USER CODE BEGIN PM */
  66:Src/main.c    **** /* USER CODE END PM */
  67:Src/main.c    **** 
  68:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  69:Src/main.c    **** 
  70:Src/main.c    **** /* USER CODE BEGIN PV */
  71:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  72:Src/main.c    **** 
  73:Src/main.c    **** // mode definition
  74:Src/main.c    **** #define N_mode                5
  75:Src/main.c    **** 
  76:Src/main.c    **** #define MODE_BAR_METER        0
  77:Src/main.c    **** #define MODE_CIRCULAR_METER   1
  78:Src/main.c    **** //#define MODE_ROTARY           2
  79:Src/main.c    **** #define MODE_SCOPE_MAP        2
  80:Src/main.c    **** #define MODE_SCOPE_Gsens      3
  81:Src/main.c    **** #define MODE_SETTING          4
  82:Src/main.c    **** 
  83:Src/main.c    **** // RPM bar graph parameter definition
  84:Src/main.c    **** #define	rpmbar_x		  0
  85:Src/main.c    **** #define	rpmbar_y		  0
  86:Src/main.c    **** #define	rpmbar_width	128
  87:Src/main.c    **** #define	rpmbar_height	14
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s 			page 3


  88:Src/main.c    **** #define	rpm_min			  0
  89:Src/main.c    **** #define	rpm_max			  9000
  90:Src/main.c    **** 
  91:Src/main.c    **** // measurements display parameter definition
  92:Src/main.c    **** // Bar graph
  93:Src/main.c    **** #define	N_meas			      6
  94:Src/main.c    **** #define	meas_x			      0
  95:Src/main.c    **** #define	meas_y			      16
  96:Src/main.c    **** #define	meas_x_offset   	2
  97:Src/main.c    **** #define	meas_width1		    70
  98:Src/main.c    **** #define	meas_width2		    56
  99:Src/main.c    **** #define	meas_height		    12
 100:Src/main.c    **** // Circular Meter
 101:Src/main.c    **** #define	N_meas_C			    4
 102:Src/main.c    **** #define	meas_C_x			    68
 103:Src/main.c    **** #define	meas_C_y			    2
 104:Src/main.c    **** #define	meas_C_x_offset		2
 105:Src/main.c    **** #define	meas_C_width		  60
 106:Src/main.c    **** #define	meas_C_height		  13
 107:Src/main.c    **** 
 108:Src/main.c    **** // indicators parameter definition
 109:Src/main.c    **** #define	N_idct			      2
 110:Src/main.c    **** #define	idct_x			      72
 111:Src/main.c    **** #define	idct_y			      53
 112:Src/main.c    **** #define	idct_width		    27
 113:Src/main.c    **** #define	idct_height		    9
 114:Src/main.c    **** 
 115:Src/main.c    **** //  Fuel Pump Voltage display parameter definition
 116:Src/main.c    **** #define	FP_x		    	    0
 117:Src/main.c    **** #define	FP_y              52
 118:Src/main.c    **** #define	FP_height	        12
 119:Src/main.c    **** #define	FP_volt_width	    45
 120:Src/main.c    **** #define	FP_duty_width	    70
 121:Src/main.c    **** 
 122:Src/main.c    **** // wave display parameter definition
 123:Src/main.c    **** #define	wave_x			      0
 124:Src/main.c    **** #define	wave_y			      13
 125:Src/main.c    **** #define	wave_width		    128
 126:Src/main.c    **** #define	wave_height		    52
 127:Src/main.c    **** #define	wave_value_min	  -100
 128:Src/main.c    **** #define	wave_value_max	  +200
 129:Src/main.c    **** 
 130:Src/main.c    **** // logo parameter definition (small 'enfini' logo)
 131:Src/main.c    **** #define logo_width        48
 132:Src/main.c    **** #define logo_height       48
 133:Src/main.c    **** 
 134:Src/main.c    **** const unsigned char logo_bits[] = {
 135:Src/main.c    ****   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 136:Src/main.c    ****   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 137:Src/main.c    ****   0x00, 0x00, 0xF0, 0x0F, 0x00, 0x00, 0x00, 0xFC, 0xFF, 0xFF, 0x3F, 0x00,
 138:Src/main.c    ****   0x80, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0xE0, 0x1F, 0x00, 0x80, 0xFF, 0x07,
 139:Src/main.c    ****   0xE0, 0x01, 0x00, 0x80, 0x81, 0x07, 0xE0, 0x01, 0x00, 0x80, 0x81, 0x07,
 140:Src/main.c    ****   0xC0, 0xE1, 0x07, 0xC0, 0x80, 0x03, 0x00, 0xFC, 0x1F, 0xE0, 0x80, 0x03,
 141:Src/main.c    ****   0x00, 0xFE, 0x7F, 0x70, 0xC0, 0x01, 0x00, 0x0F, 0xFE, 0x39, 0xE0, 0x00,
 142:Src/main.c    ****   0x00, 0x07, 0xF8, 0x1F, 0xF0, 0x00, 0x00, 0x0E, 0xE0, 0x1F, 0x78, 0x00,
 143:Src/main.c    ****   0x00, 0x0C, 0xC0, 0xFF, 0x3F, 0x00, 0x00, 0x18, 0x00, 0xFF, 0x1F, 0x00,
 144:Src/main.c    ****   0x00, 0x38, 0xC0, 0xFF, 0x0F, 0x00, 0x00, 0x70, 0xE0, 0xF1, 0x03, 0x00,
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s 			page 4


 145:Src/main.c    ****   0x00, 0xE0, 0x78, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x3F, 0xE0, 0x01, 0x00,
 146:Src/main.c    ****   0x00, 0x80, 0x1F, 0xF0, 0x01, 0x00, 0x00, 0x00, 0x07, 0xF8, 0x00, 0x00,
 147:Src/main.c    ****   0x00, 0x00, 0x1E, 0x7C, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x1F, 0x00, 0x00,
 148:Src/main.c    ****   0x00, 0x00, 0xF0, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00,
 149:Src/main.c    ****   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 150:Src/main.c    ****   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 151:Src/main.c    ****   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4C, 0x1C, 0x00, 0x00, 0x00,
 152:Src/main.c    ****   0x00, 0x32, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC6, 0x00, 0x18, 0x00,
 153:Src/main.c    ****   0x00, 0x7C, 0xEF, 0xFC, 0x39, 0x00, 0x00, 0x4E, 0xC6, 0xB8, 0x31, 0x00,
 154:Src/main.c    ****   0x00, 0x3E, 0xC6, 0x98, 0x31, 0x00, 0x00, 0x3C, 0xC6, 0x98, 0x31, 0x00,
 155:Src/main.c    ****   0x00, 0x0E, 0xC6, 0x98, 0x31, 0x00, 0x00, 0x4E, 0xCE, 0x99, 0x31, 0x00,
 156:Src/main.c    ****   0x00, 0x7C, 0xEF, 0xFD, 0x7B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 157:Src/main.c    ****   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 158:Src/main.c    ****   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 159:Src/main.c    ****   };
 160:Src/main.c    **** 
 161:Src/main.c    **** /*
 162:Src/main.c    **** // logo parameter definition (meidium 'enfini' logo)
 163:Src/main.c    **** #define logo_width        54
 164:Src/main.c    **** #define logo_height       48
 165:Src/main.c    **** 
 166:Src/main.c    **** static unsigned char logo_bits[] = {
 167:Src/main.c    ****   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0xFF, 0x0F,
 168:Src/main.c    ****   0x00, 0x00, 0x00, 0xFC, 0xFF, 0xFF, 0xFF, 0x1F, 0x00, 0xE0, 0xFF, 0xFF,
 169:Src/main.c    ****   0xFF, 0xFF, 0xFF, 0x01, 0xF8, 0x3F, 0x00, 0x00, 0xF0, 0xFF, 0x07, 0xF8,
 170:Src/main.c    ****   0x01, 0x00, 0x00, 0x70, 0xE0, 0x0F, 0x7C, 0x00, 0x00, 0x00, 0x70, 0x80,
 171:Src/main.c    ****   0x0F, 0x7C, 0x00, 0x00, 0x00, 0x70, 0x00, 0x07, 0xF8, 0x00, 0x00, 0x00,
 172:Src/main.c    ****   0x38, 0x80, 0x07, 0x00, 0xF8, 0x3F, 0x00, 0x38, 0x80, 0x07, 0x00, 0xFE,
 173:Src/main.c    ****   0xFF, 0x00, 0x1C, 0xC0, 0x03, 0x80, 0xFF, 0xFF, 0x01, 0x0E, 0xC0, 0x01,
 174:Src/main.c    ****   0xC0, 0x07, 0xFC, 0x07, 0x07, 0xE0, 0x01, 0x80, 0x03, 0xF0, 0x9F, 0x03,
 175:Src/main.c    ****   0xF0, 0x00, 0x80, 0x03, 0xC0, 0xFF, 0x03, 0x78, 0x00, 0x00, 0x07, 0x80,
 176:Src/main.c    ****   0xFF, 0x01, 0x3C, 0x00, 0x00, 0x06, 0x00, 0xFE, 0x87, 0x3F, 0x00, 0x00,
 177:Src/main.c    ****   0x0E, 0x00, 0xF8, 0xFF, 0x1F, 0x00, 0x00, 0x1C, 0x00, 0xF8, 0xFF, 0x07,
 178:Src/main.c    ****   0x00, 0x00, 0x38, 0x00, 0xDE, 0xFF, 0x03, 0x00, 0x00, 0x70, 0x00, 0x0F,
 179:Src/main.c    ****   0x7E, 0x00, 0x00, 0x00, 0xE0, 0xC0, 0x07, 0x00, 0x00, 0x00, 0x00, 0xC0,
 180:Src/main.c    ****   0xF1, 0x01, 0x00, 0x00, 0x00, 0x00, 0x80, 0xFF, 0x00, 0x7C, 0x00, 0x00,
 181:Src/main.c    ****   0x00, 0x00, 0x3F, 0x00, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x1F,
 182:Src/main.c    ****   0x00, 0x00, 0x00, 0x00, 0x3C, 0x80, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x78,
 183:Src/main.c    ****   0xE0, 0x07, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xFF, 0x03, 0x00, 0x00, 0x00,
 184:Src/main.c    ****   0x00, 0xC0, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x00, 0x00,
 185:Src/main.c    ****   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00,
 186:Src/main.c    ****   0x00, 0x00, 0x00, 0x00, 0x4E, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39,
 187:Src/main.c    ****   0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x00,
 188:Src/main.c    ****   0x00, 0x7E, 0x3E, 0xC7, 0x3D, 0x1C, 0x00, 0x00, 0x6F, 0x3E, 0xC7, 0x7F,
 189:Src/main.c    ****   0x1C, 0x00, 0x00, 0x03, 0x1C, 0x86, 0x73, 0x18, 0x00, 0x00, 0x07, 0x1C,
 190:Src/main.c    ****   0x86, 0x71, 0x18, 0x00, 0x00, 0x3E, 0x1C, 0x86, 0x71, 0x18, 0x00, 0x00,
 191:Src/main.c    ****   0x1F, 0x1C, 0x86, 0x71, 0x18, 0x00, 0x00, 0x03, 0x1C, 0x86, 0x71, 0x18,
 192:Src/main.c    ****   0x00, 0x00, 0x47, 0x1C, 0x86, 0x71, 0x18, 0x00, 0x00, 0x7F, 0x3E, 0xCF,
 193:Src/main.c    ****   0xFB, 0x3C, 0x00, 0x00, 0x3C, 0x3E, 0xCF, 0xFB, 0x3C, 0x00, 0x00, 0x00,
 194:Src/main.c    ****   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 195:Src/main.c    ****   };
 196:Src/main.c    **** */
 197:Src/main.c    **** 
 198:Src/main.c    **** u8g2_t    u8g2; // a structure which will contain all the data for one display
 199:Src/main.c    **** 
 200:Src/main.c    **** uint8_t   update_display = 0;
 201:Src/main.c    **** 
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s 			page 5


 202:Src/main.c    **** // uint16_t	rpm = 0;
 203:Src/main.c    **** uint16_t	speed = 240;
 204:Src/main.c    **** uint8_t		gear = 0;
 205:Src/main.c    **** double		MT[5] = {3.483, 2.015, 1.391, 1.000, 0.806};
 206:Src/main.c    **** 
 207:Src/main.c    **** // UI
 208:Src/main.c    **** uint8_t   mode;
 209:Src/main.c    **** uint8_t   setting;
 210:Src/main.c    **** uint8_t   cursor = 0;
 211:Src/main.c    **** 
 212:Src/main.c    **** /*
 213:Src/main.c    **** typedef struct {
 214:Src/main.c    **** 	unsigned char	name;
 215:Src/main.c    **** 	uint8_t			status;
 216:Src/main.c    **** } idct;
 217:Src/main.c    **** */
 218:Src/main.c    **** 
 219:Src/main.c    **** // variables for indicators
 220:Src/main.c    **** const unsigned char idct_name[N_idct][5] = { // length must be (text length + 1)
 221:Src/main.c    **** 		"CAN"	,
 222:Src/main.c    **** 		"O2FB"
 223:Src/main.c    **** };
 224:Src/main.c    **** 
 225:Src/main.c    **** const uint8_t	idct_status[N_idct] = {
 226:Src/main.c    **** 		1	,
 227:Src/main.c    **** 		1
 228:Src/main.c    **** };
 229:Src/main.c    **** 
 230:Src/main.c    **** // variables for measurement
 231:Src/main.c    **** const unsigned char meas_name[N_meas][7] = { // length must be (text length + 1)
 232:Src/main.c    **** 		"MAP"         ,
 233:Src/main.c    **** 		"OILP"        ,
 234:Src/main.c    **** 		"FPV"         ,
 235:Src/main.c    **** 		"ECT"         ,
 236:Src/main.c    **** 		"OILT"        ,
 237:Src/main.c    **** 		"O2"          
 238:Src/main.c    **** };
 239:Src/main.c    **** 
 240:Src/main.c    **** const unsigned char meas_unit[N_meas][5] = {
 241:Src/main.c    **** 		"kpa"			    ,	// MAP
 242:Src/main.c    **** 		"kpa"			    ,	// OILP
 243:Src/main.c    **** 		"V  "         ,	// FuelPump Voltage
 244:Src/main.c    **** 		{176, 67, 0}  ,	// ECT  degC...{176, 67, 0}
 245:Src/main.c    **** 		{176, 67, 0}	,	// OILT  degC...{176, 67, 0}
 246:Src/main.c    **** 		"V"					    // O2
 247:Src/main.c    **** };
 248:Src/main.c    **** 
 249:Src/main.c    **** const uint8_t	meas_digit[N_meas] = {
 250:Src/main.c    **** 		3	,	// MAP
 251:Src/main.c    **** 		3	,	// OILP
 252:Src/main.c    **** 		3	,	// FuelPump Voltage
 253:Src/main.c    **** 		3	,	// ECT
 254:Src/main.c    **** 		3	,	// OILT
 255:Src/main.c    **** 		3		// O2
 256:Src/main.c    **** };
 257:Src/main.c    **** 
 258:Src/main.c    **** const uint8_t	meas_frac[N_meas] = {
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s 			page 6


 259:Src/main.c    **** 		2	,	// MAP
 260:Src/main.c    **** 		1	,	// OILP
 261:Src/main.c    **** 		1	,	// FuelPump Voltage
 262:Src/main.c    **** 		0	,	// ECT
 263:Src/main.c    **** 		0	,	// OILT
 264:Src/main.c    **** 		2		// O2
 265:Src/main.c    **** };
 266:Src/main.c    **** 
 267:Src/main.c    **** const uint8_t	meas_sign[N_meas] = {
 268:Src/main.c    **** 		1	,	// MAP
 269:Src/main.c    **** 		0	,	// OILP
 270:Src/main.c    **** 		0	,	// FuelPump Voltage
 271:Src/main.c    **** 		0	,	// ECT
 272:Src/main.c    **** 		0	,	// OILT
 273:Src/main.c    **** 		0		// O2
 274:Src/main.c    **** };
 275:Src/main.c    **** 
 276:Src/main.c    **** int16_t	meas_value[N_meas] = {
 277:Src/main.c    **** 		105	,	// MAP
 278:Src/main.c    **** 		235	,	// OILP
 279:Src/main.c    **** 		645	,	// FuelPump Voltage
 280:Src/main.c    **** 		89	,	// ECT
 281:Src/main.c    **** 		73	,	// OILT
 282:Src/main.c    **** 		143		// O2
 283:Src/main.c    **** };
 284:Src/main.c    **** 
 285:Src/main.c    **** // O2 senser Voltage
 286:Src/main.c    **** int16_t   O2_volt = 330;
 287:Src/main.c    **** 
 288:Src/main.c    **** // Fuel Pump Voltage
 289:Src/main.c    **** int16_t   FP_volt = 330;
 290:Src/main.c    **** int16_t   FP_duty = 100;
 291:Src/main.c    **** 
 292:Src/main.c    **** // ADXL345 3-axis acceration sensor --------------------------------
 293:Src/main.c    **** uint8_t   Gsens_EN;
 294:Src/main.c    **** uint8_t   Gsens_X1;
 295:Src/main.c    **** uint8_t   Gsens_X0;
 296:Src/main.c    **** int16_t   Gsens_X;
 297:Src/main.c    **** uint8_t   Gsens_Y1;
 298:Src/main.c    **** uint8_t   Gsens_Y0;
 299:Src/main.c    **** int16_t   Gsens_Y;
 300:Src/main.c    **** uint8_t   Gsens_Z1;
 301:Src/main.c    **** uint8_t   Gsens_Z0;
 302:Src/main.c    **** int16_t   Gsens_Z;
 303:Src/main.c    **** 
 304:Src/main.c    **** #define ADXL0_ADDR 0x1D
 305:Src/main.c    **** // ADXL345     I2C
 306:Src/main.c    **** // SDO/ALT   Address
 307:Src/main.c    **** //    H        0x1D
 308:Src/main.c    **** //    L        0x53
 309:Src/main.c    **** 
 310:Src/main.c    **** /*
 311:Src/main.c    **** void ADXL345_RegWrite(uint8_t slv_addr, uint8_t addr, uint8_t data){
 312:Src/main.c    ****   uint8_t i2c_buf[2];
 313:Src/main.c    ****   i2c_buf[0] = addr;
 314:Src/main.c    ****   i2c_buf[1] = data;  
 315:Src/main.c    ****   HAL_I2C_Master_Transmit(&hi2c1, slv_addr << 1, &i2c_buf, 2, 10);
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s 			page 7


 316:Src/main.c    **** }
 317:Src/main.c    **** 
 318:Src/main.c    **** int8_t ADXL345_RegRead_1byte(uint8_t slv_addr, uint8_t addr){
 319:Src/main.c    ****   uint8_t data;
 320:Src/main.c    ****   HAL_I2C_Master_Transmit(&hi2c1, slv_addr << 1, &addr, 1, 10);
 321:Src/main.c    ****   HAL_I2C_Master_Receive(&hi2c1, slv_addr << 1, &data, 1, 10);
 322:Src/main.c    ****   return data;
 323:Src/main.c    **** }
 324:Src/main.c    **** */
 325:Src/main.c    **** 
 326:Src/main.c    **** /* USER CODE END PV */
 327:Src/main.c    **** 
 328:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
 329:Src/main.c    **** void SystemClock_Config(void);
 330:Src/main.c    **** /* USER CODE BEGIN PFP */
 331:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
 332:Src/main.c    **** 
 333:Src/main.c    **** /* USER CODE END PFP */
 334:Src/main.c    **** 
 335:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
 336:Src/main.c    **** /* USER CODE BEGIN 0 */
 337:Src/main.c    **** void draw_indicators(){
  29              		.loc 1 337 0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              	.LVL0:
  34 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 20
  37              		.cfi_offset 4, -20
  38              		.cfi_offset 5, -16
  39              		.cfi_offset 6, -12
  40              		.cfi_offset 7, -8
  41              		.cfi_offset 14, -4
 338:Src/main.c    ****   uint8_t n;
 339:Src/main.c    ****   uint8_t x, y;
 340:Src/main.c    ****   // draw indicators
 341:Src/main.c    ****   for( n=0; n<N_idct; n++ ){
 342:Src/main.c    **** 	  draw_IndicatorBox(&u8g2, idct_x+(idct_width+2)*n, idct_y, idct_width, idct_height, idct_status[n
  42              		.loc 1 342 0
  43 0002 0D4D     		ldr	r5, .L4
  44 0004 0D4C     		ldr	r4, .L4+4
 337:Src/main.c    ****   uint8_t n;
  45              		.loc 1 337 0
  46 0006 85B0     		sub	sp, sp, #20
  47              	.LCFI1:
  48              		.cfi_def_cfa_offset 40
  49              		.loc 1 342 0
  50 0008 0127     		movs	r7, #1
  51 000a 0926     		movs	r6, #9
  52 000c 0294     		str	r4, [sp, #8]
  53 000e 2846     		mov	r0, r5
  54 0010 CDE90067 		strd	r6, r7, [sp]
  55 0014 1B23     		movs	r3, #27
  56 0016 3522     		movs	r2, #53
  57 0018 4821     		movs	r1, #72
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s 			page 8


  58 001a 0534     		adds	r4, r4, #5
  59 001c FFF7FEFF 		bl	draw_IndicatorBox
  60              	.LVL1:
  61 0020 CDE90174 		strd	r7, r4, [sp, #4]
  62 0024 0096     		str	r6, [sp]
  63 0026 2846     		mov	r0, r5
  64 0028 1B23     		movs	r3, #27
  65 002a 3522     		movs	r2, #53
  66 002c 6521     		movs	r1, #101
  67 002e FFF7FEFF 		bl	draw_IndicatorBox
  68              	.LVL2:
 343:Src/main.c    ****   }
 344:Src/main.c    **** }
  69              		.loc 1 344 0
  70 0032 05B0     		add	sp, sp, #20
  71              	.LCFI2:
  72              		.cfi_def_cfa_offset 20
  73              		@ sp needed
  74 0034 F0BD     		pop	{r4, r5, r6, r7, pc}
  75              	.L5:
  76 0036 00BF     		.align	2
  77              	.L4:
  78 0038 00000000 		.word	u8g2
  79 003c 00000000 		.word	.LANCHOR0
  80              		.cfi_endproc
  81              	.LFE126:
  83              		.section	.text.draw_MeasLabels,"ax",%progbits
  84              		.align	1
  85              		.p2align 2,,3
  86              		.global	draw_MeasLabels
  87              		.syntax unified
  88              		.thumb
  89              		.thumb_func
  90              		.fpu fpv4-sp-d16
  92              	draw_MeasLabels:
  93              	.LFB127:
 345:Src/main.c    **** 
 346:Src/main.c    **** void draw_MeasLabels(){
  94              		.loc 1 346 0
  95              		.cfi_startproc
  96              		@ args = 0, pretend = 0, frame = 0
  97              		@ frame_needed = 0, uses_anonymous_args = 0
  98              	.LVL3:
  99 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 100              	.LCFI3:
 101              		.cfi_def_cfa_offset 20
 102              		.cfi_offset 4, -20
 103              		.cfi_offset 5, -16
 104              		.cfi_offset 6, -12
 105              		.cfi_offset 7, -8
 106              		.cfi_offset 14, -4
 347:Src/main.c    ****   uint8_t n;
 348:Src/main.c    ****   uint8_t x, y;
 349:Src/main.c    ****   // draw measurements label & unit
 350:Src/main.c    ****   for( n=0; n<3; n++ ){
 351:Src/main.c    **** 	  x = meas_x;
 352:Src/main.c    **** 	  y = (n % 3) * meas_height	+ meas_y;
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s 			page 9


 353:Src/main.c    **** 	  draw_MeasLabelUnit(&u8g2, x, y, meas_width1, meas_height, meas_name[n], meas_unit[n]);
 107              		.loc 1 353 0
 108 0002 334C     		ldr	r4, .L8
 109 0004 334E     		ldr	r6, .L8+4
 110 0006 344F     		ldr	r7, .L8+8
 346:Src/main.c    ****   uint8_t n;
 111              		.loc 1 346 0
 112 0008 87B0     		sub	sp, sp, #28
 113              	.LCFI4:
 114              		.cfi_def_cfa_offset 48
 115              		.loc 1 353 0
 116 000a 0C25     		movs	r5, #12
 117 000c 0297     		str	r7, [sp, #8]
 118 000e 2046     		mov	r0, r4
 119 0010 CDE90056 		strd	r5, r6, [sp]
 120 0014 4623     		movs	r3, #70
 121 0016 1022     		movs	r2, #16
 122 0018 0021     		movs	r1, #0
 123 001a FFF7FEFF 		bl	draw_MeasLabelUnit
 124              	.LVL4:
 125 001e 7A1D     		adds	r2, r7, #5
 126 0020 F31D     		adds	r3, r6, #7
 127 0022 CDE90132 		strd	r3, r2, [sp, #4]
 128 0026 2046     		mov	r0, r4
 129 0028 0095     		str	r5, [sp]
 130 002a 4623     		movs	r3, #70
 131 002c 1C22     		movs	r2, #28
 132 002e 0021     		movs	r1, #0
 133 0030 FFF7FEFF 		bl	draw_MeasLabelUnit
 134              	.LVL5:
 135 0034 07F10A02 		add	r2, r7, #10
 136 0038 06F10E03 		add	r3, r6, #14
 137 003c CDE90132 		strd	r3, r2, [sp, #4]
 138 0040 2046     		mov	r0, r4
 139 0042 0095     		str	r5, [sp]
 140 0044 4623     		movs	r3, #70
 141 0046 2822     		movs	r2, #40
 142 0048 0021     		movs	r1, #0
 143 004a FFF7FEFF 		bl	draw_MeasLabelUnit
 144              	.LVL6:
 354:Src/main.c    ****   }
 355:Src/main.c    ****   for( n=3; n<N_meas; n++ ){
 356:Src/main.c    **** 	  x = meas_width1 + meas_x + meas_x_offset;
 357:Src/main.c    **** 	  y = (n % 3) * meas_height	+ meas_y;
 358:Src/main.c    **** 	  draw_MeasLabelUnit(&u8g2, x, y, meas_width2, meas_height, meas_name[n], meas_unit[n]);
 145              		.loc 1 358 0
 146 004e 07F10F02 		add	r2, r7, #15
 147 0052 06F11503 		add	r3, r6, #21
 148 0056 CDE90132 		strd	r3, r2, [sp, #4]
 149 005a 2046     		mov	r0, r4
 150 005c 0095     		str	r5, [sp]
 151 005e 3823     		movs	r3, #56
 152 0060 1022     		movs	r2, #16
 153 0062 4821     		movs	r1, #72
 154 0064 FFF7FEFF 		bl	draw_MeasLabelUnit
 155              	.LVL7:
 156 0068 07F11402 		add	r2, r7, #20
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s 			page 10


 157 006c 06F11C03 		add	r3, r6, #28
 158 0070 CDE90132 		strd	r3, r2, [sp, #4]
 159 0074 2046     		mov	r0, r4
 160 0076 0095     		str	r5, [sp]
 161 0078 3823     		movs	r3, #56
 162 007a 1C22     		movs	r2, #28
 163 007c 4821     		movs	r1, #72
 164 007e 1937     		adds	r7, r7, #25
 165 0080 2336     		adds	r6, r6, #35
 166 0082 FFF7FEFF 		bl	draw_MeasLabelUnit
 167              	.LVL8:
 168 0086 CDE90167 		strd	r6, r7, [sp, #4]
 169 008a 2046     		mov	r0, r4
 170 008c 0095     		str	r5, [sp]
 171 008e 3823     		movs	r3, #56
 172 0090 2822     		movs	r2, #40
 173 0092 4821     		movs	r1, #72
 174 0094 FFF7FEFF 		bl	draw_MeasLabelUnit
 175              	.LVL9:
 359:Src/main.c    ****   }
 360:Src/main.c    **** 
 361:Src/main.c    ****   // Fuel Pump voltage & duty
 362:Src/main.c    ****   draw_MeasLabelUnit(&u8g2, FP_x, FP_y, FP_duty_width, FP_height, "DUTY", "%  ");
 176              		.loc 1 362 0
 177 0098 104E     		ldr	r6, .L8+12
 178 009a 114B     		ldr	r3, .L8+16
 179 009c 0095     		str	r5, [sp]
 180 009e 2046     		mov	r0, r4
 181 00a0 CDE90136 		strd	r3, r6, [sp, #4]
 182 00a4 3422     		movs	r2, #52
 183 00a6 4623     		movs	r3, #70
 184 00a8 0021     		movs	r1, #0
 185 00aa FFF7FEFF 		bl	draw_MeasLabelUnit
 186              	.LVL10:
 363:Src/main.c    ****   draw_Value(&u8g2, FP_x, FP_y, FP_duty_width, FP_height, 100, 3, 0, 0, "%  ");
 187              		.loc 1 363 0
 188 00ae 0021     		movs	r1, #0
 189 00b0 0322     		movs	r2, #3
 190 00b2 6423     		movs	r3, #100
 191 00b4 CDE90132 		strd	r3, r2, [sp, #4]
 192 00b8 0596     		str	r6, [sp, #20]
 193 00ba 0095     		str	r5, [sp]
 194 00bc 2046     		mov	r0, r4
 195 00be CDE90311 		strd	r1, r1, [sp, #12]
 196 00c2 4623     		movs	r3, #70
 197 00c4 3422     		movs	r2, #52
 198 00c6 FFF7FEFF 		bl	draw_Value
 199              	.LVL11:
 364:Src/main.c    **** }
 200              		.loc 1 364 0
 201 00ca 07B0     		add	sp, sp, #28
 202              	.LCFI5:
 203              		.cfi_def_cfa_offset 20
 204              		@ sp needed
 205 00cc F0BD     		pop	{r4, r5, r6, r7, pc}
 206              	.L9:
 207 00ce 00BF     		.align	2
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s 			page 11


 208              	.L8:
 209 00d0 00000000 		.word	u8g2
 210 00d4 00000000 		.word	.LANCHOR2
 211 00d8 00000000 		.word	.LANCHOR1
 212 00dc 00000000 		.word	.LC0
 213 00e0 04000000 		.word	.LC1
 214              		.cfi_endproc
 215              	.LFE127:
 217              		.section	.text.draw_MeasLabels_Rotary,"ax",%progbits
 218              		.align	1
 219              		.p2align 2,,3
 220              		.global	draw_MeasLabels_Rotary
 221              		.syntax unified
 222              		.thumb
 223              		.thumb_func
 224              		.fpu fpv4-sp-d16
 226              	draw_MeasLabels_Rotary:
 227              	.LFB128:
 365:Src/main.c    **** 
 366:Src/main.c    **** void draw_MeasLabels_Rotary(){
 228              		.loc 1 366 0
 229              		.cfi_startproc
 230              		@ args = 0, pretend = 0, frame = 0
 231              		@ frame_needed = 0, uses_anonymous_args = 0
 232              	.LVL12:
 233 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 234              	.LCFI6:
 235              		.cfi_def_cfa_offset 24
 236              		.cfi_offset 4, -24
 237              		.cfi_offset 5, -20
 238              		.cfi_offset 6, -16
 239              		.cfi_offset 7, -12
 240              		.cfi_offset 8, -8
 241              		.cfi_offset 14, -4
 242 0004 0D4E     		ldr	r6, .L14
 243 0006 0E4D     		ldr	r5, .L14+4
 367:Src/main.c    ****   uint8_t n;
 368:Src/main.c    ****   uint8_t x, y;
 369:Src/main.c    ****   // draw measurements label & unit
 370:Src/main.c    ****   for( n=0; n<4; n++ ){
 371:Src/main.c    **** 	  x = meas_x;
 372:Src/main.c    **** 	  y = (n % 4) * meas_height	+ meas_y;
 373:Src/main.c    **** 	  draw_MeasLabelUnit(&u8g2, x, y, meas_width1, meas_height, meas_name[n], meas_unit[n]);
 244              		.loc 1 373 0
 245 0008 DFF83880 		ldr	r8, .L14+8
 366:Src/main.c    ****   uint8_t n;
 246              		.loc 1 366 0
 247 000c 84B0     		sub	sp, sp, #16
 248              	.LCFI7:
 249              		.cfi_def_cfa_offset 40
 366:Src/main.c    ****   uint8_t n;
 250              		.loc 1 366 0
 251 000e 1024     		movs	r4, #16
 252              		.loc 1 373 0
 253 0010 0C27     		movs	r7, #12
 254              	.LVL13:
 255              	.L11:
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s 			page 12


 256              		.loc 1 373 0 is_stmt 0 discriminator 3
 257 0012 2246     		mov	r2, r4
 258 0014 0C34     		adds	r4, r4, #12
 259              	.LVL14:
 260 0016 CDE90165 		strd	r6, r5, [sp, #4]
 261 001a 0097     		str	r7, [sp]
 262 001c 4623     		movs	r3, #70
 263 001e 0021     		movs	r1, #0
 264 0020 4046     		mov	r0, r8
 265 0022 E4B2     		uxtb	r4, r4
 266 0024 FFF7FEFF 		bl	draw_MeasLabelUnit
 267              	.LVL15:
 370:Src/main.c    **** 	  x = meas_x;
 268              		.loc 1 370 0 is_stmt 1 discriminator 3
 269 0028 402C     		cmp	r4, #64
 270 002a 06F10706 		add	r6, r6, #7
 271 002e 05F10505 		add	r5, r5, #5
 272 0032 EED1     		bne	.L11
 374:Src/main.c    ****   }
 375:Src/main.c    **** }
 273              		.loc 1 375 0
 274 0034 04B0     		add	sp, sp, #16
 275              	.LCFI8:
 276              		.cfi_def_cfa_offset 24
 277              		@ sp needed
 278 0036 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 279              	.L15:
 280 003a 00BF     		.align	2
 281              	.L14:
 282 003c 00000000 		.word	.LANCHOR2
 283 0040 00000000 		.word	.LANCHOR1
 284 0044 00000000 		.word	u8g2
 285              		.cfi_endproc
 286              	.LFE128:
 288              		.section	.text.HAL_ADC_ConvCpltCallback,"ax",%progbits
 289              		.align	1
 290              		.p2align 2,,3
 291              		.global	HAL_ADC_ConvCpltCallback
 292              		.syntax unified
 293              		.thumb
 294              		.thumb_func
 295              		.fpu fpv4-sp-d16
 297              	HAL_ADC_ConvCpltCallback:
 298              	.LFB129:
 376:Src/main.c    **** 
 377:Src/main.c    **** 
 378:Src/main.c    **** // ADC buffer definition
 379:Src/main.c    **** enum{ ADC_BUFFER_LENGTH = 10 };
 380:Src/main.c    **** uint16_t g_ADCBuffer[ADC_BUFFER_LENGTH];
 381:Src/main.c    **** uint16_t adc[ADC_BUFFER_LENGTH];  
 382:Src/main.c    **** 
 383:Src/main.c    **** void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 299              		.loc 1 383 0
 300              		.cfi_startproc
 301              		@ args = 0, pretend = 0, frame = 0
 302              		@ frame_needed = 0, uses_anonymous_args = 0
 303              		@ link register save eliminated.
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s 			page 13


 304              	.LVL16:
 305 0000 054B     		ldr	r3, .L19
 306 0002 064A     		ldr	r2, .L19+4
 307 0004 03F11400 		add	r0, r3, #20
 308              	.LVL17:
 309              	.L17:
 310              	.LBB23:
 384:Src/main.c    **** 	for (unsigned int i =0; i<ADC_BUFFER_LENGTH; i++){
 385:Src/main.c    **** 	   adc[i] = g_ADCBuffer[i];  // store the values in adc[]
 311              		.loc 1 385 0 discriminator 3
 312 0008 33F8021B 		ldrh	r1, [r3], #2
 313 000c 22F8021B 		strh	r1, [r2], #2	@ movhi
 384:Src/main.c    **** 	for (unsigned int i =0; i<ADC_BUFFER_LENGTH; i++){
 314              		.loc 1 384 0 discriminator 3
 315 0010 8342     		cmp	r3, r0
 316 0012 F9D1     		bne	.L17
 317              	.LBE23:
 386:Src/main.c    **** 	}
 387:Src/main.c    **** }
 318              		.loc 1 387 0
 319 0014 7047     		bx	lr
 320              	.L20:
 321 0016 00BF     		.align	2
 322              	.L19:
 323 0018 00000000 		.word	g_ADCBuffer
 324 001c 00000000 		.word	adc
 325              		.cfi_endproc
 326              	.LFE129:
 328              		.section	.text.SystemClock_Config,"ax",%progbits
 329              		.align	1
 330              		.p2align 2,,3
 331              		.global	SystemClock_Config
 332              		.syntax unified
 333              		.thumb
 334              		.thumb_func
 335              		.fpu fpv4-sp-d16
 337              	SystemClock_Config:
 338              	.LFB131:
 388:Src/main.c    **** 
 389:Src/main.c    **** /* USER CODE END 0 */
 390:Src/main.c    **** 
 391:Src/main.c    **** /**
 392:Src/main.c    ****   * @brief  The application entry point.
 393:Src/main.c    ****   * @retval int
 394:Src/main.c    ****   */
 395:Src/main.c    **** int main(void)
 396:Src/main.c    **** {
 397:Src/main.c    ****   /* USER CODE BEGIN 1 */
 398:Src/main.c    **** 
 399:Src/main.c    ****   /* USER CODE END 1 */
 400:Src/main.c    ****   
 401:Src/main.c    **** 
 402:Src/main.c    ****   /* MCU Configuration--------------------------------------------------------*/
 403:Src/main.c    **** 
 404:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 405:Src/main.c    ****   HAL_Init();
 406:Src/main.c    **** 
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s 			page 14


 407:Src/main.c    ****   /* USER CODE BEGIN Init */
 408:Src/main.c    ****   uint8_t n;
 409:Src/main.c    ****   uint8_t x, y;
 410:Src/main.c    **** 
 411:Src/main.c    ****   uint8_t a = 0; // for dummy data
 412:Src/main.c    ****   uint8_t b = 0; // for dummy data
 413:Src/main.c    **** 
 414:Src/main.c    ****   // ROTARY
 415:Src/main.c    ****   uint16_t rpm_integral;
 416:Src/main.c    ****   uint8_t index_animation;
 417:Src/main.c    **** 
 418:Src/main.c    ****   // circular buffer for ADC data
 419:Src/main.c    ****   uint16_t circular_buffer_index = 0;
 420:Src/main.c    ****   int16_t circular_buffer[128]={};
 421:Src/main.c    **** 
 422:Src/main.c    ****   /* USER CODE END Init */
 423:Src/main.c    **** 
 424:Src/main.c    ****   /* Configure the system clock */
 425:Src/main.c    ****   SystemClock_Config();
 426:Src/main.c    **** 
 427:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 428:Src/main.c    **** 
 429:Src/main.c    ****   /* USER CODE END SysInit */
 430:Src/main.c    **** 
 431:Src/main.c    ****   /* Initialize all configured peripherals */
 432:Src/main.c    ****   MX_GPIO_Init();
 433:Src/main.c    ****   MX_DMA_Init();
 434:Src/main.c    ****   MX_ADC1_Init();
 435:Src/main.c    ****   MX_CAN_Init();
 436:Src/main.c    ****   MX_I2C1_Init();
 437:Src/main.c    ****   MX_SPI1_Init();
 438:Src/main.c    ****   MX_TIM1_Init();
 439:Src/main.c    ****   MX_TIM2_Init();
 440:Src/main.c    ****   MX_TIM3_Init();
 441:Src/main.c    ****   MX_TIM6_Init();
 442:Src/main.c    ****   MX_USART1_UART_Init();
 443:Src/main.c    ****   MX_USART2_UART_Init();
 444:Src/main.c    ****   /* USER CODE BEGIN 2 */
 445:Src/main.c    **** 
 446:Src/main.c    ****   ///// PWM initialize ----------------------------------------------------------------
 447:Src/main.c    **** 
 448:Src/main.c    ****   ///// Timer /////
 449:Src/main.c    ****   // TIM1 - PWM for Fuel Pump Driver (Cycle 100kHz = 1MHz / 100count)
 450:Src/main.c    ****   /*
 451:Src/main.c    ****   if (HAL_TIM_Base_Start_IT(&htim1) != HAL_OK)
 452:Src/main.c    ****   {
 453:Src/main.c    ****     Error_Handler();
 454:Src/main.c    ****   }
 455:Src/main.c    ****   */
 456:Src/main.c    ****   // Start Timer1 / ch1
 457:Src/main.c    ****   if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1) != HAL_OK)
 458:Src/main.c    ****   {
 459:Src/main.c    ****     Error_Handler();
 460:Src/main.c    ****   }
 461:Src/main.c    **** 
 462:Src/main.c    ****   // TIM2 - display (Cycle 20ms = 1/100kHz x 2,000count)
 463:Src/main.c    ****   if (HAL_TIM_Base_Start_IT(&htim2) != HAL_OK)
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s 			page 15


 464:Src/main.c    ****   {
 465:Src/main.c    ****     Error_Handler();
 466:Src/main.c    ****   }
 467:Src/main.c    **** 
 468:Src/main.c    ****   // TIM3 - Pulse counter for Tacho (f 200kHz, count 65535)
 469:Src/main.c    ****   if (HAL_TIM_Base_Start_IT(&htim3) != HAL_OK)
 470:Src/main.c    ****   {
 471:Src/main.c    ****     Error_Handler();
 472:Src/main.c    ****   }
 473:Src/main.c    **** 
 474:Src/main.c    ****   // TIM6 - SW interrupt control (Cycle 100ms = 1/100kHz x 10,000count)
 475:Src/main.c    ****   if (HAL_TIM_Base_Start_IT(&htim6) != HAL_OK)
 476:Src/main.c    ****   {
 477:Src/main.c    ****     Error_Handler();
 478:Src/main.c    ****   }
 479:Src/main.c    **** 
 480:Src/main.c    ****   // ADC
 481:Src/main.c    ****   HAL_ADC_Start_DMA(&hadc1, g_ADCBuffer, ADC_BUFFER_LENGTH);
 482:Src/main.c    **** 
 483:Src/main.c    ****   // UART1 interrupt setup for DEFI decoder
 484:Src/main.c    ****   HAL_UART_Receive_IT(&huart1, &UART1_Data, 1);
 485:Src/main.c    ****   // variables is defined in 'defi.h'
 486:Src/main.c    **** 
 487:Src/main.c    ****   // CAN initialization
 488:Src/main.c    ****   CAN_OBD_Init();
 489:Src/main.c    **** 
 490:Src/main.c    **** 
 491:Src/main.c    ****   // OLED diaplay initialization
 492:Src/main.c    ****   u8g2_Setup_ssd1309_128x64_noname2_f(&u8g2, U8G2_R0, u8x8_byte_4wire_hw_spi, u8x8_gpio_and_delay_S
 493:Src/main.c    **** 
 494:Src/main.c    ****   // OLED display Reset (must be more than 3us!!)
 495:Src/main.c    ****   HAL_GPIO_WritePin( GPIOB, GPIO_PIN_3, 0); // Set RES=L (OLED Reset)
 496:Src/main.c    ****   HAL_Delay(5);
 497:Src/main.c    ****   HAL_GPIO_WritePin( GPIOB, GPIO_PIN_3, 1); // Set RES=H (OLED activate)
 498:Src/main.c    ****   u8g2_InitDisplay(&u8g2); // send init sequence to the display, display is in sleep mode after thi
 499:Src/main.c    ****   u8g2_SetPowerSave(&u8g2, 0); // wake up display
 500:Src/main.c    ****   u8g2_SetContrast(&u8g2, 255); // set contrast
 501:Src/main.c    ****   u8g2_ClearDisplay(&u8g2);
 502:Src/main.c    **** 
 503:Src/main.c    ****   // draw opening
 504:Src/main.c    ****   u8g2_DrawXBMP(&u8g2, 40, 0, logo_width, logo_height, logo_bits );
 505:Src/main.c    **** 
 506:Src/main.c    ****   u8g2_SetFont(&u8g2, u8g2_font_5x7_tf);
 507:Src/main.c    ****   u8g2_DrawStr(&u8g2, 16, 63 - 8, "Multi Function Meter");
 508:Src/main.c    ****   u8g2_DrawStr(&u8g2, 40, 64, "Rev. 0.2a");
 509:Src/main.c    ****   u8g2_SendBuffer(&u8g2);
 510:Src/main.c    **** 
 511:Src/main.c    ****   HAL_Delay(1000);
 512:Src/main.c    **** 
 513:Src/main.c    ****   u8g2_ClearBuffer(&u8g2);
 514:Src/main.c    **** 
 515:Src/main.c    ****   HAL_UART_Transmit_printf(&huart2, "Hello. This is MFM.\n");
 516:Src/main.c    **** 
 517:Src/main.c    ****   // Set PWM Duty for Timer1 / Output1 (Asymmetric PWM2)
 518:Src/main.c    ****   TIM1->CCR1 = (100 - FP_duty);
 519:Src/main.c    **** 
 520:Src/main.c    ****   /* USER CODE END 2 */
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s 			page 16


 521:Src/main.c    **** 
 522:Src/main.c    ****   /* Infinite loop */
 523:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 524:Src/main.c    **** 
 525:Src/main.c    ****   draw_MeasLabels();
 526:Src/main.c    ****   draw_indicators();
 527:Src/main.c    ****   u8g2_SendBuffer(&u8g2);
 528:Src/main.c    **** 
 529:Src/main.c    **** 
 530:Src/main.c    ****   // I2C communication to ADXL345(3-axis G-sensor)
 531:Src/main.c    ****   Gsens_EN = Gsens_ADXL345_Init(0);
 532:Src/main.c    **** /*
 533:Src/main.c    ****   // DEIVID
 534:Src/main.c    ****   a = ADXL345_RegRead_1byte(ADXL0_ADDR, 0x00);
 535:Src/main.c    ****   HAL_UART_Transmit_printf(&huart2, "ADXL324 DEVID %d\n", a); // debug
 536:Src/main.c    ****   if( a == 0xE5 ){
 537:Src/main.c    ****     Gsens_EN = 1;
 538:Src/main.c    ****   }else{
 539:Src/main.c    ****     Gsens_EN = 0;
 540:Src/main.c    ****   }
 541:Src/main.c    **** 
 542:Src/main.c    ****   // POWER_CTL
 543:Src/main.c    ****   ADXL345_RegWrite(ADXL0_ADDR, 0x2D, 0x08);
 544:Src/main.c    ****   // bit 3    Measure   1'b1
 545:Src/main.c    ****   a = ADXL345_RegRead_1byte(ADXL0_ADDR, 0x2D); // Check
 546:Src/main.c    **** 
 547:Src/main.c    ****   // DATA_FORMAT
 548:Src/main.c    ****   ADXL345_RegWrite(ADXL0_ADDR, 0x31, 0x05);
 549:Src/main.c    ****   // bit 2    Justify   1'b1
 550:Src/main.c    ****   // bit 1:0  Range     2'b01
 551:Src/main.c    ****   a = ADXL345_RegRead_1byte(ADXL0_ADDR, 0x31); // Check "POWER_CTL"
 552:Src/main.c    **** */
 553:Src/main.c    **** 
 554:Src/main.c    ****   while(1)
 555:Src/main.c    ****   {
 556:Src/main.c    ****     /* USER CODE END WHILE */
 557:Src/main.c    **** 
 558:Src/main.c    ****     /* USER CODE BEGIN 3 */
 559:Src/main.c    **** 
 560:Src/main.c    ****     ///// ADC ----------------------------------------------------------------
 561:Src/main.c    **** 
 562:Src/main.c    **** 		// read O2 sensor ADC output
 563:Src/main.c    **** //		O2_volt = (int16_t)(330 * (float)g_ADCBuffer[0]/255);
 564:Src/main.c    **** 		O2_volt = (int16_t)(330 * (float)adc[0]/255);
 565:Src/main.c    **** 
 566:Src/main.c    **** 		// read Fuel Pump Voltage ADC output
 567:Src/main.c    **** //		FP_volt = (int16_t)((165/33)*33*(float)g_ADCBuffer[1]/255);
 568:Src/main.c    **** 		FP_volt = (int16_t)((165/33)*33*(float)adc[1]/255);
 569:Src/main.c    ****     // Ressister attenation ratio '165/33'
 570:Src/main.c    ****     
 571:Src/main.c    ****     ///// Fuel Pump ----------------------------------------------------------------
 572:Src/main.c    ****     // Duty calculation
 573:Src/main.c    ****     if( (rpm >= 3000)|(DEFI_value[0] >= 0) ){
 574:Src/main.c    ****       FP_duty = 100;
 575:Src/main.c    ****     }else{
 576:Src/main.c    ****       FP_duty = (int16_t)(rpm/3000*100);
 577:Src/main.c    ****     }
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s 			page 17


 578:Src/main.c    ****     // Saturation process
 579:Src/main.c    ****     if( FP_duty > 100 ){
 580:Src/main.c    ****       FP_duty = 100;
 581:Src/main.c    ****     }else if( FP_duty < 60 ){
 582:Src/main.c    ****       FP_duty = 60;
 583:Src/main.c    ****     }
 584:Src/main.c    **** 
 585:Src/main.c    ****     ///// CAN ----------------------------------------------------------------
 586:Src/main.c    **** 
 587:Src/main.c    **** //    CAN_OBD_Response(MAP, rpm, SPEED, THROTTLE);
 588:Src/main.c    ****     CAN_OBD_Response(DEFI_value[0], rpm, 0x00, 0x00);
 589:Src/main.c    **** 
 590:Src/main.c    ****     ///// Measure data  ----------------------------------------------------------------
 591:Src/main.c    ****     defi_decoder(UART1_RxData); // DEFI decoder
 592:Src/main.c    **** 
 593:Src/main.c    ****     if( flag_meas == 1 ){
 594:Src/main.c    **** 
 595:Src/main.c    ****       // I2C communication to ADXL345(3-axis G-sensor)
 596:Src/main.c    ****       if( Gsens_EN == 1 ){
 597:Src/main.c    ****         /*
 598:Src/main.c    ****         // Justify = 0
 599:Src/main.c    ****         Gsens_X1 = ADXL345_RegRead_1byte(ADXL0_ADDR, 0x33); // Check "DATAX1" (MSB side)
 600:Src/main.c    ****         Gsens_X0 = ADXL345_RegRead_1byte(ADXL0_ADDR, 0x32); // Check "DATAX0" (LSB side)
 601:Src/main.c    ****         Gsens_X = (Gsens_X1<<8) | Gsens_X0;
 602:Src/main.c    ****         Gsens_Y1 = ADXL345_RegRead_1byte(ADXL0_ADDR, 0x35); // Check "DATAY1" (MSB side)
 603:Src/main.c    ****         Gsens_Y0 = ADXL345_RegRead_1byte(ADXL0_ADDR, 0x34); // Check "DATAY0" (LSB side)
 604:Src/main.c    ****         Gsens_Y = (Gsens_Y1<<8) | Gsens_Y0;
 605:Src/main.c    ****         Gsens_Z1 = ADXL345_RegRead_1byte(ADXL0_ADDR, 0x37); // Check "DATAZ1" (MSB side)
 606:Src/main.c    ****         Gsens_Z0 = ADXL345_RegRead_1byte(ADXL0_ADDR, 0x36); // Check "DATAZ0" (LSB side)
 607:Src/main.c    ****         Gsens_Z = (Gsens_Z1<<8) | Gsens_Z0;
 608:Src/main.c    ****         HAL_UART_Transmit_printf(&huart2, "(%d,%d,%d)\n", Gsens_X, Gsens_Y, Gsens_Z); // debug
 609:Src/main.c    ****         */
 610:Src/main.c    **** 
 611:Src/main.c    ****         // Justify = 1
 612:Src/main.c    ****         Gsens_X1 = ADXL345_RegRead_1byte(ADXL0_ADDR, 0x33); // Check "DATAX1" (MSB side)
 613:Src/main.c    ****         Gsens_Y1 = ADXL345_RegRead_1byte(ADXL0_ADDR, 0x35); // Check "DATAY1" (MSB side)
 614:Src/main.c    ****         Gsens_Z1 = ADXL345_RegRead_1byte(ADXL0_ADDR, 0x37); // Check "DATAZ1" (MSB side)
 615:Src/main.c    ****         // Acceration 1G = 100
 616:Src/main.c    ****         Gsens_X = 400 * (int8_t)Gsens_X1 / 128; // unsigned->signed & scaling
 617:Src/main.c    ****         Gsens_Y = 400 * (int8_t)Gsens_Y1 / 128; // unsigned->signed & scaling
 618:Src/main.c    ****         Gsens_Z = 400 * (int8_t)Gsens_Z1 / 128; // unsigned->signed & scaling
 619:Src/main.c    **** 
 620:Src/main.c    ****         HAL_UART_Transmit_printf(&huart2, "(%d,%d,%d)\n", Gsens_X, Gsens_Y, Gsens_Z); // debug
 621:Src/main.c    ****         
 622:Src/main.c    ****         
 623:Src/main.c    ****       }
 624:Src/main.c    **** 
 625:Src/main.c    **** 
 626:Src/main.c    **** /*
 627:Src/main.c    ****   	  // start of create dummy data for debug
 628:Src/main.c    ****       if( rpm <= 8200 ){
 629:Src/main.c    ****           rpm = rpm + (int)(20*MT[gear]);
 630:Src/main.c    ****           //rpm=rpm+10;
 631:Src/main.c    ****       }else{
 632:Src/main.c    ****         if( gear < 4 ){
 633:Src/main.c    ****           gear++;
 634:Src/main.c    ****           rpm = (double)speed / (0.002*60.0) * (MT[gear]*4.1);
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s 			page 18


 635:Src/main.c    ****         }else{
 636:Src/main.c    ****           gear = 0;
 637:Src/main.c    ****           rpm = 1000;
 638:Src/main.c    ****         }
 639:Src/main.c    ****       }
 640:Src/main.c    ****       speed = (double)rpm*0.002*60.0/MT[gear]/4.1;
 641:Src/main.c    **** 
 642:Src/main.c    ****       if( a >= 150){
 643:Src/main.c    ****         a = 0;
 644:Src/main.c    ****       }else{
 645:Src/main.c    ****         a++;
 646:Src/main.c    ****       }
 647:Src/main.c    ****   	  // end of create dummy data for debug
 648:Src/main.c    **** */
 649:Src/main.c    **** 
 650:Src/main.c    ****       meas_value[0] = DEFI_value[0];  // MAP
 651:Src/main.c    **** 		  meas_value[1] = DEFI_value[2];  // OILP
 652:Src/main.c    **** 			meas_value[2] = FP_volt;        // FuelPump Voltage
 653:Src/main.c    **** 		  meas_value[3] = DEFI_value[6];  // ECT
 654:Src/main.c    **** 			meas_value[4] = DEFI_value[5];  // OILT
 655:Src/main.c    **** 		  meas_value[5] = O2_volt;        // O2
 656:Src/main.c    **** 
 657:Src/main.c    ****       flag_meas = 0; // enable again by TIM2 interrupt
 658:Src/main.c    ****     }
 659:Src/main.c    **** 
 660:Src/main.c    **** 
 661:Src/main.c    ****     ///// FP driver ----------------------------------------------------------------
 662:Src/main.c    ****     // Set PWM Duty for Timer1 / Output1 (Asymmetric PWM2)
 663:Src/main.c    ****     TIM1->CCR1 = (100 - FP_duty);
 664:Src/main.c    **** 
 665:Src/main.c    **** 
 666:Src/main.c    ****     ///// Switch ----------------------------------------------------------------
 667:Src/main.c    ****     if( flag_sw != 0 ){
 668:Src/main.c    ****       switch( flag_sw ){
 669:Src/main.c    ****         case 1:
 670:Src/main.c    ****           HAL_UART_Transmit_printf(&huart2, "UP ");
 671:Src/main.c    ****           HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 672:Src/main.c    ****           // SW "UP"
 673:Src/main.c    ****           if( setting == 0 ){
 674:Src/main.c    ****             if( mode == N_mode-1 ){
 675:Src/main.c    ****               mode = 0;
 676:Src/main.c    ****             }else{
 677:Src/main.c    ****               mode++;
 678:Src/main.c    ****             }
 679:Src/main.c    ****           }
 680:Src/main.c    ****           break;
 681:Src/main.c    ****         case 2:
 682:Src/main.c    ****           HAL_UART_Transmit_printf(&huart2, "DOWN ");
 683:Src/main.c    ****           HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 684:Src/main.c    ****           // SW "DOWN"
 685:Src/main.c    ****           if( setting == 0 ){
 686:Src/main.c    ****             if( mode == 0 ){
 687:Src/main.c    ****               mode = N_mode-1;
 688:Src/main.c    ****             }else{
 689:Src/main.c    ****               mode--;
 690:Src/main.c    ****             }
 691:Src/main.c    ****           }
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s 			page 19


 692:Src/main.c    ****           break;
 693:Src/main.c    ****         case 3:
 694:Src/main.c    ****           HAL_UART_Transmit_printf(&huart2, "ENTER ");
 695:Src/main.c    ****           HAL_NVIC_DisableIRQ (EXTI1_IRQn);
 696:Src/main.c    ****           // SW "ENTER"
 697:Src/main.c    **** 
 698:Src/main.c    ****           // if( setting == 0 ){
 699:Src/main.c    ****           //   mode = cursor;
 700:Src/main.c    ****           //   u8g2_ClearBuffer(&u8g2);
 701:Src/main.c    ****           // }else{
 702:Src/main.c    ****           //   mode = 10;
 703:Src/main.c    ****           // }
 704:Src/main.c    ****           // break;
 705:Src/main.c    **** 
 706:Src/main.c    ****         default:
 707:Src/main.c    ****           break;
 708:Src/main.c    ****       }
 709:Src/main.c    ****       u8g2_ClearBuffer(&u8g2);
 710:Src/main.c    ****       if( mode == MODE_BAR_METER ){
 711:Src/main.c    ****         draw_MeasLabels();
 712:Src/main.c    ****         draw_indicators();
 713:Src/main.c    **** 
 714:Src/main.c    ****       }else if( mode == MODE_CIRCULAR_METER ){
 715:Src/main.c    ****         for( n=0; n<N_meas_C; n++ ){
 716:Src/main.c    ****           x = meas_C_x;
 717:Src/main.c    ****           y = n * meas_C_height	+ meas_C_y;
 718:Src/main.c    ****           draw_MeasLabelUnit(&u8g2, x, y, meas_C_width, meas_C_height, meas_name[n], meas_unit[n]);
 719:Src/main.c    ****         }
 720:Src/main.c    ****         // draw indicators
 721:Src/main.c    ****         for( n=0; n<4; n++ ){
 722:Src/main.c    ****           draw_IndicatorBox(&u8g2, idct_x+(idct_width+2)*n, idct_y, idct_width, idct_height, idct_s
 723:Src/main.c    ****         }
 724:Src/main.c    ****         draw_CircularMeter_Init(32, 32, 31, 3, -60, 300, 10, 20, -1, -80, 120);
 725:Src/main.c    **** //        draw_CircularMeter_Init(26, 26, 26, 3, -60, 300, 10, 20, -1, -80, 120);
 726:Src/main.c    ****         draw_CircularMeter(&u8g2, 0);
 727:Src/main.c    **** /*
 728:Src/main.c    ****       }else if( mode == MODE_ROTARY ){
 729:Src/main.c    ****         draw_MeasLabels_Rotary();
 730:Src/main.c    ****         draw_MeasLabelUnit(&u8g2, 0, 2, meas_width1, meas_height, "TACHO", "rpm");
 731:Src/main.c    **** */
 732:Src/main.c    ****       }else if( mode == MODE_SCOPE_MAP ){
 733:Src/main.c    ****         draw_Wave_axis(&u8g2, wave_x, wave_y, wave_width, wave_height, wave_value_min, wave_value_m
 734:Src/main.c    ****         draw_MeasLabelUnit(&u8g2, 0, 0, 64, 13, "MAP", "kPa");
 735:Src/main.c    **** 
 736:Src/main.c    ****       }else if( mode == MODE_SCOPE_Gsens ){
 737:Src/main.c    ****         draw_Wave_axis(&u8g2, wave_x, wave_y, wave_width, wave_height, -200, 200, 4);
 738:Src/main.c    ****         draw_MeasLabelUnit(&u8g2, 0, 0, 64, 13, "LatG", "G");
 739:Src/main.c    **** 
 740:Src/main.c    ****       }
 741:Src/main.c    ****       u8g2_SendBuffer(&u8g2);
 742:Src/main.c    ****       TIM6->CNT = 0;
 743:Src/main.c    ****       flag_sw = 0;
 744:Src/main.c    ****     }
 745:Src/main.c    **** 
 746:Src/main.c    **** 
 747:Src/main.c    ****     ///// Display sequence ----------------------------------------------------------------
 748:Src/main.c    ****     if( flag_disp ){
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s 			page 20


 749:Src/main.c    **** 
 750:Src/main.c    ****       ///// multi meter /////
 751:Src/main.c    ****       if( mode == MODE_BAR_METER ){
 752:Src/main.c    ****         // update Fuel Pump Voltage
 753:Src/main.c    ****         draw_Value(&u8g2, FP_x, FP_y, FP_duty_width, FP_height, FP_duty, 3, 0, 0, "%  ");
 754:Src/main.c    **** 
 755:Src/main.c    ****         // draw bar graph
 756:Src/main.c    ****         draw_BarGraph(&u8g2, rpmbar_x, rpmbar_y, rpmbar_width, rpmbar_height, rpm, rpm_min, rpm_max
 757:Src/main.c    **** 
 758:Src/main.c    ****         // draw measurement data
 759:Src/main.c    ****         for( n=0; n<3; n++ ){
 760:Src/main.c    ****           x = meas_x;
 761:Src/main.c    ****           y = (n % 3) * meas_height	+ meas_y;
 762:Src/main.c    ****           draw_Value(&u8g2, x, y, meas_width1, meas_height, meas_value[n], meas_digit[n], meas_frac
 763:Src/main.c    ****         }
 764:Src/main.c    ****         for( n=3; n<N_meas; n++ ){
 765:Src/main.c    ****           x = meas_width1 + meas_x + meas_x_offset;
 766:Src/main.c    ****           y = (n % 3) * meas_height	+ meas_y;
 767:Src/main.c    ****           draw_Value(&u8g2, x, y, meas_width2, meas_height, meas_value[n], meas_digit[n], meas_frac
 768:Src/main.c    ****         }
 769:Src/main.c    ****         
 770:Src/main.c    ****       ///// Circular Meter /////
 771:Src/main.c    ****       }else if( mode == MODE_CIRCULAR_METER ){
 772:Src/main.c    **** 
 773:Src/main.c    ****         draw_CircularMeter(&u8g2, meas_value[0]);
 774:Src/main.c    ****         
 775:Src/main.c    ****         draw_Value(&u8g2, 36, 33, 30, 16, meas_value[0], 3, 2, 1, "");
 776:Src/main.c    ****         draw_MeasUnit(&u8g2, 38, 40, 28, 16, "kPa");
 777:Src/main.c    **** /*        
 778:Src/main.c    ****         draw_Value(&u8g2, 34, 28, 30, 16, meas_value[0], 3, 2, 1, "");
 779:Src/main.c    ****         draw_MeasUnit(&u8g2, 36, 36, 28, 16, "kPa");
 780:Src/main.c    **** */
 781:Src/main.c    **** 
 782:Src/main.c    ****         // draw measurement data
 783:Src/main.c    ****         for( n=0; n<N_meas_C; n++ ){
 784:Src/main.c    ****           x = meas_C_x;
 785:Src/main.c    ****           y = n * meas_C_height	+ meas_C_y;
 786:Src/main.c    ****           draw_Value(&u8g2, x, y, meas_C_width, meas_C_height, meas_value[n], meas_digit[n], meas_f
 787:Src/main.c    ****         }
 788:Src/main.c    **** 
 789:Src/main.c    **** /*
 790:Src/main.c    ****       }else if( mode == MODE_ROTARY ){
 791:Src/main.c    **** 
 792:Src/main.c    ****         rpm_integral = rpm_integral + rpm;
 793:Src/main.c    ****         if( rpm_integral > 4000 ){
 794:Src/main.c    ****           rpm_integral = rpm_integral - 4000;
 795:Src/main.c    ****         }
 796:Src/main.c    ****         index_animation = (uint8_t)( (float)rpm_integral / 1000.0 );
 797:Src/main.c    **** 
 798:Src/main.c    ****         draw_Rotary(&u8g2, 58, 2, index_animation);
 799:Src/main.c    **** 
 800:Src/main.c    ****         draw_MeasLabelUnit(&u8g2, 0, 2, meas_width1, meas_height, "TACHO", "rpm");
 801:Src/main.c    ****         draw_Value(&u8g2, 0, 2, meas_width1, meas_height, rpm, 4, 0, 0, "rpm");
 802:Src/main.c    **** 
 803:Src/main.c    ****         draw_MeasLabels_Rotary();
 804:Src/main.c    ****         // draw measurement data
 805:Src/main.c    ****         for( n=0; n<4; n++ ){
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s 			page 21


 806:Src/main.c    ****           x = meas_x;
 807:Src/main.c    ****           y = (n % 4) * meas_height	+ meas_y;
 808:Src/main.c    ****           draw_Value(&u8g2, x, y, meas_width1, meas_height, meas_value[n], meas_digit[n], meas_frac
 809:Src/main.c    ****         }
 810:Src/main.c    **** */
 811:Src/main.c    **** 
 812:Src/main.c    ****       ///// Scope /////
 813:Src/main.c    ****       }else if( mode == MODE_SCOPE_MAP ){
 814:Src/main.c    **** 
 815:Src/main.c    ****         if( circular_buffer_index > 0 ){
 816:Src/main.c    ****           circular_buffer_index--;
 817:Src/main.c    ****         }else{
 818:Src/main.c    ****           circular_buffer_index = 128;
 819:Src/main.c    ****         }
 820:Src/main.c    ****         circular_buffer[circular_buffer_index] = meas_value[0];
 821:Src/main.c    **** 
 822:Src/main.c    ****         // draw wave
 823:Src/main.c    ****         draw_Wave(&u8g2, wave_x, wave_y, wave_width, wave_height, wave_value_min, wave_value_max, c
 824:Src/main.c    ****         draw_Value(&u8g2, 0, 0, 64, 13, circular_buffer[circular_buffer_index], 3, 2, 1, "kPa");
 825:Src/main.c    **** 
 826:Src/main.c    ****       ///// G-Scope /////
 827:Src/main.c    ****       }else if( mode == MODE_SCOPE_Gsens ){
 828:Src/main.c    **** 
 829:Src/main.c    ****         if( circular_buffer_index > 0 ){
 830:Src/main.c    ****           circular_buffer_index--;
 831:Src/main.c    ****         }else{
 832:Src/main.c    ****           circular_buffer_index = 128;
 833:Src/main.c    ****         }
 834:Src/main.c    ****         circular_buffer[circular_buffer_index] = Gsens_Y;
 835:Src/main.c    **** 
 836:Src/main.c    ****         // draw wave
 837:Src/main.c    ****         draw_Wave(&u8g2, wave_x, wave_y, wave_width, wave_height, -200, +200, circular_buffer, circ
 838:Src/main.c    ****         draw_Value(&u8g2, 0, 0, 64, 13, circular_buffer[circular_buffer_index], 3, 2, 1, "G");
 839:Src/main.c    **** 
 840:Src/main.c    ****       // mode setting
 841:Src/main.c    ****       }else if( mode == MODE_SETTING ){
 842:Src/main.c    **** 
 843:Src/main.c    ****         u8g2_ClearBuffer(&u8g2);
 844:Src/main.c    ****         u8g2_SetFont(&u8g2, u8g2_font_7x14B_tf);
 845:Src/main.c    ****         u8g2_DrawStr(&u8g2, 2, 15, "Mode Setting" );
 846:Src/main.c    ****         if( cursor == 0 ){
 847:Src/main.c    ****           u8g2_DrawStr(&u8g2, 2, 30, ">" );
 848:Src/main.c    ****         }else{
 849:Src/main.c    ****           u8g2_DrawStr(&u8g2, 2, 30, " " );
 850:Src/main.c    ****         }
 851:Src/main.c    ****         u8g2_DrawStr(&u8g2,10, 30, "Multi-Meter" );
 852:Src/main.c    ****         if( cursor == 1 ){
 853:Src/main.c    ****           u8g2_DrawStr(&u8g2, 2, 45, ">" );
 854:Src/main.c    ****         }else{
 855:Src/main.c    ****           u8g2_DrawStr(&u8g2, 2, 45, " " );
 856:Src/main.c    ****         }
 857:Src/main.c    ****         u8g2_DrawStr(&u8g2,10, 45, "Scope" );
 858:Src/main.c    ****         u8g2_SendBuffer(&u8g2);
 859:Src/main.c    ****       }
 860:Src/main.c    ****       // send buffer
 861:Src/main.c    ****       u8g2_SendBuffer(&u8g2);
 862:Src/main.c    **** 
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s 			page 22


 863:Src/main.c    ****       flag_disp = 0; // enable again by TIM2 interrupt
 864:Src/main.c    ****     }
 865:Src/main.c    **** 
 866:Src/main.c    ****   }
 867:Src/main.c    ****   /* USER CODE END 3 */
 868:Src/main.c    **** }
 869:Src/main.c    **** 
 870:Src/main.c    **** /**
 871:Src/main.c    ****   * @brief System Clock Configuration
 872:Src/main.c    ****   * @retval None
 873:Src/main.c    ****   */
 874:Src/main.c    **** void SystemClock_Config(void)
 875:Src/main.c    **** {
 339              		.loc 1 875 0
 340              		.cfi_startproc
 341              		@ args = 0, pretend = 0, frame = 88
 342              		@ frame_needed = 0, uses_anonymous_args = 0
 343 0000 30B5     		push	{r4, r5, lr}
 344              	.LCFI9:
 345              		.cfi_def_cfa_offset 12
 346              		.cfi_offset 4, -12
 347              		.cfi_offset 5, -8
 348              		.cfi_offset 14, -4
 349 0002 97B0     		sub	sp, sp, #92
 350              	.LCFI10:
 351              		.cfi_def_cfa_offset 104
 876:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 352              		.loc 1 876 0
 353 0004 0023     		movs	r3, #0
 877:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 878:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 879:Src/main.c    **** 
 880:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 881:Src/main.c    ****   */
 882:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 354              		.loc 1 882 0
 355 0006 0324     		movs	r4, #3
 883:Src/main.c    ****   RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 356              		.loc 1 883 0
 357 0008 4FF4A022 		mov	r2, #327680
 884:Src/main.c    ****   RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 885:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 358              		.loc 1 885 0
 359 000c 0120     		movs	r0, #1
 876:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 360              		.loc 1 876 0
 361 000e CDE90E33 		strd	r3, r3, [sp, #56]
 362 0012 1293     		str	r3, [sp, #72]
 877:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 363              		.loc 1 877 0
 364 0014 0193     		str	r3, [sp, #4]
 878:Src/main.c    **** 
 365              		.loc 1 878 0
 366 0016 0693     		str	r3, [sp, #24]
 877:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 367              		.loc 1 877 0
 368 0018 CDE90233 		strd	r3, r3, [sp, #8]
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s 			page 23


 369 001c CDE90433 		strd	r3, r3, [sp, #16]
 878:Src/main.c    **** 
 370              		.loc 1 878 0
 371 0020 CDE90733 		strd	r3, r3, [sp, #28]
 372 0024 CDE90933 		strd	r3, r3, [sp, #36]
 373 0028 0B93     		str	r3, [sp, #44]
 886:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 374              		.loc 1 886 0
 375 002a 1021     		movs	r1, #16
 882:Src/main.c    ****   RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 376              		.loc 1 882 0
 377 002c 0C94     		str	r4, [sp, #48]
 883:Src/main.c    ****   RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 378              		.loc 1 883 0
 379 002e 0D92     		str	r2, [sp, #52]
 887:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 380              		.loc 1 887 0
 381 0030 0224     		movs	r4, #2
 888:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 382              		.loc 1 888 0
 383 0032 4FF48032 		mov	r2, #65536
 885:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 384              		.loc 1 885 0
 385 0036 1090     		str	r0, [sp, #64]
 889:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 386              		.loc 1 889 0
 387 0038 4FF4E013 		mov	r3, #1835008
 890:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 388              		.loc 1 890 0
 389 003c 0CA8     		add	r0, sp, #48
 886:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 390              		.loc 1 886 0
 391 003e 1191     		str	r1, [sp, #68]
 888:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 392              		.loc 1 888 0
 393 0040 CDE91342 		strd	r4, r2, [sp, #76]
 889:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 394              		.loc 1 889 0
 395 0044 1593     		str	r3, [sp, #84]
 396              		.loc 1 890 0
 397 0046 FFF7FEFF 		bl	HAL_RCC_OscConfig
 398              	.LVL18:
 399 004a 00B1     		cbz	r0, .L22
 400              	.L23:
 401 004c FEE7     		b	.L23
 402              	.L22:
 403 004e 0346     		mov	r3, r0
 891:Src/main.c    ****   {
 892:Src/main.c    ****     Error_Handler();
 893:Src/main.c    ****   }
 894:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 895:Src/main.c    ****   */
 896:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 897:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 898:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 899:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 900:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s 			page 24


 404              		.loc 1 900 0
 405 0050 4FF48062 		mov	r2, #1024
 901:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 902:Src/main.c    **** 
 903:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 406              		.loc 1 903 0
 407 0054 01A8     		add	r0, sp, #4
 408 0056 2146     		mov	r1, r4
 896:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 409              		.loc 1 896 0
 410 0058 0F25     		movs	r5, #15
 899:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 411              		.loc 1 899 0
 412 005a 0393     		str	r3, [sp, #12]
 901:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 413              		.loc 1 901 0
 414 005c 0593     		str	r3, [sp, #20]
 898:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 415              		.loc 1 898 0
 416 005e 0294     		str	r4, [sp, #8]
 896:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 417              		.loc 1 896 0
 418 0060 0195     		str	r5, [sp, #4]
 900:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 419              		.loc 1 900 0
 420 0062 0492     		str	r2, [sp, #16]
 421              		.loc 1 903 0
 422 0064 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 423              	.LVL19:
 424 0068 0346     		mov	r3, r0
 425 006a 00B1     		cbz	r0, .L24
 426              	.L25:
 427 006c FEE7     		b	.L25
 428              	.L24:
 904:Src/main.c    ****   {
 905:Src/main.c    ****     Error_Handler();
 906:Src/main.c    ****   }
 907:Src/main.c    ****   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 429              		.loc 1 907 0
 430 006e 41F22102 		movw	r2, #4129
 908:Src/main.c    ****                               |RCC_PERIPHCLK_TIM1;
 909:Src/main.c    ****   PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 910:Src/main.c    ****   PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 911:Src/main.c    ****   PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 912:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 431              		.loc 1 912 0
 432 0072 06A8     		add	r0, sp, #24
 910:Src/main.c    ****   PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 433              		.loc 1 910 0
 434 0074 CDE90833 		strd	r3, r3, [sp, #32]
 911:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 435              		.loc 1 911 0
 436 0078 0B93     		str	r3, [sp, #44]
 907:Src/main.c    ****                               |RCC_PERIPHCLK_TIM1;
 437              		.loc 1 907 0
 438 007a 0692     		str	r2, [sp, #24]
 439              		.loc 1 912 0
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s 			page 25


 440 007c FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 441              	.LVL20:
 442 0080 00B1     		cbz	r0, .L21
 443              	.L27:
 444 0082 FEE7     		b	.L27
 445              	.L21:
 913:Src/main.c    ****   {
 914:Src/main.c    ****     Error_Handler();
 915:Src/main.c    ****   }
 916:Src/main.c    **** }
 446              		.loc 1 916 0
 447 0084 17B0     		add	sp, sp, #92
 448              	.LCFI11:
 449              		.cfi_def_cfa_offset 12
 450              		@ sp needed
 451 0086 30BD     		pop	{r4, r5, pc}
 452              		.cfi_endproc
 453              	.LFE131:
 455              		.section	.text.startup.main,"ax",%progbits
 456              		.align	1
 457              		.p2align 2,,3
 458              		.global	main
 459              		.syntax unified
 460              		.thumb
 461              		.thumb_func
 462              		.fpu fpv4-sp-d16
 464              	main:
 465              	.LFB130:
 396:Src/main.c    ****   /* USER CODE BEGIN 1 */
 466              		.loc 1 396 0
 467              		.cfi_startproc
 468              		@ args = 0, pretend = 0, frame = 272
 469              		@ frame_needed = 0, uses_anonymous_args = 0
 470 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 471              	.LCFI12:
 472              		.cfi_def_cfa_offset 36
 473              		.cfi_offset 4, -36
 474              		.cfi_offset 5, -32
 475              		.cfi_offset 6, -28
 476              		.cfi_offset 7, -24
 477              		.cfi_offset 8, -20
 478              		.cfi_offset 9, -16
 479              		.cfi_offset 10, -12
 480              		.cfi_offset 11, -8
 481              		.cfi_offset 14, -4
 482 0004 2DED048B 		vpush.64	{d8, d9}
 483              	.LCFI13:
 484              		.cfi_def_cfa_offset 52
 485              		.cfi_offset 80, -52
 486              		.cfi_offset 81, -48
 487              		.cfi_offset 82, -44
 488              		.cfi_offset 83, -40
 489 0008 CDB0     		sub	sp, sp, #308
 490              	.LCFI14:
 491              		.cfi_def_cfa_offset 360
 405:Src/main.c    **** 
 492              		.loc 1 405 0
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s 			page 26


 493 000a FFF7FEFF 		bl	HAL_Init
 494              	.LVL21:
 420:Src/main.c    **** 
 495              		.loc 1 420 0
 496 000e 0021     		movs	r1, #0
 497 0010 4FF48072 		mov	r2, #256
 498 0014 0CA8     		add	r0, sp, #48
 499 0016 FFF7FEFF 		bl	memset
 500              	.LVL22:
 425:Src/main.c    **** 
 501              		.loc 1 425 0
 502 001a FFF7FEFF 		bl	SystemClock_Config
 503              	.LVL23:
 432:Src/main.c    ****   MX_DMA_Init();
 504              		.loc 1 432 0
 505 001e FFF7FEFF 		bl	MX_GPIO_Init
 506              	.LVL24:
 433:Src/main.c    ****   MX_ADC1_Init();
 507              		.loc 1 433 0
 508 0022 FFF7FEFF 		bl	MX_DMA_Init
 509              	.LVL25:
 434:Src/main.c    ****   MX_CAN_Init();
 510              		.loc 1 434 0
 511 0026 FFF7FEFF 		bl	MX_ADC1_Init
 512              	.LVL26:
 435:Src/main.c    ****   MX_I2C1_Init();
 513              		.loc 1 435 0
 514 002a FFF7FEFF 		bl	MX_CAN_Init
 515              	.LVL27:
 436:Src/main.c    ****   MX_SPI1_Init();
 516              		.loc 1 436 0
 517 002e FFF7FEFF 		bl	MX_I2C1_Init
 518              	.LVL28:
 437:Src/main.c    ****   MX_TIM1_Init();
 519              		.loc 1 437 0
 520 0032 FFF7FEFF 		bl	MX_SPI1_Init
 521              	.LVL29:
 438:Src/main.c    ****   MX_TIM2_Init();
 522              		.loc 1 438 0
 523 0036 FFF7FEFF 		bl	MX_TIM1_Init
 524              	.LVL30:
 439:Src/main.c    ****   MX_TIM3_Init();
 525              		.loc 1 439 0
 526 003a FFF7FEFF 		bl	MX_TIM2_Init
 527              	.LVL31:
 440:Src/main.c    ****   MX_TIM6_Init();
 528              		.loc 1 440 0
 529 003e FFF7FEFF 		bl	MX_TIM3_Init
 530              	.LVL32:
 441:Src/main.c    ****   MX_USART1_UART_Init();
 531              		.loc 1 441 0
 532 0042 FFF7FEFF 		bl	MX_TIM6_Init
 533              	.LVL33:
 442:Src/main.c    ****   MX_USART2_UART_Init();
 534              		.loc 1 442 0
 535 0046 FFF7FEFF 		bl	MX_USART1_UART_Init
 536              	.LVL34:
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s 			page 27


 443:Src/main.c    ****   /* USER CODE BEGIN 2 */
 537              		.loc 1 443 0
 538 004a FFF7FEFF 		bl	MX_USART2_UART_Init
 539              	.LVL35:
 457:Src/main.c    ****   {
 540              		.loc 1 457 0
 541 004e 0021     		movs	r1, #0
 542 0050 B948     		ldr	r0, .L109
 543 0052 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 544              	.LVL36:
 545 0056 00B1     		cbz	r0, .L30
 546              	.L31:
 547 0058 FEE7     		b	.L31
 548              	.L30:
 463:Src/main.c    ****   {
 549              		.loc 1 463 0
 550 005a B848     		ldr	r0, .L109+4
 551 005c FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 552              	.LVL37:
 553 0060 00B1     		cbz	r0, .L32
 554              	.L33:
 555 0062 FEE7     		b	.L33
 556              	.L32:
 469:Src/main.c    ****   {
 557              		.loc 1 469 0
 558 0064 B648     		ldr	r0, .L109+8
 559 0066 FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 560              	.LVL38:
 561 006a 00B1     		cbz	r0, .L34
 562              	.L35:
 563 006c FEE7     		b	.L35
 564              	.L34:
 475:Src/main.c    ****   {
 565              		.loc 1 475 0
 566 006e B548     		ldr	r0, .L109+12
 567 0070 FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 568              	.LVL39:
 569 0074 0646     		mov	r6, r0
 570 0076 00B1     		cbz	r0, .L36
 571              	.L37:
 572 0078 FEE7     		b	.L37
 573              	.L36:
 481:Src/main.c    **** 
 574              		.loc 1 481 0
 575 007a 0A22     		movs	r2, #10
 576 007c B249     		ldr	r1, .L109+16
 577 007e B348     		ldr	r0, .L109+20
 518:Src/main.c    **** 
 578              		.loc 1 518 0
 579 0080 B34D     		ldr	r5, .L109+24
 580 0082 DFF84C83 		ldr	r8, .L109+152
 581 0086 B34C     		ldr	r4, .L109+28
 582 0088 DFF848A3 		ldr	r10, .L109+156
 583 008c DFF84893 		ldr	r9, .L109+160
 584 0090 DFF848B3 		ldr	fp, .L109+164
 585              	.LBB24:
 564:Src/main.c    **** 
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s 			page 28


 586              		.loc 1 564 0
 587 0094 9FEDB09A 		vldr.32	s18, .L109+32
 588 0098 9FEDB08A 		vldr.32	s16, .L109+36
 568:Src/main.c    ****     // Ressister attenation ratio '165/33'
 589              		.loc 1 568 0
 590 009c DFEDB08A 		vldr.32	s17, .L109+40
 591              	.LBE24:
 481:Src/main.c    **** 
 592              		.loc 1 481 0
 593 00a0 FFF7FEFF 		bl	HAL_ADC_Start_DMA
 594              	.LVL40:
 484:Src/main.c    ****   // variables is defined in 'defi.h'
 595              		.loc 1 484 0
 596 00a4 0122     		movs	r2, #1
 597 00a6 AF49     		ldr	r1, .L109+44
 598 00a8 AF48     		ldr	r0, .L109+48
 599 00aa FFF7FEFF 		bl	HAL_UART_Receive_IT
 600              	.LVL41:
 488:Src/main.c    **** 
 601              		.loc 1 488 0
 602 00ae FFF7FEFF 		bl	CAN_OBD_Init
 603              	.LVL42:
 492:Src/main.c    **** 
 604              		.loc 1 492 0
 605 00b2 AE4B     		ldr	r3, .L109+52
 606 00b4 AE4A     		ldr	r2, .L109+56
 607 00b6 AF49     		ldr	r1, .L109+60
 608 00b8 AF48     		ldr	r0, .L109+64
 609 00ba FFF7FEFF 		bl	u8g2_Setup_ssd1309_128x64_noname2_f
 610              	.LVL43:
 495:Src/main.c    ****   HAL_Delay(5);
 611              		.loc 1 495 0
 612 00be 3246     		mov	r2, r6
 613 00c0 0821     		movs	r1, #8
 614 00c2 AE48     		ldr	r0, .L109+68
 615 00c4 FFF7FEFF 		bl	HAL_GPIO_WritePin
 616              	.LVL44:
 496:Src/main.c    ****   HAL_GPIO_WritePin( GPIOB, GPIO_PIN_3, 1); // Set RES=H (OLED activate)
 617              		.loc 1 496 0
 618 00c8 0520     		movs	r0, #5
 619 00ca FFF7FEFF 		bl	HAL_Delay
 620              	.LVL45:
 497:Src/main.c    ****   u8g2_InitDisplay(&u8g2); // send init sequence to the display, display is in sleep mode after thi
 621              		.loc 1 497 0
 622 00ce 0122     		movs	r2, #1
 623 00d0 0821     		movs	r1, #8
 624 00d2 AA48     		ldr	r0, .L109+68
 625 00d4 FFF7FEFF 		bl	HAL_GPIO_WritePin
 626              	.LVL46:
 498:Src/main.c    ****   u8g2_SetPowerSave(&u8g2, 0); // wake up display
 627              		.loc 1 498 0
 628 00d8 A748     		ldr	r0, .L109+64
 629 00da FFF7FEFF 		bl	u8x8_InitDisplay
 630              	.LVL47:
 499:Src/main.c    ****   u8g2_SetContrast(&u8g2, 255); // set contrast
 631              		.loc 1 499 0
 632 00de 3146     		mov	r1, r6
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s 			page 29


 633 00e0 A548     		ldr	r0, .L109+64
 634 00e2 FFF7FEFF 		bl	u8x8_SetPowerSave
 635              	.LVL48:
 500:Src/main.c    ****   u8g2_ClearDisplay(&u8g2);
 636              		.loc 1 500 0
 637 00e6 FF21     		movs	r1, #255
 638 00e8 A348     		ldr	r0, .L109+64
 639 00ea FFF7FEFF 		bl	u8x8_SetContrast
 640              	.LVL49:
 501:Src/main.c    **** 
 641              		.loc 1 501 0
 642 00ee A248     		ldr	r0, .L109+64
 643 00f0 FFF7FEFF 		bl	u8g2_ClearDisplay
 644              	.LVL50:
 504:Src/main.c    **** 
 645              		.loc 1 504 0
 646 00f4 A24B     		ldr	r3, .L109+72
 647 00f6 0193     		str	r3, [sp, #4]
 648 00f8 3023     		movs	r3, #48
 649 00fa 0093     		str	r3, [sp]
 650 00fc 3246     		mov	r2, r6
 651 00fe 2821     		movs	r1, #40
 652 0100 9D48     		ldr	r0, .L109+64
 653 0102 FFF7FEFF 		bl	u8g2_DrawXBMP
 654              	.LVL51:
 506:Src/main.c    ****   u8g2_DrawStr(&u8g2, 16, 63 - 8, "Multi Function Meter");
 655              		.loc 1 506 0
 656 0106 9F49     		ldr	r1, .L109+76
 657 0108 9B48     		ldr	r0, .L109+64
 658 010a FFF7FEFF 		bl	u8g2_SetFont
 659              	.LVL52:
 507:Src/main.c    ****   u8g2_DrawStr(&u8g2, 40, 64, "Rev. 0.2a");
 660              		.loc 1 507 0
 661 010e 9E4B     		ldr	r3, .L109+80
 662 0110 9948     		ldr	r0, .L109+64
 663 0112 3722     		movs	r2, #55
 664 0114 1021     		movs	r1, #16
 665 0116 FFF7FEFF 		bl	u8g2_DrawStr
 666              	.LVL53:
 508:Src/main.c    ****   u8g2_SendBuffer(&u8g2);
 667              		.loc 1 508 0
 668 011a 9C4B     		ldr	r3, .L109+84
 669 011c 9648     		ldr	r0, .L109+64
 670 011e 4022     		movs	r2, #64
 671 0120 2821     		movs	r1, #40
 672 0122 FFF7FEFF 		bl	u8g2_DrawStr
 673              	.LVL54:
 509:Src/main.c    **** 
 674              		.loc 1 509 0
 675 0126 9448     		ldr	r0, .L109+64
 676 0128 FFF7FEFF 		bl	u8g2_SendBuffer
 677              	.LVL55:
 511:Src/main.c    **** 
 678              		.loc 1 511 0
 679 012c 4FF47A70 		mov	r0, #1000
 680 0130 FFF7FEFF 		bl	HAL_Delay
 681              	.LVL56:
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s 			page 30


 513:Src/main.c    **** 
 682              		.loc 1 513 0
 683 0134 9048     		ldr	r0, .L109+64
 684 0136 FFF7FEFF 		bl	u8g2_ClearBuffer
 685              	.LVL57:
 515:Src/main.c    **** 
 686              		.loc 1 515 0
 687 013a 9549     		ldr	r1, .L109+88
 688 013c 9548     		ldr	r0, .L109+92
 689 013e FFF7FEFF 		bl	HAL_UART_Transmit_printf
 690              	.LVL58:
 518:Src/main.c    **** 
 691              		.loc 1 518 0
 692 0142 B5F90030 		ldrsh	r3, [r5]
 693 0146 944A     		ldr	r2, .L109+96
 694 0148 C3F16403 		rsb	r3, r3, #100
 695 014c 5363     		str	r3, [r2, #52]
 525:Src/main.c    ****   draw_indicators();
 696              		.loc 1 525 0
 697 014e FFF7FEFF 		bl	draw_MeasLabels
 698              	.LVL59:
 526:Src/main.c    ****   u8g2_SendBuffer(&u8g2);
 699              		.loc 1 526 0
 700 0152 FFF7FEFF 		bl	draw_indicators
 701              	.LVL60:
 527:Src/main.c    **** 
 702              		.loc 1 527 0
 703 0156 8848     		ldr	r0, .L109+64
 704 0158 FFF7FEFF 		bl	u8g2_SendBuffer
 705              	.LVL61:
 531:Src/main.c    **** /*
 706              		.loc 1 531 0
 707 015c 3046     		mov	r0, r6
 708 015e FFF7FEFF 		bl	Gsens_ADXL345_Init
 709              	.LVL62:
 710 0162 8E4B     		ldr	r3, .L109+100
 419:Src/main.c    ****   int16_t circular_buffer[128]={};
 711              		.loc 1 419 0
 712 0164 0A96     		str	r6, [sp, #40]
 531:Src/main.c    **** /*
 713              		.loc 1 531 0
 714 0166 1870     		strb	r0, [r3]
 715 0168 2DE0     		b	.L63
 716              	.LVL63:
 717              	.L42:
 718              	.LBB35:
 663:Src/main.c    **** 
 719              		.loc 1 663 0
 720 016a B5F90030 		ldrsh	r3, [r5]
 721 016e 8A4A     		ldr	r2, .L109+96
 722 0170 C3F16403 		rsb	r3, r3, #100
 723 0174 5363     		str	r3, [r2, #52]
 667:Src/main.c    ****       switch( flag_sw ){
 724              		.loc 1 667 0
 725 0176 8A4B     		ldr	r3, .L109+104
 726 0178 1B68     		ldr	r3, [r3]
 727 017a 03B3     		cbz	r3, .L47
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s 			page 31


 668:Src/main.c    ****         case 1:
 728              		.loc 1 668 0
 729 017c 022B     		cmp	r3, #2
 730 017e 00F0C780 		beq	.L49
 731 0182 032B     		cmp	r3, #3
 732 0184 00F0A780 		beq	.L50
 733 0188 012B     		cmp	r3, #1
 734 018a 00F0AC80 		beq	.L96
 735              	.L48:
 709:Src/main.c    ****       if( mode == MODE_BAR_METER ){
 736              		.loc 1 709 0
 737 018e 7A48     		ldr	r0, .L109+64
 738 0190 FFF7FEFF 		bl	u8g2_ClearBuffer
 739              	.LVL64:
 710:Src/main.c    ****         draw_MeasLabels();
 740              		.loc 1 710 0
 741 0194 834B     		ldr	r3, .L109+108
 742 0196 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 743 0198 002B     		cmp	r3, #0
 744 019a 7FD0     		beq	.L97
 714:Src/main.c    ****         for( n=0; n<N_meas_C; n++ ){
 745              		.loc 1 714 0
 746 019c 012B     		cmp	r3, #1
 747 019e 00F01F81 		beq	.L98
 732:Src/main.c    ****         draw_Wave_axis(&u8g2, wave_x, wave_y, wave_width, wave_height, wave_value_min, wave_value_m
 748              		.loc 1 732 0
 749 01a2 022B     		cmp	r3, #2
 750 01a4 00F0A681 		beq	.L99
 736:Src/main.c    ****         draw_Wave_axis(&u8g2, wave_x, wave_y, wave_width, wave_height, -200, 200, 4);
 751              		.loc 1 736 0
 752 01a8 032B     		cmp	r3, #3
 753 01aa 00F0C181 		beq	.L100
 754              	.L57:
 741:Src/main.c    ****       TIM6->CNT = 0;
 755              		.loc 1 741 0
 756 01ae 7248     		ldr	r0, .L109+64
 757 01b0 FFF7FEFF 		bl	u8g2_SendBuffer
 758              	.LVL65:
 742:Src/main.c    ****       flag_sw = 0;
 759              		.loc 1 742 0
 760 01b4 7C4A     		ldr	r2, .L109+112
 761 01b6 0023     		movs	r3, #0
 762 01b8 5362     		str	r3, [r2, #36]
 743:Src/main.c    ****     }
 763              		.loc 1 743 0
 764 01ba 794A     		ldr	r2, .L109+104
 765 01bc 1360     		str	r3, [r2]
 766              	.L47:
 748:Src/main.c    **** 
 767              		.loc 1 748 0
 768 01be DBF80030 		ldr	r3, [fp]
 769 01c2 002B     		cmp	r3, #0
 770 01c4 6FD1     		bne	.L101
 771              	.L63:
 564:Src/main.c    **** 
 772              		.loc 1 564 0
 773 01c6 794B     		ldr	r3, .L109+116
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s 			page 32


 774 01c8 7948     		ldr	r0, .L109+120
 775 01ca 1A88     		ldrh	r2, [r3]
 568:Src/main.c    ****     // Ressister attenation ratio '165/33'
 776              		.loc 1 568 0
 777 01cc 5B88     		ldrh	r3, [r3, #2]
 564:Src/main.c    **** 
 778              		.loc 1 564 0
 779 01ce 07EE102A 		vmov	s14, r2	@ int
 568:Src/main.c    ****     // Ressister attenation ratio '165/33'
 780              		.loc 1 568 0
 781 01d2 07EE903A 		vmov	s15, r3	@ int
 564:Src/main.c    **** 
 782              		.loc 1 564 0
 783 01d6 B8EE477A 		vcvt.f32.u32	s14, s14
 568:Src/main.c    ****     // Ressister attenation ratio '165/33'
 784              		.loc 1 568 0
 785 01da F8EE677A 		vcvt.f32.u32	s15, s15
 564:Src/main.c    **** 
 786              		.loc 1 564 0
 787 01de 27EE097A 		vmul.f32	s14, s14, s18
 568:Src/main.c    ****     // Ressister attenation ratio '165/33'
 788              		.loc 1 568 0
 789 01e2 67EEA87A 		vmul.f32	s15, s15, s17
 564:Src/main.c    **** 
 790              		.loc 1 564 0
 791 01e6 C7EE086A 		vdiv.f32	s13, s14, s16
 573:Src/main.c    ****       FP_duty = 100;
 792              		.loc 1 573 0
 793 01ea B8F80030 		ldrh	r3, [r8]
 794 01ee 2288     		ldrh	r2, [r4]
 795 01f0 1BB2     		sxth	r3, r3
 796 01f2 40F6B731 		movw	r1, #2999
 797 01f6 8B42     		cmp	r3, r1
 798 01f8 12B2     		sxth	r2, r2
 568:Src/main.c    ****     // Ressister attenation ratio '165/33'
 799              		.loc 1 568 0
 800 01fa 87EE887A 		vdiv.f32	s14, s15, s16
 564:Src/main.c    **** 
 801              		.loc 1 564 0
 802 01fe FDEEE66A 		vcvt.s32.f32	s13, s13
 568:Src/main.c    ****     // Ressister attenation ratio '165/33'
 803              		.loc 1 568 0
 804 0202 BDEEC77A 		vcvt.s32.f32	s14, s14
 564:Src/main.c    **** 
 805              		.loc 1 564 0
 806 0206 16EE906A 		vmov	r6, s13	@ int
 807 020a 0680     		strh	r6, [r0]	@ movhi
 568:Src/main.c    ****     // Ressister attenation ratio '165/33'
 808              		.loc 1 568 0
 809 020c 6948     		ldr	r0, .L109+124
 810 020e 17EE106A 		vmov	r6, s14	@ int
 811 0212 0680     		strh	r6, [r0]	@ movhi
 573:Src/main.c    ****       FP_duty = 100;
 812              		.loc 1 573 0
 813 0214 14DC     		bgt	.L41
 814 0216 002A     		cmp	r2, #0
 815 0218 12DA     		bge	.L41
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s 			page 33


 576:Src/main.c    ****     }
 816              		.loc 1 576 0
 817 021a B8F80030 		ldrh	r3, [r8]
 818 021e 664A     		ldr	r2, .L109+128
 819 0220 1BB2     		sxth	r3, r3
 820 0222 82FB0312 		smull	r1, r2, r2, r3
 821 0226 DB17     		asrs	r3, r3, #31
 822 0228 C3EBA213 		rsb	r3, r3, r2, asr #6
 823 022c 03EB8303 		add	r3, r3, r3, lsl #2
 824 0230 03EB8303 		add	r3, r3, r3, lsl #2
 825 0234 9B00     		lsls	r3, r3, #2
 826 0236 1BB2     		sxth	r3, r3
 579:Src/main.c    ****       FP_duty = 100;
 827              		.loc 1 579 0
 828 0238 642B     		cmp	r3, #100
 576:Src/main.c    ****     }
 829              		.loc 1 576 0
 830 023a 2B80     		strh	r3, [r5]	@ movhi
 579:Src/main.c    ****       FP_duty = 100;
 831              		.loc 1 579 0
 832 023c 40F32A83 		ble	.L102
 833              	.L41:
 574:Src/main.c    ****     }else{
 834              		.loc 1 574 0
 835 0240 6423     		movs	r3, #100
 836 0242 2B80     		strh	r3, [r5]	@ movhi
 837              	.L40:
 588:Src/main.c    **** 
 838              		.loc 1 588 0
 839 0244 2088     		ldrh	r0, [r4]
 840 0246 B8F80010 		ldrh	r1, [r8]
 841 024a 0023     		movs	r3, #0
 842 024c 1A46     		mov	r2, r3
 843 024e C0B2     		uxtb	r0, r0
 844 0250 FFF7FEFF 		bl	CAN_OBD_Response
 845              	.LVL66:
 591:Src/main.c    **** 
 846              		.loc 1 591 0
 847 0254 5948     		ldr	r0, .L109+132
 848 0256 FFF7FEFF 		bl	defi_decoder
 849              	.LVL67:
 593:Src/main.c    **** 
 850              		.loc 1 593 0
 851 025a DAF80030 		ldr	r3, [r10]
 852 025e 012B     		cmp	r3, #1
 853 0260 83D1     		bne	.L42
 596:Src/main.c    ****         /*
 854              		.loc 1 596 0
 855 0262 4E4B     		ldr	r3, .L109+100
 856 0264 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 857 0266 012B     		cmp	r3, #1
 858 0268 00F00981 		beq	.L103
 859              	.L43:
 652:Src/main.c    **** 		  meas_value[3] = DEFI_value[6];  // ECT
 860              		.loc 1 652 0
 861 026c 514A     		ldr	r2, .L109+124
 650:Src/main.c    **** 		  meas_value[1] = DEFI_value[2];  // OILP
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s 			page 34


 862              		.loc 1 650 0
 863 026e 2388     		ldrh	r3, [r4]
 652:Src/main.c    **** 		  meas_value[3] = DEFI_value[6];  // ECT
 864              		.loc 1 652 0
 865 0270 1288     		ldrh	r2, [r2]
 650:Src/main.c    **** 		  meas_value[1] = DEFI_value[2];  // OILP
 866              		.loc 1 650 0
 867 0272 A9F80030 		strh	r3, [r9]	@ movhi
 651:Src/main.c    **** 			meas_value[2] = FP_volt;        // FuelPump Voltage
 868              		.loc 1 651 0
 869 0276 A388     		ldrh	r3, [r4, #4]
 870 0278 A9F80230 		strh	r3, [r9, #2]	@ movhi
 652:Src/main.c    **** 		  meas_value[3] = DEFI_value[6];  // ECT
 871              		.loc 1 652 0
 872 027c A9F80420 		strh	r2, [r9, #4]	@ movhi
 653:Src/main.c    **** 			meas_value[4] = DEFI_value[5];  // OILT
 873              		.loc 1 653 0
 874 0280 A389     		ldrh	r3, [r4, #12]
 655:Src/main.c    **** 
 875              		.loc 1 655 0
 876 0282 4B4A     		ldr	r2, .L109+120
 653:Src/main.c    **** 			meas_value[4] = DEFI_value[5];  // OILT
 877              		.loc 1 653 0
 878 0284 A9F80630 		strh	r3, [r9, #6]	@ movhi
 654:Src/main.c    **** 		  meas_value[5] = O2_volt;        // O2
 879              		.loc 1 654 0
 880 0288 6389     		ldrh	r3, [r4, #10]
 655:Src/main.c    **** 
 881              		.loc 1 655 0
 882 028a 1288     		ldrh	r2, [r2]
 654:Src/main.c    **** 		  meas_value[5] = O2_volt;        // O2
 883              		.loc 1 654 0
 884 028c A9F80830 		strh	r3, [r9, #8]	@ movhi
 657:Src/main.c    ****     }
 885              		.loc 1 657 0
 886 0290 0023     		movs	r3, #0
 655:Src/main.c    **** 
 887              		.loc 1 655 0
 888 0292 A9F80A20 		strh	r2, [r9, #10]	@ movhi
 657:Src/main.c    ****     }
 889              		.loc 1 657 0
 890 0296 CAF80030 		str	r3, [r10]
 891 029a 66E7     		b	.L42
 892              	.L97:
 711:Src/main.c    ****         draw_indicators();
 893              		.loc 1 711 0
 894 029c FFF7FEFF 		bl	draw_MeasLabels
 895              	.LVL68:
 712:Src/main.c    **** 
 896              		.loc 1 712 0
 897 02a0 FFF7FEFF 		bl	draw_indicators
 898              	.LVL69:
 899 02a4 83E7     		b	.L57
 900              	.L101:
 751:Src/main.c    ****         // update Fuel Pump Voltage
 901              		.loc 1 751 0
 902 02a6 3F4B     		ldr	r3, .L109+108
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s 			page 35


 903 02a8 1E78     		ldrb	r6, [r3]	@ zero_extendqisi2
 904 02aa 002E     		cmp	r6, #0
 905 02ac 00F08581 		beq	.L104
 771:Src/main.c    **** 
 906              		.loc 1 771 0
 907 02b0 012E     		cmp	r6, #1
 908 02b2 00F06682 		beq	.L105
 813:Src/main.c    **** 
 909              		.loc 1 813 0
 910 02b6 022E     		cmp	r6, #2
 911 02b8 00F04D81 		beq	.L106
 827:Src/main.c    **** 
 912              		.loc 1 827 0
 913 02bc 032E     		cmp	r6, #3
 914 02be 00F03582 		beq	.L107
 841:Src/main.c    **** 
 915              		.loc 1 841 0
 916 02c2 042E     		cmp	r6, #4
 917 02c4 00F0AE82 		beq	.L108
 918              	.L65:
 919              	.LVL70:
 861:Src/main.c    **** 
 920              		.loc 1 861 0
 921 02c8 2B48     		ldr	r0, .L109+64
 922 02ca FFF7FEFF 		bl	u8g2_SendBuffer
 923              	.LVL71:
 863:Src/main.c    ****     }
 924              		.loc 1 863 0
 925 02ce 0023     		movs	r3, #0
 926 02d0 CBF80030 		str	r3, [fp]
 927 02d4 77E7     		b	.L63
 928              	.LVL72:
 929              	.L50:
 694:Src/main.c    ****           HAL_NVIC_DisableIRQ (EXTI1_IRQn);
 930              		.loc 1 694 0
 931 02d6 3A49     		ldr	r1, .L109+136
 932 02d8 2E48     		ldr	r0, .L109+92
 933 02da FFF7FEFF 		bl	HAL_UART_Transmit_printf
 934              	.LVL73:
 695:Src/main.c    ****           // SW "ENTER"
 935              		.loc 1 695 0
 936 02de 0720     		movs	r0, #7
 937 02e0 FFF7FEFF 		bl	HAL_NVIC_DisableIRQ
 938              	.LVL74:
 939 02e4 53E7     		b	.L48
 940              	.L96:
 670:Src/main.c    ****           HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 941              		.loc 1 670 0
 942 02e6 3749     		ldr	r1, .L109+140
 943 02e8 2A48     		ldr	r0, .L109+92
 944 02ea FFF7FEFF 		bl	HAL_UART_Transmit_printf
 945              	.LVL75:
 671:Src/main.c    ****           // SW "UP"
 946              		.loc 1 671 0
 947 02ee 1720     		movs	r0, #23
 948 02f0 FFF7FEFF 		bl	HAL_NVIC_DisableIRQ
 949              	.LVL76:
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s 			page 36


 673:Src/main.c    ****             if( mode == N_mode-1 ){
 950              		.loc 1 673 0
 951 02f4 344B     		ldr	r3, .L109+144
 952 02f6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 953 02f8 002B     		cmp	r3, #0
 954 02fa 7FF448AF 		bne	.L48
 674:Src/main.c    ****               mode = 0;
 955              		.loc 1 674 0
 956 02fe 294A     		ldr	r2, .L109+108
 957 0300 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 958 0302 042A     		cmp	r2, #4
 959 0304 00F01181 		beq	.L93
 677:Src/main.c    ****             }
 960              		.loc 1 677 0
 961 0308 264B     		ldr	r3, .L109+108
 962 030a 0132     		adds	r2, r2, #1
 963 030c 1A70     		strb	r2, [r3]
 964 030e 3EE7     		b	.L48
 965              	.L49:
 682:Src/main.c    ****           HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 966              		.loc 1 682 0
 967 0310 2E49     		ldr	r1, .L109+148
 968 0312 2048     		ldr	r0, .L109+92
 969 0314 FFF7FEFF 		bl	HAL_UART_Transmit_printf
 970              	.LVL77:
 683:Src/main.c    ****           // SW "DOWN"
 971              		.loc 1 683 0
 972 0318 1720     		movs	r0, #23
 973 031a FFF7FEFF 		bl	HAL_NVIC_DisableIRQ
 974              	.LVL78:
 685:Src/main.c    ****             if( mode == 0 ){
 975              		.loc 1 685 0
 976 031e 2A4B     		ldr	r3, .L109+144
 977 0320 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 978 0322 002B     		cmp	r3, #0
 979 0324 7FF433AF 		bne	.L48
 686:Src/main.c    ****               mode = N_mode-1;
 980              		.loc 1 686 0
 981 0328 1E4A     		ldr	r2, .L109+108
 982 032a 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 983 032c 002B     		cmp	r3, #0
 984 032e 40F0FB80 		bne	.L55
 687:Src/main.c    ****             }else{
 985              		.loc 1 687 0
 986 0332 0423     		movs	r3, #4
 987 0334 1370     		strb	r3, [r2]
 988 0336 2AE7     		b	.L48
 989              	.L110:
 990              		.align	2
 991              	.L109:
 992 0338 00000000 		.word	htim1
 993 033c 00000000 		.word	htim2
 994 0340 00000000 		.word	htim3
 995 0344 00000000 		.word	htim6
 996 0348 00000000 		.word	g_ADCBuffer
 997 034c 00000000 		.word	hadc1
 998 0350 00000000 		.word	.LANCHOR4
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s 			page 37


 999 0354 00000000 		.word	DEFI_value
 1000 0358 0000A543 		.word	1134886912
 1001 035c 00007F43 		.word	1132396544
 1002 0360 00002543 		.word	1126498304
 1003 0364 00000000 		.word	UART1_Data
 1004 0368 00000000 		.word	huart1
 1005 036c 00000000 		.word	u8x8_gpio_and_delay_STM32F303
 1006 0370 00000000 		.word	u8x8_byte_4wire_hw_spi
 1007 0374 00000000 		.word	u8g2_cb_r0
 1008 0378 00000000 		.word	u8g2
 1009 037c 00040048 		.word	1207960576
 1010 0380 00000000 		.word	.LANCHOR3
 1011 0384 00000000 		.word	u8g2_font_5x7_tf
 1012 0388 00000000 		.word	.LC2
 1013 038c 18000000 		.word	.LC3
 1014 0390 24000000 		.word	.LC4
 1015 0394 00000000 		.word	huart2
 1016 0398 002C0140 		.word	1073818624
 1017 039c 00000000 		.word	Gsens_EN
 1018 03a0 00000000 		.word	flag_sw
 1019 03a4 00000000 		.word	mode
 1020 03a8 00100040 		.word	1073745920
 1021 03ac 00000000 		.word	adc
 1022 03b0 00000000 		.word	.LANCHOR5
 1023 03b4 00000000 		.word	.LANCHOR6
 1024 03b8 F1197605 		.word	91625969
 1025 03bc 00000000 		.word	UART1_RxData
 1026 03c0 54000000 		.word	.LC8
 1027 03c4 48000000 		.word	.LC6
 1028 03c8 00000000 		.word	setting
 1029 03cc 4C000000 		.word	.LC7
 1030 03d0 00000000 		.word	rpm
 1031 03d4 00000000 		.word	flag_meas
 1032 03d8 00000000 		.word	.LANCHOR7
 1033 03dc 00000000 		.word	flag_disp
 1034              	.L98:
 1035 03e0 B94B     		ldr	r3, .L111
 1036 03e2 BA4F     		ldr	r7, .L111+4
 1037 03e4 0993     		str	r3, [sp, #36]
 714:Src/main.c    ****         for( n=0; n<N_meas_C; n++ ){
 1038              		.loc 1 714 0
 1039 03e6 0226     		movs	r6, #2
 1040              	.L59:
 1041              	.LVL79:
 1042              	.LBB25:
 718:Src/main.c    ****         }
 1043              		.loc 1 718 0 discriminator 3
 1044 03e8 099B     		ldr	r3, [sp, #36]
 1045 03ea 0297     		str	r7, [sp, #8]
 1046 03ec 0D22     		movs	r2, #13
 1047 03ee 0193     		str	r3, [sp, #4]
 1048 03f0 0092     		str	r2, [sp]
 1049 03f2 3C23     		movs	r3, #60
 1050 03f4 3246     		mov	r2, r6
 1051 03f6 4421     		movs	r1, #68
 1052 03f8 B548     		ldr	r0, .L111+8
 1053 03fa FFF7FEFF 		bl	draw_MeasLabelUnit
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s 			page 38


 1054              	.LVL80:
 1055 03fe 0D36     		adds	r6, r6, #13
 1056              	.LVL81:
 1057 0400 099B     		ldr	r3, [sp, #36]
 1058 0402 F6B2     		uxtb	r6, r6
 1059 0404 0733     		adds	r3, r3, #7
 715:Src/main.c    ****           x = meas_C_x;
 1060              		.loc 1 715 0 discriminator 3
 1061 0406 362E     		cmp	r6, #54
 1062 0408 0993     		str	r3, [sp, #36]
 1063 040a 07F10507 		add	r7, r7, #5
 1064 040e EBD1     		bne	.L59
 1065 0410 B04B     		ldr	r3, .L111+12
 1066 0412 B14F     		ldr	r7, .L111+16
 1067 0414 0993     		str	r3, [sp, #36]
 715:Src/main.c    ****           x = meas_C_x;
 1068              		.loc 1 715 0 is_stmt 0
 1069 0416 4826     		movs	r6, #72
 1070 0418 0123     		movs	r3, #1
 1071              	.L61:
 1072              	.LVL82:
 722:Src/main.c    ****         }
 1073              		.loc 1 722 0 is_stmt 1 discriminator 3
 1074 041a CDE90137 		strd	r3, r7, [sp, #4]
 1075 041e 3146     		mov	r1, r6
 1076 0420 0923     		movs	r3, #9
 1077 0422 1D36     		adds	r6, r6, #29
 1078 0424 0093     		str	r3, [sp]
 1079 0426 3522     		movs	r2, #53
 1080 0428 1B23     		movs	r3, #27
 1081 042a A948     		ldr	r0, .L111+8
 1082 042c F6B2     		uxtb	r6, r6
 1083 042e FFF7FEFF 		bl	draw_IndicatorBox
 1084              	.LVL83:
 721:Src/main.c    ****           draw_IndicatorBox(&u8g2, idct_x+(idct_width+2)*n, idct_y, idct_width, idct_height, idct_s
 1085              		.loc 1 721 0 discriminator 3
 1086 0432 BC2E     		cmp	r6, #188
 1087 0434 07F10507 		add	r7, r7, #5
 1088 0438 04D0     		beq	.L60
 1089 043a 099A     		ldr	r2, [sp, #36]
 1090 043c 12F8013B 		ldrb	r3, [r2], #1	@ zero_extendqisi2
 1091 0440 0992     		str	r2, [sp, #36]
 1092              	.LVL84:
 1093 0442 EAE7     		b	.L61
 1094              	.LVL85:
 1095              	.L60:
 724:Src/main.c    **** //        draw_CircularMeter_Init(26, 26, 26, 3, -60, 300, 10, 20, -1, -80, 120);
 1096              		.loc 1 724 0
 1097 0444 7822     		movs	r2, #120
 1098 0446 6FF04F03 		mvn	r3, #79
 1099 044a 4FF0FF31 		mov	r1, #-1
 1100 044e 0692     		str	r2, [sp, #24]
 1101 0450 0593     		str	r3, [sp, #20]
 1102 0452 0491     		str	r1, [sp, #16]
 1103 0454 1426     		movs	r6, #20
 1104 0456 2021     		movs	r1, #32
 1105 0458 0A20     		movs	r0, #10
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s 			page 39


 1106 045a 4FF49672 		mov	r2, #300
 1107 045e 6FF03B03 		mvn	r3, #59
 1108 0462 CDE90032 		strd	r3, r2, [sp]
 1109 0466 CDE90206 		strd	r0, r6, [sp, #8]
 1110 046a 0323     		movs	r3, #3
 1111 046c 0846     		mov	r0, r1
 1112 046e 1F22     		movs	r2, #31
 1113 0470 FFF7FEFF 		bl	draw_CircularMeter_Init
 1114              	.LVL86:
 726:Src/main.c    **** /*
 1115              		.loc 1 726 0
 1116 0474 0021     		movs	r1, #0
 1117 0476 9648     		ldr	r0, .L111+8
 1118 0478 FFF7FEFF 		bl	draw_CircularMeter
 1119              	.LVL87:
 1120              	.LBE25:
 1121 047c 97E6     		b	.L57
 1122              	.LVL88:
 1123              	.L103:
 612:Src/main.c    ****         Gsens_Y1 = ADXL345_RegRead_1byte(ADXL0_ADDR, 0x35); // Check "DATAY1" (MSB side)
 1124              		.loc 1 612 0
 1125 047e 3321     		movs	r1, #51
 1126 0480 1D20     		movs	r0, #29
 1127 0482 FFF7FEFF 		bl	ADXL345_RegRead_1byte
 1128              	.LVL89:
 1129 0486 954E     		ldr	r6, .L111+20
 618:Src/main.c    **** 
 1130              		.loc 1 618 0
 1131 0488 954F     		ldr	r7, .L111+24
 612:Src/main.c    ****         Gsens_Y1 = ADXL345_RegRead_1byte(ADXL0_ADDR, 0x35); // Check "DATAY1" (MSB side)
 1132              		.loc 1 612 0
 1133 048a 3070     		strb	r0, [r6]
 613:Src/main.c    ****         Gsens_Z1 = ADXL345_RegRead_1byte(ADXL0_ADDR, 0x37); // Check "DATAZ1" (MSB side)
 1134              		.loc 1 613 0
 1135 048c 3521     		movs	r1, #53
 1136 048e 1D20     		movs	r0, #29
 1137 0490 FFF7FEFF 		bl	ADXL345_RegRead_1byte
 1138              	.LVL90:
 1139 0494 934B     		ldr	r3, .L111+28
 614:Src/main.c    ****         // Acceration 1G = 100
 1140              		.loc 1 614 0
 1141 0496 3721     		movs	r1, #55
 613:Src/main.c    ****         Gsens_Z1 = ADXL345_RegRead_1byte(ADXL0_ADDR, 0x37); // Check "DATAZ1" (MSB side)
 1142              		.loc 1 613 0
 1143 0498 1870     		strb	r0, [r3]
 614:Src/main.c    ****         // Acceration 1G = 100
 1144              		.loc 1 614 0
 1145 049a 1D20     		movs	r0, #29
 1146 049c FFF7FEFF 		bl	ADXL345_RegRead_1byte
 1147              	.LVL91:
 1148 04a0 914A     		ldr	r2, .L111+32
 616:Src/main.c    ****         Gsens_Y = 400 * (int8_t)Gsens_Y1 / 128; // unsigned->signed & scaling
 1149              		.loc 1 616 0
 1150 04a2 96F90030 		ldrsb	r3, [r6]
 614:Src/main.c    ****         // Acceration 1G = 100
 1151              		.loc 1 614 0
 1152 04a6 1070     		strb	r0, [r2]
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s 			page 40


 616:Src/main.c    ****         Gsens_Y = 400 * (int8_t)Gsens_Y1 / 128; // unsigned->signed & scaling
 1153              		.loc 1 616 0
 1154 04a8 4FF4C872 		mov	r2, #400
 1155 04ac 02FB03F2 		mul	r2, r2, r3
 617:Src/main.c    ****         Gsens_Z = 400 * (int8_t)Gsens_Z1 / 128; // unsigned->signed & scaling
 1156              		.loc 1 617 0
 1157 04b0 8C4B     		ldr	r3, .L111+28
 1158 04b2 93F90010 		ldrsb	r1, [r3]
 616:Src/main.c    ****         Gsens_Y = 400 * (int8_t)Gsens_Y1 / 128; // unsigned->signed & scaling
 1159              		.loc 1 616 0
 1160 04b6 002A     		cmp	r2, #0
 617:Src/main.c    ****         Gsens_Z = 400 * (int8_t)Gsens_Z1 / 128; // unsigned->signed & scaling
 1161              		.loc 1 617 0
 1162 04b8 4FF4C873 		mov	r3, #400
 1163 04bc 03FB01F3 		mul	r3, r3, r1
 616:Src/main.c    ****         Gsens_Y = 400 * (int8_t)Gsens_Y1 / 128; // unsigned->signed & scaling
 1164              		.loc 1 616 0
 1165 04c0 B8BF     		it	lt
 1166 04c2 7F32     		addlt	r2, r2, #127
 1167 04c4 8949     		ldr	r1, .L111+36
 1168 04c6 D211     		asrs	r2, r2, #7
 1169 04c8 0A80     		strh	r2, [r1]	@ movhi
 618:Src/main.c    **** 
 1170              		.loc 1 618 0
 1171 04ca 4FF4C871 		mov	r1, #400
 1172 04ce 01FB00F1 		mul	r1, r1, r0
 617:Src/main.c    ****         Gsens_Z = 400 * (int8_t)Gsens_Z1 / 128; // unsigned->signed & scaling
 1173              		.loc 1 617 0
 1174 04d2 002B     		cmp	r3, #0
 1175 04d4 B8BF     		it	lt
 1176 04d6 7F33     		addlt	r3, r3, #127
 618:Src/main.c    **** 
 1177              		.loc 1 618 0
 1178 04d8 0029     		cmp	r1, #0
 1179 04da B8BF     		it	lt
 1180 04dc 7F31     		addlt	r1, r1, #127
 617:Src/main.c    ****         Gsens_Z = 400 * (int8_t)Gsens_Z1 / 128; // unsigned->signed & scaling
 1181              		.loc 1 617 0
 1182 04de 8448     		ldr	r0, .L111+40
 618:Src/main.c    **** 
 1183              		.loc 1 618 0
 1184 04e0 CE11     		asrs	r6, r1, #7
 617:Src/main.c    ****         Gsens_Z = 400 * (int8_t)Gsens_Z1 / 128; // unsigned->signed & scaling
 1185              		.loc 1 617 0
 1186 04e2 DB11     		asrs	r3, r3, #7
 1187 04e4 0380     		strh	r3, [r0]	@ movhi
 620:Src/main.c    ****         
 1188              		.loc 1 620 0
 1189 04e6 8349     		ldr	r1, .L111+44
 1190 04e8 0096     		str	r6, [sp]
 1191 04ea 8348     		ldr	r0, .L111+48
 618:Src/main.c    **** 
 1192              		.loc 1 618 0
 1193 04ec 3E80     		strh	r6, [r7]	@ movhi
 620:Src/main.c    ****         
 1194              		.loc 1 620 0
 1195 04ee FFF7FEFF 		bl	HAL_UART_Transmit_printf
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s 			page 41


 1196              	.LVL92:
 1197 04f2 BBE6     		b	.L43
 1198              	.L99:
 1199              	.LBB26:
 733:Src/main.c    ****         draw_MeasLabelUnit(&u8g2, 0, 0, 64, 13, "MAP", "kPa");
 1200              		.loc 1 733 0
 1201 04f4 3420     		movs	r0, #52
 1202 04f6 6FF06301 		mvn	r1, #99
 1203 04fa C822     		movs	r2, #200
 1204 04fc 0323     		movs	r3, #3
 1205 04fe 8DE80F00 		stm	sp, {r0, r1, r2, r3}
 1206 0502 8023     		movs	r3, #128
 1207 0504 0D22     		movs	r2, #13
 1208 0506 0021     		movs	r1, #0
 1209 0508 7148     		ldr	r0, .L111+8
 1210 050a FFF7FEFF 		bl	draw_Wave_axis
 1211              	.LVL93:
 734:Src/main.c    **** 
 1212              		.loc 1 734 0
 1213 050e 7B49     		ldr	r1, .L111+52
 1214 0510 0291     		str	r1, [sp, #8]
 1215 0512 7B49     		ldr	r1, .L111+56
 1216 0514 0D23     		movs	r3, #13
 1217 0516 0022     		movs	r2, #0
 1218              	.L94:
 1219              	.LBE26:
 1220              	.LBB27:
 738:Src/main.c    **** 
 1221              		.loc 1 738 0
 1222 0518 CDE90031 		strd	r3, r1, [sp]
 1223 051c 6C48     		ldr	r0, .L111+8
 1224 051e 1146     		mov	r1, r2
 1225 0520 4023     		movs	r3, #64
 1226 0522 FFF7FEFF 		bl	draw_MeasLabelUnit
 1227              	.LVL94:
 1228 0526 42E6     		b	.L57
 1229              	.L55:
 1230              	.LBE27:
 689:Src/main.c    ****             }
 1231              		.loc 1 689 0
 1232 0528 013B     		subs	r3, r3, #1
 1233              	.L93:
 1234 052a 764A     		ldr	r2, .L111+60
 1235 052c 1370     		strb	r3, [r2]
 1236 052e 2EE6     		b	.L48
 1237              	.L100:
 1238              	.LBB28:
 737:Src/main.c    ****         draw_MeasLabelUnit(&u8g2, 0, 0, 64, 13, "LatG", "G");
 1239              		.loc 1 737 0
 1240 0530 3420     		movs	r0, #52
 1241 0532 6FF0C701 		mvn	r1, #199
 1242 0536 C822     		movs	r2, #200
 1243 0538 0423     		movs	r3, #4
 1244 053a 8DE80F00 		stm	sp, {r0, r1, r2, r3}
 1245 053e 8023     		movs	r3, #128
 1246 0540 0D22     		movs	r2, #13
 1247 0542 0021     		movs	r1, #0
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s 			page 42


 1248 0544 6248     		ldr	r0, .L111+8
 1249 0546 FFF7FEFF 		bl	draw_Wave_axis
 1250              	.LVL95:
 738:Src/main.c    **** 
 1251              		.loc 1 738 0
 1252 054a 6F49     		ldr	r1, .L111+64
 1253 054c 0291     		str	r1, [sp, #8]
 1254 054e 0D23     		movs	r3, #13
 1255 0550 0022     		movs	r2, #0
 1256 0552 6E49     		ldr	r1, .L111+68
 1257 0554 E0E7     		b	.L94
 1258              	.L106:
 1259              	.LBE28:
 1260              	.LBB29:
 815:Src/main.c    ****           circular_buffer_index--;
 1261              		.loc 1 815 0
 1262 0556 0A9B     		ldr	r3, [sp, #40]
 1263 0558 002B     		cmp	r3, #0
 1264 055a 00F00E81 		beq	.L78
 816:Src/main.c    ****         }else{
 1265              		.loc 1 816 0
 1266 055e 013B     		subs	r3, r3, #1
 1267 0560 9BB2     		uxth	r3, r3
 1268 0562 0A93     		str	r3, [sp, #40]
 1269              	.LVL96:
 1270 0564 1E46     		mov	r6, r3
 1271              	.LVL97:
 1272              	.L70:
 823:Src/main.c    ****         draw_Value(&u8g2, 0, 0, 64, 13, circular_buffer[circular_buffer_index], 3, 2, 1, "kPa");
 1273              		.loc 1 823 0
 1274 0566 6FF06302 		mvn	r2, #99
 1275 056a 3423     		movs	r3, #52
 1276 056c CDE90032 		strd	r3, r2, [sp]
 820:Src/main.c    **** 
 1277              		.loc 1 820 0
 1278 0570 0CAA     		add	r2, sp, #48
 1279 0572 B9F80030 		ldrh	r3, [r9]
 823:Src/main.c    ****         draw_Value(&u8g2, 0, 0, 64, 13, circular_buffer[circular_buffer_index], 3, 2, 1, "kPa");
 1280              		.loc 1 823 0
 1281 0576 0496     		str	r6, [sp, #16]
 1282 0578 C821     		movs	r1, #200
 1283 057a 0CA8     		add	r0, sp, #48
 1284 057c CDE90210 		strd	r1, r0, [sp, #8]
 820:Src/main.c    **** 
 1285              		.loc 1 820 0
 1286 0580 22F81630 		strh	r3, [r2, r6, lsl #1]	@ movhi
 823:Src/main.c    ****         draw_Value(&u8g2, 0, 0, 64, 13, circular_buffer[circular_buffer_index], 3, 2, 1, "kPa");
 1287              		.loc 1 823 0
 1288 0584 0021     		movs	r1, #0
 1289 0586 8023     		movs	r3, #128
 1290 0588 0D22     		movs	r2, #13
 1291 058a 5148     		ldr	r0, .L111+8
 824:Src/main.c    **** 
 1292              		.loc 1 824 0
 1293 058c 5B4F     		ldr	r7, .L111+52
 823:Src/main.c    ****         draw_Value(&u8g2, 0, 0, 64, 13, circular_buffer[circular_buffer_index], 3, 2, 1, "kPa");
 1294              		.loc 1 823 0
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s 			page 43


 1295 058e FFF7FEFF 		bl	draw_Wave
 1296              	.LVL98:
 824:Src/main.c    **** 
 1297              		.loc 1 824 0
 1298 0592 0CAB     		add	r3, sp, #48
 1299 0594 0220     		movs	r0, #2
 1300 0596 33F91630 		ldrsh	r3, [r3, r6, lsl #1]
 1301 059a 0193     		str	r3, [sp, #4]
 1302 059c 0126     		movs	r6, #1
 1303 059e 0321     		movs	r1, #3
 1304 05a0 0D23     		movs	r3, #13
 1305 05a2 0022     		movs	r2, #0
 1306              	.L95:
 1307              	.LBE29:
 1308              	.LBB30:
 838:Src/main.c    **** 
 1309              		.loc 1 838 0
 1310 05a4 CDE90210 		strd	r1, r0, [sp, #8]
 1311 05a8 0093     		str	r3, [sp]
 1312 05aa CDE90467 		strd	r6, r7, [sp, #16]
 1313 05ae 1146     		mov	r1, r2
 1314 05b0 4023     		movs	r3, #64
 1315 05b2 4748     		ldr	r0, .L111+8
 1316 05b4 FFF7FEFF 		bl	draw_Value
 1317              	.LVL99:
 1318              	.LBE30:
 1319 05b8 86E6     		b	.L65
 1320              	.LVL100:
 1321              	.L104:
 753:Src/main.c    **** 
 1322              		.loc 1 753 0
 1323 05ba B5F90030 		ldrsh	r3, [r5]
 1324 05be 544A     		ldr	r2, .L111+72
 1325 05c0 0193     		str	r3, [sp, #4]
 1326 05c2 0327     		movs	r7, #3
 1327 05c4 0C23     		movs	r3, #12
 1328 05c6 CDE90462 		strd	r6, r2, [sp, #16]
 1329 05ca CDE90276 		strd	r7, r6, [sp, #8]
 1330 05ce 0093     		str	r3, [sp]
 1331 05d0 3422     		movs	r2, #52
 1332 05d2 4623     		movs	r3, #70
 1333 05d4 3146     		mov	r1, r6
 1334 05d6 3E48     		ldr	r0, .L111+8
 1335 05d8 FFF7FEFF 		bl	draw_Value
 1336              	.LVL101:
 756:Src/main.c    **** 
 1337              		.loc 1 756 0
 1338 05dc B8F80010 		ldrh	r1, [r8]
 1339 05e0 0191     		str	r1, [sp, #4]
 1340 05e2 42F22832 		movw	r2, #9000
 1341 05e6 0E23     		movs	r3, #14
 1342 05e8 0392     		str	r2, [sp, #12]
 1343 05ea 0093     		str	r3, [sp]
 1344 05ec 3246     		mov	r2, r6
 1345 05ee 8023     		movs	r3, #128
 1346 05f0 3146     		mov	r1, r6
 1347 05f2 3748     		ldr	r0, .L111+8
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s 			page 44


 1348 05f4 0296     		str	r6, [sp, #8]
 1349 05f6 FFF7FEFF 		bl	draw_BarGraph
 1350              	.LVL102:
 762:Src/main.c    ****         }
 1351              		.loc 1 762 0
 1352 05fa 0C21     		movs	r1, #12
 1353 05fc 0091     		str	r1, [sp]
 1354 05fe 3349     		ldr	r1, .L111+4
 1355 0600 B9F90030 		ldrsh	r3, [r9]
 1356 0604 0591     		str	r1, [sp, #20]
 1357 0606 0222     		movs	r2, #2
 1358 0608 0121     		movs	r1, #1
 1359 060a CDE90321 		strd	r2, r1, [sp, #12]
 1360 060e 0297     		str	r7, [sp, #8]
 1361 0610 0193     		str	r3, [sp, #4]
 1362 0612 1022     		movs	r2, #16
 1363 0614 4623     		movs	r3, #70
 1364 0616 3146     		mov	r1, r6
 1365 0618 2D48     		ldr	r0, .L111+8
 1366 061a FFF7FEFF 		bl	draw_Value
 1367              	.LVL103:
 1368 061e 0122     		movs	r2, #1
 1369 0620 CDE90272 		strd	r7, r2, [sp, #8]
 1370 0624 0C22     		movs	r2, #12
 1371 0626 0092     		str	r2, [sp]
 1372 0628 3A4A     		ldr	r2, .L111+76
 1373 062a B9F90230 		ldrsh	r3, [r9, #2]
 1374 062e 0193     		str	r3, [sp, #4]
 1375 0630 CDE90462 		strd	r6, r2, [sp, #16]
 1376 0634 4623     		movs	r3, #70
 1377 0636 1C22     		movs	r2, #28
 1378 0638 3146     		mov	r1, r6
 1379 063a 2548     		ldr	r0, .L111+8
 1380 063c FFF7FEFF 		bl	draw_Value
 1381              	.LVL104:
 1382 0640 0122     		movs	r2, #1
 1383 0642 CDE90272 		strd	r7, r2, [sp, #8]
 1384 0646 0C22     		movs	r2, #12
 1385 0648 0092     		str	r2, [sp]
 1386 064a 334A     		ldr	r2, .L111+80
 1387 064c B9F90430 		ldrsh	r3, [r9, #4]
 1388 0650 0B97     		str	r7, [sp, #44]
 1389 0652 CDE90462 		strd	r6, r2, [sp, #16]
 1390 0656 0193     		str	r3, [sp, #4]
 1391 0658 3146     		mov	r1, r6
 1392 065a 1D48     		ldr	r0, .L111+8
 767:Src/main.c    ****         }
 1393              		.loc 1 767 0
 1394 065c 0C27     		movs	r7, #12
 762:Src/main.c    ****         }
 1395              		.loc 1 762 0
 1396 065e 4623     		movs	r3, #70
 1397 0660 2822     		movs	r2, #40
 767:Src/main.c    ****         }
 1398              		.loc 1 767 0
 1399 0662 0997     		str	r7, [sp, #36]
 762:Src/main.c    ****         }
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s 			page 45


 1400              		.loc 1 762 0
 1401 0664 FFF7FEFF 		bl	draw_Value
 1402              	.LVL105:
 1403 0668 0B98     		ldr	r0, [sp, #44]
 1404 066a 3146     		mov	r1, r6
 1405 066c 0746     		mov	r7, r0
 1406              	.LVL106:
 1407              	.L66:
 766:Src/main.c    ****           draw_Value(&u8g2, x, y, meas_width2, meas_height, meas_value[n], meas_digit[n], meas_frac
 1408              		.loc 1 766 0 discriminator 3
 1409 066e 2B4A     		ldr	r2, .L111+84
 767:Src/main.c    ****         }
 1410              		.loc 1 767 0 discriminator 3
 1411 0670 0491     		str	r1, [sp, #16]
 766:Src/main.c    ****           draw_Value(&u8g2, x, y, meas_width2, meas_height, meas_value[n], meas_digit[n], meas_frac
 1412              		.loc 1 766 0 discriminator 3
 1413 0672 FBB2     		uxtb	r3, r7
 1414 0674 A2FB03C2 		umull	ip, r2, r2, r3
 1415 0678 5208     		lsrs	r2, r2, #1
 1416 067a 02EB4202 		add	r2, r2, r2, lsl #1
 1417 067e 9B1A     		subs	r3, r3, r2
 1418 0680 03EB4303 		add	r3, r3, r3, lsl #1
 1419 0684 9A00     		lsls	r2, r3, #2
 1420 0686 02F1100C 		add	ip, r2, #16
 767:Src/main.c    ****         }
 1421              		.loc 1 767 0 discriminator 3
 1422 068a 104A     		ldr	r2, .L111+4
 1423 068c 39F91710 		ldrsh	r1, [r9, r7, lsl #1]
 1424 0690 0191     		str	r1, [sp, #4]
 1425 0692 07EB8703 		add	r3, r7, r7, lsl #2
 1426 0696 1344     		add	r3, r3, r2
 1427 0698 099A     		ldr	r2, [sp, #36]
 1428 069a 0092     		str	r2, [sp]
 1429 069c CDE90206 		strd	r0, r6, [sp, #8]
 1430 06a0 0593     		str	r3, [sp, #20]
 1431 06a2 0CF0FC02 		and	r2, ip, #252
 1432 06a6 0137     		adds	r7, r7, #1
 1433              	.LVL107:
 1434 06a8 3823     		movs	r3, #56
 1435 06aa 4821     		movs	r1, #72
 1436 06ac 0848     		ldr	r0, .L111+8
 1437 06ae FFF7FEFF 		bl	draw_Value
 1438              	.LVL108:
 764:Src/main.c    ****           x = meas_width1 + meas_x + meas_x_offset;
 1439              		.loc 1 764 0 discriminator 3
 1440 06b2 062F     		cmp	r7, #6
 1441 06b4 3FF408AE 		beq	.L65
 1442 06b8 194B     		ldr	r3, .L111+88
 1443 06ba D85D     		ldrb	r0, [r3, r7]	@ zero_extendqisi2
 1444 06bc 194B     		ldr	r3, .L111+92
 1445 06be DE5D     		ldrb	r6, [r3, r7]	@ zero_extendqisi2
 1446 06c0 194B     		ldr	r3, .L111+96
 1447 06c2 D95D     		ldrb	r1, [r3, r7]	@ zero_extendqisi2
 1448 06c4 D3E7     		b	.L66
 1449              	.L112:
 1450 06c6 00BF     		.align	2
 1451              	.L111:
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s 			page 46


 1452 06c8 00000000 		.word	.LANCHOR2
 1453 06cc 00000000 		.word	.LANCHOR1
 1454 06d0 00000000 		.word	u8g2
 1455 06d4 01000000 		.word	.LANCHOR8+1
 1456 06d8 00000000 		.word	.LANCHOR0
 1457 06dc 00000000 		.word	Gsens_X1
 1458 06e0 00000000 		.word	Gsens_Z
 1459 06e4 00000000 		.word	Gsens_Y1
 1460 06e8 00000000 		.word	Gsens_Z1
 1461 06ec 00000000 		.word	Gsens_X
 1462 06f0 00000000 		.word	Gsens_Y
 1463 06f4 3C000000 		.word	.LC5
 1464 06f8 00000000 		.word	huart2
 1465 06fc 5C000000 		.word	.LC9
 1466 0700 60000000 		.word	.LC10
 1467 0704 00000000 		.word	mode
 1468 0708 64000000 		.word	.LC11
 1469 070c 68000000 		.word	.LC12
 1470 0710 00000000 		.word	.LC0
 1471 0714 05000000 		.word	.LANCHOR1+5
 1472 0718 0A000000 		.word	.LANCHOR1+10
 1473 071c ABAAAAAA 		.word	-1431655765
 1474 0720 00000000 		.word	.LANCHOR9
 1475 0724 00000000 		.word	.LANCHOR10
 1476 0728 00000000 		.word	.LANCHOR11
 1477              	.LVL109:
 1478              	.L107:
 1479              	.LBB31:
 829:Src/main.c    ****           circular_buffer_index--;
 1480              		.loc 1 829 0
 1481 072c 0A9B     		ldr	r3, [sp, #40]
 1482 072e 002B     		cmp	r3, #0
 1483 0730 74D0     		beq	.L79
 830:Src/main.c    ****         }else{
 1484              		.loc 1 830 0
 1485 0732 013B     		subs	r3, r3, #1
 1486 0734 9BB2     		uxth	r3, r3
 1487 0736 0A93     		str	r3, [sp, #40]
 1488              	.LVL110:
 1489 0738 1E46     		mov	r6, r3
 1490              	.LVL111:
 1491              	.L72:
 837:Src/main.c    ****         draw_Value(&u8g2, 0, 0, 64, 13, circular_buffer[circular_buffer_index], 3, 2, 1, "G");
 1492              		.loc 1 837 0
 1493 073a C821     		movs	r1, #200
 1494 073c 6FF0C702 		mvn	r2, #199
 1495 0740 3423     		movs	r3, #52
 1496 0742 0CA8     		add	r0, sp, #48
 1497 0744 CDE90210 		strd	r1, r0, [sp, #8]
 1498 0748 CDE90032 		strd	r3, r2, [sp]
 834:Src/main.c    **** 
 1499              		.loc 1 834 0
 1500 074c 544B     		ldr	r3, .L113
 837:Src/main.c    ****         draw_Value(&u8g2, 0, 0, 64, 13, circular_buffer[circular_buffer_index], 3, 2, 1, "G");
 1501              		.loc 1 837 0
 1502 074e 0496     		str	r6, [sp, #16]
 834:Src/main.c    **** 
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s 			page 47


 1503              		.loc 1 834 0
 1504 0750 0CAA     		add	r2, sp, #48
 1505 0752 1B88     		ldrh	r3, [r3]
 1506 0754 22F81630 		strh	r3, [r2, r6, lsl #1]	@ movhi
 837:Src/main.c    ****         draw_Value(&u8g2, 0, 0, 64, 13, circular_buffer[circular_buffer_index], 3, 2, 1, "G");
 1507              		.loc 1 837 0
 1508 0758 0021     		movs	r1, #0
 1509 075a 8023     		movs	r3, #128
 1510 075c 0D22     		movs	r2, #13
 1511 075e 5148     		ldr	r0, .L113+4
 838:Src/main.c    **** 
 1512              		.loc 1 838 0
 1513 0760 514F     		ldr	r7, .L113+8
 837:Src/main.c    ****         draw_Value(&u8g2, 0, 0, 64, 13, circular_buffer[circular_buffer_index], 3, 2, 1, "G");
 1514              		.loc 1 837 0
 1515 0762 FFF7FEFF 		bl	draw_Wave
 1516              	.LVL112:
 838:Src/main.c    **** 
 1517              		.loc 1 838 0
 1518 0766 0CAB     		add	r3, sp, #48
 1519 0768 0220     		movs	r0, #2
 1520 076a 33F91630 		ldrsh	r3, [r3, r6, lsl #1]
 1521 076e 0193     		str	r3, [sp, #4]
 1522 0770 0126     		movs	r6, #1
 1523 0772 0321     		movs	r1, #3
 1524 0774 0D23     		movs	r3, #13
 1525 0776 0022     		movs	r2, #0
 1526 0778 14E7     		b	.L95
 1527              	.LVL113:
 1528              	.L78:
 1529              	.LBE31:
 1530              	.LBB32:
 1531 077a 8023     		movs	r3, #128
 1532 077c 0A93     		str	r3, [sp, #40]
 818:Src/main.c    ****         }
 1533              		.loc 1 818 0
 1534 077e 1E46     		mov	r6, r3
 1535 0780 F1E6     		b	.L70
 1536              	.L105:
 1537              	.LBE32:
 1538              	.LBB33:
 773:Src/main.c    ****         
 1539              		.loc 1 773 0
 1540 0782 B9F90010 		ldrsh	r1, [r9]
 1541 0786 4748     		ldr	r0, .L113+4
 1542 0788 FFF7FEFF 		bl	draw_CircularMeter
 1543              	.LVL114:
 775:Src/main.c    ****         draw_MeasUnit(&u8g2, 38, 40, 28, 16, "kPa");
 1544              		.loc 1 775 0
 1545 078c B9F90030 		ldrsh	r3, [r9]
 1546 0790 464A     		ldr	r2, .L113+12
 1547 0792 0592     		str	r2, [sp, #20]
 1548 0794 4FF0020C 		mov	ip, #2
 1549 0798 1027     		movs	r7, #16
 1550 079a 0322     		movs	r2, #3
 1551 079c CDE903C6 		strd	ip, r6, [sp, #12]
 1552 07a0 CDE90132 		strd	r3, r2, [sp, #4]
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s 			page 48


 1553 07a4 0097     		str	r7, [sp]
 1554 07a6 1E23     		movs	r3, #30
 1555 07a8 2122     		movs	r2, #33
 1556 07aa 2421     		movs	r1, #36
 1557 07ac 3D48     		ldr	r0, .L113+4
 776:Src/main.c    **** /*        
 1558              		.loc 1 776 0
 1559 07ae CDF824C0 		str	ip, [sp, #36]
 775:Src/main.c    ****         draw_MeasUnit(&u8g2, 38, 40, 28, 16, "kPa");
 1560              		.loc 1 775 0
 1561 07b2 FFF7FEFF 		bl	draw_Value
 1562              	.LVL115:
 776:Src/main.c    **** /*        
 1563              		.loc 1 776 0
 1564 07b6 3E4B     		ldr	r3, .L113+16
 1565 07b8 0097     		str	r7, [sp]
 1566 07ba 0193     		str	r3, [sp, #4]
 1567 07bc 2822     		movs	r2, #40
 1568 07be 2621     		movs	r1, #38
 1569 07c0 3848     		ldr	r0, .L113+4
 1570 07c2 1C23     		movs	r3, #28
 1571 07c4 FFF7FEFF 		bl	draw_MeasUnit
 1572              	.LVL116:
 1573 07c8 0999     		ldr	r1, [sp, #36]
 1574 07ca 3046     		mov	r0, r6
 1575 07cc 0322     		movs	r2, #3
 786:Src/main.c    ****         }
 1576              		.loc 1 786 0
 1577 07ce 8446     		mov	ip, r0
 776:Src/main.c    **** /*        
 1578              		.loc 1 776 0
 1579 07d0 0027     		movs	r7, #0
 786:Src/main.c    ****         }
 1580              		.loc 1 786 0
 1581 07d2 0846     		mov	r0, r1
 1582 07d4 0D26     		movs	r6, #13
 1583 07d6 1146     		mov	r1, r2
 1584              	.LVL117:
 1585              	.L68:
 786:Src/main.c    ****         }
 1586              		.loc 1 786 0 is_stmt 0 discriminator 3
 1587 07d8 364A     		ldr	r2, .L113+20
 1588 07da 0291     		str	r1, [sp, #8]
 1589 07dc 07EB8703 		add	r3, r7, r7, lsl #2
 1590 07e0 1344     		add	r3, r3, r2
 1591 07e2 39F91720 		ldrsh	r2, [r9, r7, lsl #1]
 1592 07e6 0593     		str	r3, [sp, #20]
 1593 07e8 CDE9030C 		strd	r0, ip, [sp, #12]
 1594 07ec 0192     		str	r2, [sp, #4]
 1595 07ee 3C23     		movs	r3, #60
 1596 07f0 0096     		str	r6, [sp]
 1597 07f2 099A     		ldr	r2, [sp, #36]
 1598 07f4 2B48     		ldr	r0, .L113+4
 1599 07f6 4421     		movs	r1, #68
 1600 07f8 FFF7FEFF 		bl	draw_Value
 1601              	.LVL118:
 1602 07fc 099B     		ldr	r3, [sp, #36]
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s 			page 49


 1603 07fe 0137     		adds	r7, r7, #1
 1604 0800 0D33     		adds	r3, r3, #13
 1605 0802 DBB2     		uxtb	r3, r3
 783:Src/main.c    ****           x = meas_C_x;
 1606              		.loc 1 783 0 is_stmt 1 discriminator 3
 1607 0804 042F     		cmp	r7, #4
 1608 0806 0993     		str	r3, [sp, #36]
 1609              	.LVL119:
 1610 0808 3FF45EAD 		beq	.L65
 1611 080c 2A4B     		ldr	r3, .L113+24
 1612 080e D95D     		ldrb	r1, [r3, r7]	@ zero_extendqisi2
 1613 0810 2A4B     		ldr	r3, .L113+28
 1614 0812 D85D     		ldrb	r0, [r3, r7]	@ zero_extendqisi2
 1615 0814 2A4B     		ldr	r3, .L113+32
 1616 0816 13F807C0 		ldrb	ip, [r3, r7]	@ zero_extendqisi2
 1617 081a DDE7     		b	.L68
 1618              	.LVL120:
 1619              	.L79:
 1620              	.LBE33:
 1621              	.LBB34:
 1622 081c 8023     		movs	r3, #128
 1623 081e 0A93     		str	r3, [sp, #40]
 832:Src/main.c    ****         }
 1624              		.loc 1 832 0
 1625 0820 1E46     		mov	r6, r3
 1626 0822 8AE7     		b	.L72
 1627              	.L108:
 1628              	.LBE34:
 843:Src/main.c    ****         u8g2_SetFont(&u8g2, u8g2_font_7x14B_tf);
 1629              		.loc 1 843 0
 1630 0824 1F48     		ldr	r0, .L113+4
 1631 0826 FFF7FEFF 		bl	u8g2_ClearBuffer
 1632              	.LVL121:
 844:Src/main.c    ****         u8g2_DrawStr(&u8g2, 2, 15, "Mode Setting" );
 1633              		.loc 1 844 0
 1634 082a 2649     		ldr	r1, .L113+36
 1635 082c 1D48     		ldr	r0, .L113+4
 1636 082e FFF7FEFF 		bl	u8g2_SetFont
 1637              	.LVL122:
 845:Src/main.c    ****         if( cursor == 0 ){
 1638              		.loc 1 845 0
 1639 0832 254B     		ldr	r3, .L113+40
 1640 0834 1B48     		ldr	r0, .L113+4
 1641 0836 0F22     		movs	r2, #15
 1642 0838 0221     		movs	r1, #2
 1643 083a FFF7FEFF 		bl	u8g2_DrawStr
 1644              	.LVL123:
 846:Src/main.c    ****           u8g2_DrawStr(&u8g2, 2, 30, ">" );
 1645              		.loc 1 846 0
 1646 083e 234B     		ldr	r3, .L113+44
 1647 0840 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1648 0842 03BB     		cbnz	r3, .L73
 847:Src/main.c    ****         }else{
 1649              		.loc 1 847 0
 1650 0844 224B     		ldr	r3, .L113+48
 1651 0846 1748     		ldr	r0, .L113+4
 1652 0848 1E22     		movs	r2, #30
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s 			page 50


 1653 084a 0221     		movs	r1, #2
 1654 084c FFF7FEFF 		bl	u8g2_DrawStr
 1655              	.LVL124:
 1656              	.L74:
 851:Src/main.c    ****         if( cursor == 1 ){
 1657              		.loc 1 851 0
 1658 0850 204B     		ldr	r3, .L113+52
 1659 0852 1448     		ldr	r0, .L113+4
 1660 0854 1E22     		movs	r2, #30
 1661 0856 0A21     		movs	r1, #10
 1662 0858 FFF7FEFF 		bl	u8g2_DrawStr
 1663              	.LVL125:
 852:Src/main.c    ****           u8g2_DrawStr(&u8g2, 2, 45, ">" );
 1664              		.loc 1 852 0
 1665 085c 1B4B     		ldr	r3, .L113+44
 855:Src/main.c    ****         }
 1666              		.loc 1 855 0
 1667 085e 1148     		ldr	r0, .L113+4
 852:Src/main.c    ****           u8g2_DrawStr(&u8g2, 2, 45, ">" );
 1668              		.loc 1 852 0
 1669 0860 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1670 0862 012B     		cmp	r3, #1
 853:Src/main.c    ****         }else{
 1671              		.loc 1 853 0
 1672 0864 0CBF     		ite	eq
 1673 0866 1A4B     		ldreq	r3, .L113+48
 855:Src/main.c    ****         }
 1674              		.loc 1 855 0
 1675 0868 1B4B     		ldrne	r3, .L113+56
 1676 086a 2D22     		movs	r2, #45
 1677 086c 0221     		movs	r1, #2
 1678 086e FFF7FEFF 		bl	u8g2_DrawStr
 1679              	.LVL126:
 857:Src/main.c    ****         u8g2_SendBuffer(&u8g2);
 1680              		.loc 1 857 0
 1681 0872 1A4B     		ldr	r3, .L113+60
 1682 0874 0B48     		ldr	r0, .L113+4
 1683 0876 2D22     		movs	r2, #45
 1684 0878 0A21     		movs	r1, #10
 1685 087a FFF7FEFF 		bl	u8g2_DrawStr
 1686              	.LVL127:
 858:Src/main.c    ****       }
 1687              		.loc 1 858 0
 1688 087e 0948     		ldr	r0, .L113+4
 1689 0880 FFF7FEFF 		bl	u8g2_SendBuffer
 1690              	.LVL128:
 1691 0884 20E5     		b	.L65
 1692              	.L73:
 849:Src/main.c    ****         }
 1693              		.loc 1 849 0
 1694 0886 144B     		ldr	r3, .L113+56
 1695 0888 0648     		ldr	r0, .L113+4
 1696 088a 1E22     		movs	r2, #30
 1697 088c 0221     		movs	r1, #2
 1698 088e FFF7FEFF 		bl	u8g2_DrawStr
 1699              	.LVL129:
 1700 0892 DDE7     		b	.L74
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s 			page 51


 1701              	.L102:
 581:Src/main.c    ****       FP_duty = 60;
 1702              		.loc 1 581 0
 1703 0894 3B2B     		cmp	r3, #59
 582:Src/main.c    ****     }
 1704              		.loc 1 582 0
 1705 0896 DCBF     		itt	le
 1706 0898 3C23     		movle	r3, #60
 1707 089a 2B80     		strhle	r3, [r5]	@ movhi
 1708 089c D2E4     		b	.L40
 1709              	.L114:
 1710 089e 00BF     		.align	2
 1711              	.L113:
 1712 08a0 00000000 		.word	Gsens_Y
 1713 08a4 00000000 		.word	u8g2
 1714 08a8 64000000 		.word	.LC11
 1715 08ac 70000000 		.word	.LC13
 1716 08b0 5C000000 		.word	.LC9
 1717 08b4 00000000 		.word	.LANCHOR1
 1718 08b8 00000000 		.word	.LANCHOR9
 1719 08bc 00000000 		.word	.LANCHOR10
 1720 08c0 00000000 		.word	.LANCHOR11
 1721 08c4 00000000 		.word	u8g2_font_7x14B_tf
 1722 08c8 74000000 		.word	.LC14
 1723 08cc 00000000 		.word	.LANCHOR12
 1724 08d0 84000000 		.word	.LC15
 1725 08d4 8C000000 		.word	.LC17
 1726 08d8 88000000 		.word	.LC16
 1727 08dc 98000000 		.word	.LC18
 1728              	.LBE35:
 1729              		.cfi_endproc
 1730              	.LFE130:
 1732              		.section	.text.Error_Handler,"ax",%progbits
 1733              		.align	1
 1734              		.p2align 2,,3
 1735              		.global	Error_Handler
 1736              		.syntax unified
 1737              		.thumb
 1738              		.thumb_func
 1739              		.fpu fpv4-sp-d16
 1741              	Error_Handler:
 1742              	.LFB132:
 917:Src/main.c    **** 
 918:Src/main.c    **** /* USER CODE BEGIN 4 */
 919:Src/main.c    **** 
 920:Src/main.c    **** /* USER CODE END 4 */
 921:Src/main.c    **** 
 922:Src/main.c    **** /**
 923:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 924:Src/main.c    ****   * @retval None
 925:Src/main.c    ****   */
 926:Src/main.c    **** void Error_Handler(void)
 927:Src/main.c    **** {
 1743              		.loc 1 927 0
 1744              		.cfi_startproc
 1745              		@ Volatile: function does not return.
 1746              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s 			page 52


 1747              		@ frame_needed = 0, uses_anonymous_args = 0
 1748              		@ link register save eliminated.
 1749              	.L116:
 1750 0000 FEE7     		b	.L116
 1751              		.cfi_endproc
 1752              	.LFE132:
 1754              		.comm	adc,20,4
 1755              		.comm	g_ADCBuffer,20,4
 1756              		.comm	Gsens_Z,2,2
 1757              		.comm	Gsens_Z0,1,1
 1758              		.comm	Gsens_Z1,1,1
 1759              		.comm	Gsens_Y,2,2
 1760              		.comm	Gsens_Y0,1,1
 1761              		.comm	Gsens_Y1,1,1
 1762              		.comm	Gsens_X,2,2
 1763              		.comm	Gsens_X0,1,1
 1764              		.comm	Gsens_X1,1,1
 1765              		.comm	Gsens_EN,1,1
 1766              		.global	FP_duty
 1767              		.global	FP_volt
 1768              		.global	O2_volt
 1769              		.global	meas_value
 1770              		.global	meas_sign
 1771              		.global	meas_frac
 1772              		.global	meas_digit
 1773              		.global	meas_unit
 1774              		.global	meas_name
 1775              		.global	idct_status
 1776              		.global	idct_name
 1777              		.global	cursor
 1778              		.comm	setting,1,1
 1779              		.comm	mode,1,1
 1780              		.global	MT
 1781              		.global	gear
 1782              		.global	speed
 1783              		.global	update_display
 1784              		.comm	u8g2,128,4
 1785              		.global	logo_bits
 1786 0002 00BF     		.section	.bss.cursor,"aw",%nobits
 1787              		.set	.LANCHOR12,. + 0
 1790              	cursor:
 1791 0000 00       		.space	1
 1792              		.section	.bss.gear,"aw",%nobits
 1795              	gear:
 1796 0000 00       		.space	1
 1797              		.section	.bss.update_display,"aw",%nobits
 1800              	update_display:
 1801 0000 00       		.space	1
 1802              		.section	.data.FP_duty,"aw",%progbits
 1803              		.align	1
 1804              		.set	.LANCHOR4,. + 0
 1807              	FP_duty:
 1808 0000 6400     		.short	100
 1809              		.section	.data.FP_volt,"aw",%progbits
 1810              		.align	1
 1811              		.set	.LANCHOR6,. + 0
 1814              	FP_volt:
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s 			page 53


 1815 0000 4A01     		.short	330
 1816              		.section	.data.MT,"aw",%progbits
 1817              		.align	3
 1820              	MT:
 1821 0000 77BE9F1A 		.word	446676599
 1822 0004 2FDD0B40 		.word	1074519343
 1823 0008 1F85EB51 		.word	1374389535
 1824 000c B81E0040 		.word	1073749688
 1825 0010 A8C64B37 		.word	927712936
 1826 0014 8941F63F 		.word	1073103241
 1827 0018 00000000 		.word	0
 1828 001c 0000F03F 		.word	1072693248
 1829 0020 986E1283 		.word	2199023256
 1830 0024 C0CAE93F 		.word	1072286400
 1831              		.section	.data.O2_volt,"aw",%progbits
 1832              		.align	1
 1833              		.set	.LANCHOR5,. + 0
 1836              	O2_volt:
 1837 0000 4A01     		.short	330
 1838              		.section	.data.meas_value,"aw",%progbits
 1839              		.align	2
 1840              		.set	.LANCHOR7,. + 0
 1843              	meas_value:
 1844 0000 6900     		.short	105
 1845 0002 EB00     		.short	235
 1846 0004 8502     		.short	645
 1847 0006 5900     		.short	89
 1848 0008 4900     		.short	73
 1849 000a 8F00     		.short	143
 1850              		.section	.data.speed,"aw",%progbits
 1851              		.align	1
 1854              	speed:
 1855 0000 F000     		.short	240
 1856              		.section	.rodata.draw_MeasLabels.str1.4,"aMS",%progbits,1
 1857              		.align	2
 1858              	.LC0:
 1859 0000 25202000 		.ascii	"%  \000"
 1860              	.LC1:
 1861 0004 44555459 		.ascii	"DUTY\000"
 1861      00
 1862              		.section	.rodata.idct_name,"a",%progbits
 1863              		.align	2
 1864              		.set	.LANCHOR0,. + 0
 1867              	idct_name:
 1868 0000 43414E00 		.ascii	"CAN\000"
 1869 0004 00       		.space	1
 1870 0005 4F324642 		.ascii	"O2FB\000"
 1870      00
 1871              		.section	.rodata.idct_status,"a",%progbits
 1872              		.align	2
 1873              		.set	.LANCHOR8,. + 0
 1876              	idct_status:
 1877 0000 01       		.byte	1
 1878 0001 01       		.byte	1
 1879              		.section	.rodata.logo_bits,"a",%progbits
 1880              		.align	2
 1881              		.set	.LANCHOR3,. + 0
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s 			page 54


 1884              	logo_bits:
 1885 0000 00       		.byte	0
 1886 0001 00       		.byte	0
 1887 0002 00       		.byte	0
 1888 0003 00       		.byte	0
 1889 0004 00       		.byte	0
 1890 0005 00       		.byte	0
 1891 0006 00       		.byte	0
 1892 0007 00       		.byte	0
 1893 0008 00       		.byte	0
 1894 0009 00       		.byte	0
 1895 000a 00       		.byte	0
 1896 000b 00       		.byte	0
 1897 000c 00       		.byte	0
 1898 000d 00       		.byte	0
 1899 000e 00       		.byte	0
 1900 000f 00       		.byte	0
 1901 0010 00       		.byte	0
 1902 0011 00       		.byte	0
 1903 0012 00       		.byte	0
 1904 0013 00       		.byte	0
 1905 0014 00       		.byte	0
 1906 0015 00       		.byte	0
 1907 0016 00       		.byte	0
 1908 0017 00       		.byte	0
 1909 0018 00       		.byte	0
 1910 0019 00       		.byte	0
 1911 001a F0       		.byte	-16
 1912 001b 0F       		.byte	15
 1913 001c 00       		.byte	0
 1914 001d 00       		.byte	0
 1915 001e 00       		.byte	0
 1916 001f FC       		.byte	-4
 1917 0020 FF       		.byte	-1
 1918 0021 FF       		.byte	-1
 1919 0022 3F       		.byte	63
 1920 0023 00       		.byte	0
 1921 0024 80       		.byte	-128
 1922 0025 FF       		.byte	-1
 1923 0026 FF       		.byte	-1
 1924 0027 FF       		.byte	-1
 1925 0028 FF       		.byte	-1
 1926 0029 01       		.byte	1
 1927 002a E0       		.byte	-32
 1928 002b 1F       		.byte	31
 1929 002c 00       		.byte	0
 1930 002d 80       		.byte	-128
 1931 002e FF       		.byte	-1
 1932 002f 07       		.byte	7
 1933 0030 E0       		.byte	-32
 1934 0031 01       		.byte	1
 1935 0032 00       		.byte	0
 1936 0033 80       		.byte	-128
 1937 0034 81       		.byte	-127
 1938 0035 07       		.byte	7
 1939 0036 E0       		.byte	-32
 1940 0037 01       		.byte	1
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s 			page 55


 1941 0038 00       		.byte	0
 1942 0039 80       		.byte	-128
 1943 003a 81       		.byte	-127
 1944 003b 07       		.byte	7
 1945 003c C0       		.byte	-64
 1946 003d E1       		.byte	-31
 1947 003e 07       		.byte	7
 1948 003f C0       		.byte	-64
 1949 0040 80       		.byte	-128
 1950 0041 03       		.byte	3
 1951 0042 00       		.byte	0
 1952 0043 FC       		.byte	-4
 1953 0044 1F       		.byte	31
 1954 0045 E0       		.byte	-32
 1955 0046 80       		.byte	-128
 1956 0047 03       		.byte	3
 1957 0048 00       		.byte	0
 1958 0049 FE       		.byte	-2
 1959 004a 7F       		.byte	127
 1960 004b 70       		.byte	112
 1961 004c C0       		.byte	-64
 1962 004d 01       		.byte	1
 1963 004e 00       		.byte	0
 1964 004f 0F       		.byte	15
 1965 0050 FE       		.byte	-2
 1966 0051 39       		.byte	57
 1967 0052 E0       		.byte	-32
 1968 0053 00       		.byte	0
 1969 0054 00       		.byte	0
 1970 0055 07       		.byte	7
 1971 0056 F8       		.byte	-8
 1972 0057 1F       		.byte	31
 1973 0058 F0       		.byte	-16
 1974 0059 00       		.byte	0
 1975 005a 00       		.byte	0
 1976 005b 0E       		.byte	14
 1977 005c E0       		.byte	-32
 1978 005d 1F       		.byte	31
 1979 005e 78       		.byte	120
 1980 005f 00       		.byte	0
 1981 0060 00       		.byte	0
 1982 0061 0C       		.byte	12
 1983 0062 C0       		.byte	-64
 1984 0063 FF       		.byte	-1
 1985 0064 3F       		.byte	63
 1986 0065 00       		.byte	0
 1987 0066 00       		.byte	0
 1988 0067 18       		.byte	24
 1989 0068 00       		.byte	0
 1990 0069 FF       		.byte	-1
 1991 006a 1F       		.byte	31
 1992 006b 00       		.byte	0
 1993 006c 00       		.byte	0
 1994 006d 38       		.byte	56
 1995 006e C0       		.byte	-64
 1996 006f FF       		.byte	-1
 1997 0070 0F       		.byte	15
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s 			page 56


 1998 0071 00       		.byte	0
 1999 0072 00       		.byte	0
 2000 0073 70       		.byte	112
 2001 0074 E0       		.byte	-32
 2002 0075 F1       		.byte	-15
 2003 0076 03       		.byte	3
 2004 0077 00       		.byte	0
 2005 0078 00       		.byte	0
 2006 0079 E0       		.byte	-32
 2007 007a 78       		.byte	120
 2008 007b 00       		.byte	0
 2009 007c 00       		.byte	0
 2010 007d 00       		.byte	0
 2011 007e 00       		.byte	0
 2012 007f C0       		.byte	-64
 2013 0080 3F       		.byte	63
 2014 0081 E0       		.byte	-32
 2015 0082 01       		.byte	1
 2016 0083 00       		.byte	0
 2017 0084 00       		.byte	0
 2018 0085 80       		.byte	-128
 2019 0086 1F       		.byte	31
 2020 0087 F0       		.byte	-16
 2021 0088 01       		.byte	1
 2022 0089 00       		.byte	0
 2023 008a 00       		.byte	0
 2024 008b 00       		.byte	0
 2025 008c 07       		.byte	7
 2026 008d F8       		.byte	-8
 2027 008e 00       		.byte	0
 2028 008f 00       		.byte	0
 2029 0090 00       		.byte	0
 2030 0091 00       		.byte	0
 2031 0092 1E       		.byte	30
 2032 0093 7C       		.byte	124
 2033 0094 00       		.byte	0
 2034 0095 00       		.byte	0
 2035 0096 00       		.byte	0
 2036 0097 00       		.byte	0
 2037 0098 F8       		.byte	-8
 2038 0099 1F       		.byte	31
 2039 009a 00       		.byte	0
 2040 009b 00       		.byte	0
 2041 009c 00       		.byte	0
 2042 009d 00       		.byte	0
 2043 009e F0       		.byte	-16
 2044 009f 0F       		.byte	15
 2045 00a0 00       		.byte	0
 2046 00a1 00       		.byte	0
 2047 00a2 00       		.byte	0
 2048 00a3 00       		.byte	0
 2049 00a4 80       		.byte	-128
 2050 00a5 01       		.byte	1
 2051 00a6 00       		.byte	0
 2052 00a7 00       		.byte	0
 2053 00a8 00       		.byte	0
 2054 00a9 00       		.byte	0
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s 			page 57


 2055 00aa 00       		.byte	0
 2056 00ab 00       		.byte	0
 2057 00ac 00       		.byte	0
 2058 00ad 00       		.byte	0
 2059 00ae 00       		.byte	0
 2060 00af 00       		.byte	0
 2061 00b0 00       		.byte	0
 2062 00b1 00       		.byte	0
 2063 00b2 00       		.byte	0
 2064 00b3 00       		.byte	0
 2065 00b4 00       		.byte	0
 2066 00b5 00       		.byte	0
 2067 00b6 00       		.byte	0
 2068 00b7 00       		.byte	0
 2069 00b8 00       		.byte	0
 2070 00b9 00       		.byte	0
 2071 00ba 00       		.byte	0
 2072 00bb 00       		.byte	0
 2073 00bc 00       		.byte	0
 2074 00bd 00       		.byte	0
 2075 00be 00       		.byte	0
 2076 00bf 00       		.byte	0
 2077 00c0 00       		.byte	0
 2078 00c1 00       		.byte	0
 2079 00c2 00       		.byte	0
 2080 00c3 00       		.byte	0
 2081 00c4 00       		.byte	0
 2082 00c5 00       		.byte	0
 2083 00c6 00       		.byte	0
 2084 00c7 4C       		.byte	76
 2085 00c8 1C       		.byte	28
 2086 00c9 00       		.byte	0
 2087 00ca 00       		.byte	0
 2088 00cb 00       		.byte	0
 2089 00cc 00       		.byte	0
 2090 00cd 32       		.byte	50
 2091 00ce 0E       		.byte	14
 2092 00cf 00       		.byte	0
 2093 00d0 00       		.byte	0
 2094 00d1 00       		.byte	0
 2095 00d2 00       		.byte	0
 2096 00d3 00       		.byte	0
 2097 00d4 C6       		.byte	-58
 2098 00d5 00       		.byte	0
 2099 00d6 18       		.byte	24
 2100 00d7 00       		.byte	0
 2101 00d8 00       		.byte	0
 2102 00d9 7C       		.byte	124
 2103 00da EF       		.byte	-17
 2104 00db FC       		.byte	-4
 2105 00dc 39       		.byte	57
 2106 00dd 00       		.byte	0
 2107 00de 00       		.byte	0
 2108 00df 4E       		.byte	78
 2109 00e0 C6       		.byte	-58
 2110 00e1 B8       		.byte	-72
 2111 00e2 31       		.byte	49
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s 			page 58


 2112 00e3 00       		.byte	0
 2113 00e4 00       		.byte	0
 2114 00e5 3E       		.byte	62
 2115 00e6 C6       		.byte	-58
 2116 00e7 98       		.byte	-104
 2117 00e8 31       		.byte	49
 2118 00e9 00       		.byte	0
 2119 00ea 00       		.byte	0
 2120 00eb 3C       		.byte	60
 2121 00ec C6       		.byte	-58
 2122 00ed 98       		.byte	-104
 2123 00ee 31       		.byte	49
 2124 00ef 00       		.byte	0
 2125 00f0 00       		.byte	0
 2126 00f1 0E       		.byte	14
 2127 00f2 C6       		.byte	-58
 2128 00f3 98       		.byte	-104
 2129 00f4 31       		.byte	49
 2130 00f5 00       		.byte	0
 2131 00f6 00       		.byte	0
 2132 00f7 4E       		.byte	78
 2133 00f8 CE       		.byte	-50
 2134 00f9 99       		.byte	-103
 2135 00fa 31       		.byte	49
 2136 00fb 00       		.byte	0
 2137 00fc 00       		.byte	0
 2138 00fd 7C       		.byte	124
 2139 00fe EF       		.byte	-17
 2140 00ff FD       		.byte	-3
 2141 0100 7B       		.byte	123
 2142 0101 00       		.byte	0
 2143 0102 00       		.byte	0
 2144 0103 00       		.byte	0
 2145 0104 00       		.byte	0
 2146 0105 00       		.byte	0
 2147 0106 00       		.byte	0
 2148 0107 00       		.byte	0
 2149 0108 00       		.byte	0
 2150 0109 00       		.byte	0
 2151 010a 00       		.byte	0
 2152 010b 00       		.byte	0
 2153 010c 00       		.byte	0
 2154 010d 00       		.byte	0
 2155 010e 00       		.byte	0
 2156 010f 00       		.byte	0
 2157 0110 00       		.byte	0
 2158 0111 00       		.byte	0
 2159 0112 00       		.byte	0
 2160 0113 00       		.byte	0
 2161 0114 00       		.byte	0
 2162 0115 00       		.byte	0
 2163 0116 00       		.byte	0
 2164 0117 00       		.byte	0
 2165 0118 00       		.byte	0
 2166 0119 00       		.byte	0
 2167 011a 00       		.byte	0
 2168 011b 00       		.byte	0
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s 			page 59


 2169 011c 00       		.byte	0
 2170 011d 00       		.byte	0
 2171 011e 00       		.byte	0
 2172 011f 00       		.byte	0
 2173              		.section	.rodata.main.str1.4,"aMS",%progbits,1
 2174              		.align	2
 2175              	.LC2:
 2176 0000 4D756C74 		.ascii	"Multi Function Meter\000"
 2176      69204675 
 2176      6E637469 
 2176      6F6E204D 
 2176      65746572 
 2177 0015 000000   		.space	3
 2178              	.LC3:
 2179 0018 5265762E 		.ascii	"Rev. 0.2a\000"
 2179      20302E32 
 2179      6100
 2180 0022 0000     		.space	2
 2181              	.LC4:
 2182 0024 48656C6C 		.ascii	"Hello. This is MFM.\012\000"
 2182      6F2E2054 
 2182      68697320 
 2182      6973204D 
 2182      464D2E0A 
 2183 0039 000000   		.space	3
 2184              	.LC5:
 2185 003c 2825642C 		.ascii	"(%d,%d,%d)\012\000"
 2185      25642C25 
 2185      64290A00 
 2186              	.LC6:
 2187 0048 55502000 		.ascii	"UP \000"
 2188              	.LC7:
 2189 004c 444F574E 		.ascii	"DOWN \000"
 2189      2000
 2190 0052 0000     		.space	2
 2191              	.LC8:
 2192 0054 454E5445 		.ascii	"ENTER \000"
 2192      522000
 2193 005b 00       		.space	1
 2194              	.LC9:
 2195 005c 6B506100 		.ascii	"kPa\000"
 2196              	.LC10:
 2197 0060 4D415000 		.ascii	"MAP\000"
 2198              	.LC11:
 2199 0064 4700     		.ascii	"G\000"
 2200 0066 0000     		.space	2
 2201              	.LC12:
 2202 0068 4C617447 		.ascii	"LatG\000"
 2202      00
 2203 006d 000000   		.space	3
 2204              	.LC13:
 2205 0070 00       		.ascii	"\000"
 2206 0071 000000   		.space	3
 2207              	.LC14:
 2208 0074 4D6F6465 		.ascii	"Mode Setting\000"
 2208      20536574 
 2208      74696E67 
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s 			page 60


 2208      00
 2209 0081 000000   		.space	3
 2210              	.LC15:
 2211 0084 3E00     		.ascii	">\000"
 2212 0086 0000     		.space	2
 2213              	.LC16:
 2214 0088 2000     		.ascii	" \000"
 2215 008a 0000     		.space	2
 2216              	.LC17:
 2217 008c 4D756C74 		.ascii	"Multi-Meter\000"
 2217      692D4D65 
 2217      74657200 
 2218              	.LC18:
 2219 0098 53636F70 		.ascii	"Scope\000"
 2219      6500
 2220              		.section	.rodata.meas_digit,"a",%progbits
 2221              		.align	2
 2222              		.set	.LANCHOR9,. + 0
 2225              	meas_digit:
 2226 0000 03       		.byte	3
 2227 0001 03       		.byte	3
 2228 0002 03       		.byte	3
 2229 0003 03       		.byte	3
 2230 0004 03       		.byte	3
 2231 0005 03       		.byte	3
 2232              		.section	.rodata.meas_frac,"a",%progbits
 2233              		.align	2
 2234              		.set	.LANCHOR10,. + 0
 2237              	meas_frac:
 2238 0000 02       		.byte	2
 2239 0001 01       		.byte	1
 2240 0002 01       		.byte	1
 2241 0003 00       		.byte	0
 2242 0004 00       		.byte	0
 2243 0005 02       		.byte	2
 2244              		.section	.rodata.meas_name,"a",%progbits
 2245              		.align	2
 2246              		.set	.LANCHOR2,. + 0
 2249              	meas_name:
 2250 0000 4D415000 		.ascii	"MAP\000"
 2251 0004 000000   		.space	3
 2252 0007 4F494C50 		.ascii	"OILP\000"
 2252      00
 2253 000c 0000     		.space	2
 2254 000e 46505600 		.ascii	"FPV\000"
 2255 0012 000000   		.space	3
 2256 0015 45435400 		.ascii	"ECT\000"
 2257 0019 000000   		.space	3
 2258 001c 4F494C54 		.ascii	"OILT\000"
 2258      00
 2259 0021 0000     		.space	2
 2260 0023 4F3200   		.ascii	"O2\000"
 2261 0026 00000000 		.space	4
 2262              		.section	.rodata.meas_sign,"a",%progbits
 2263              		.align	2
 2264              		.set	.LANCHOR11,. + 0
 2267              	meas_sign:
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s 			page 61


 2268 0000 01       		.byte	1
 2269 0001 00       		.byte	0
 2270 0002 00       		.byte	0
 2271 0003 00       		.byte	0
 2272 0004 00       		.byte	0
 2273 0005 00       		.byte	0
 2274              		.section	.rodata.meas_unit,"a",%progbits
 2275              		.align	2
 2276              		.set	.LANCHOR1,. + 0
 2279              	meas_unit:
 2280 0000 6B706100 		.ascii	"kpa\000"
 2281 0004 00       		.space	1
 2282 0005 6B706100 		.ascii	"kpa\000"
 2283 0009 00       		.space	1
 2284 000a 56202000 		.ascii	"V  \000"
 2285 000e 00       		.space	1
 2286 000f B0       		.byte	-80
 2287 0010 43       		.byte	67
 2288 0011 00       		.byte	0
 2289 0012 0000     		.space	2
 2290 0014 B0       		.byte	-80
 2291 0015 43       		.byte	67
 2292 0016 00       		.byte	0
 2293 0017 0000     		.space	2
 2294 0019 5600     		.ascii	"V\000"
 2295 001b 000000   		.space	3
 2296              		.text
 2297              	.Letext0:
 2298              		.file 2 "/usr/local/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/machine/_default_type
 2299              		.file 3 "/usr/local/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/_stdint.h"
 2300              		.file 4 "Drivers/CMSIS/Include/core_cm4.h"
 2301              		.file 5 "Drivers/CMSIS/Device/ST/STM32F3xx/Include/system_stm32f3xx.h"
 2302              		.file 6 "Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f303x8.h"
 2303              		.file 7 "Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f3xx.h"
 2304              		.file 8 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_def.h"
 2305              		.file 9 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc.h"
 2306              		.file 10 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc_ex.h"
 2307              		.file 11 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_dma.h"
 2308              		.file 12 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_adc_ex.h"
 2309              		.file 13 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_adc.h"
 2310              		.file 14 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_can.h"
 2311              		.file 15 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_i2c.h"
 2312              		.file 16 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_spi.h"
 2313              		.file 17 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_tim.h"
 2314              		.file 18 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_uart.h"
 2315              		.file 19 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal.h"
 2316              		.file 20 "Inc/adc.h"
 2317              		.file 21 "Inc/can.h"
 2318              		.file 22 "Inc/i2c.h"
 2319              		.file 23 "Inc/spi.h"
 2320              		.file 24 "Inc/tim.h"
 2321              		.file 25 "Inc/usart.h"
 2322              		.file 26 "/usr/local/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/lock.h"
 2323              		.file 27 "/usr/local/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/_types.h"
 2324              		.file 28 "/usr/local/gcc-arm-none-eabi-7-2018-q2-update/lib/gcc/arm-none-eabi/7.3.1/include/stddef
 2325              		.file 29 "/usr/local/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/reent.h"
 2326              		.file 30 "/usr/local/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/math.h"
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s 			page 62


 2327              		.file 31 "/Users/imashio/Electronics/ARM/_Library/u8x8.h"
 2328              		.file 32 "/Users/imashio/Electronics/ARM/_Library/u8g2.h"
 2329              		.file 33 "/Users/imashio/Electronics/ARM/_Library/flag.h"
 2330              		.file 34 "Inc/defi_decoder.h"
 2331              		.file 35 "Inc/pulse_counter.h"
 2332              		.file 36 "Inc/can_obd.h"
 2333              		.file 37 "/Users/imashio/Electronics/ARM/_Library/draw_Value.h"
 2334              		.file 38 "/Users/imashio/Electronics/ARM/_Library/draw_IndicatorBox.h"
 2335              		.file 39 "/Users/imashio/Electronics/ARM/_Library/usart_transmit_printf.h"
 2336              		.file 40 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_cortex.h"
 2337              		.file 41 "Inc/gsens_ADXL345.h"
 2338              		.file 42 "/Users/imashio/Electronics/ARM/_Library/draw_BarGraph.h"
 2339              		.file 43 "Inc/gpio.h"
 2340              		.file 44 "Inc/dma.h"
 2341              		.file 45 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_gpio.h"
 2342              		.file 46 "<built-in>"
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s 			page 63


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s:18     .text.draw_indicators:0000000000000000 $t
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s:26     .text.draw_indicators:0000000000000000 draw_indicators
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s:78     .text.draw_indicators:0000000000000038 $d
                            *COM*:0000000000000080 u8g2
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s:84     .text.draw_MeasLabels:0000000000000000 $t
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s:92     .text.draw_MeasLabels:0000000000000000 draw_MeasLabels
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s:209    .text.draw_MeasLabels:00000000000000d0 $d
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s:218    .text.draw_MeasLabels_Rotary:0000000000000000 $t
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s:226    .text.draw_MeasLabels_Rotary:0000000000000000 draw_MeasLabels_Rotary
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s:282    .text.draw_MeasLabels_Rotary:000000000000003c $d
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s:289    .text.HAL_ADC_ConvCpltCallback:0000000000000000 $t
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s:297    .text.HAL_ADC_ConvCpltCallback:0000000000000000 HAL_ADC_ConvCpltCallback
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s:323    .text.HAL_ADC_ConvCpltCallback:0000000000000018 $d
                            *COM*:0000000000000014 g_ADCBuffer
                            *COM*:0000000000000014 adc
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s:329    .text.SystemClock_Config:0000000000000000 $t
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s:337    .text.SystemClock_Config:0000000000000000 SystemClock_Config
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s:456    .text.startup.main:0000000000000000 $t
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s:464    .text.startup.main:0000000000000000 main
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s:992    .text.startup.main:0000000000000338 $d
                            *COM*:0000000000000001 Gsens_EN
                            *COM*:0000000000000001 mode
                            *COM*:0000000000000001 setting
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s:1035   .text.startup.main:00000000000003e0 $t
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s:1452   .text.startup.main:00000000000006c8 $d
                            *COM*:0000000000000001 Gsens_X1
                            *COM*:0000000000000002 Gsens_Z
                            *COM*:0000000000000001 Gsens_Y1
                            *COM*:0000000000000001 Gsens_Z1
                            *COM*:0000000000000002 Gsens_X
                            *COM*:0000000000000002 Gsens_Y
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s:1481   .text.startup.main:000000000000072c $t
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s:1712   .text.startup.main:00000000000008a0 $d
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s:1733   .text.Error_Handler:0000000000000000 $t
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s:1741   .text.Error_Handler:0000000000000000 Error_Handler
                            *COM*:0000000000000001 Gsens_Z0
                            *COM*:0000000000000001 Gsens_Y0
                            *COM*:0000000000000001 Gsens_X0
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s:1807   .data.FP_duty:0000000000000000 FP_duty
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s:1814   .data.FP_volt:0000000000000000 FP_volt
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s:1836   .data.O2_volt:0000000000000000 O2_volt
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s:1843   .data.meas_value:0000000000000000 meas_value
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s:2267   .rodata.meas_sign:0000000000000000 meas_sign
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s:2237   .rodata.meas_frac:0000000000000000 meas_frac
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s:2225   .rodata.meas_digit:0000000000000000 meas_digit
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s:2279   .rodata.meas_unit:0000000000000000 meas_unit
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s:2249   .rodata.meas_name:0000000000000000 meas_name
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s:1876   .rodata.idct_status:0000000000000000 idct_status
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s:1867   .rodata.idct_name:0000000000000000 idct_name
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s:1790   .bss.cursor:0000000000000000 cursor
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s:1820   .data.MT:0000000000000000 MT
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s:1795   .bss.gear:0000000000000000 gear
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s:1854   .data.speed:0000000000000000 speed
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s:1800   .bss.update_display:0000000000000000 update_display
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s:1884   .rodata.logo_bits:0000000000000000 logo_bits
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s 			page 64


/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s:1791   .bss.cursor:0000000000000000 $d
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s:1796   .bss.gear:0000000000000000 $d
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s:1801   .bss.update_display:0000000000000000 $d
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s:1803   .data.FP_duty:0000000000000000 $d
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s:1810   .data.FP_volt:0000000000000000 $d
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s:1817   .data.MT:0000000000000000 $d
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s:1832   .data.O2_volt:0000000000000000 $d
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s:1839   .data.meas_value:0000000000000000 $d
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s:1851   .data.speed:0000000000000000 $d
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s:1857   .rodata.draw_MeasLabels.str1.4:0000000000000000 $d
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s:1863   .rodata.idct_name:0000000000000000 $d
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s:1872   .rodata.idct_status:0000000000000000 $d
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s:1880   .rodata.logo_bits:0000000000000000 $d
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s:2174   .rodata.main.str1.4:0000000000000000 $d
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s:2221   .rodata.meas_digit:0000000000000000 $d
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s:2233   .rodata.meas_frac:0000000000000000 $d
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s:2245   .rodata.meas_name:0000000000000000 $d
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s:2263   .rodata.meas_sign:0000000000000000 $d
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s:2275   .rodata.meas_unit:0000000000000000 $d

UNDEFINED SYMBOLS
draw_IndicatorBox
draw_MeasLabelUnit
draw_Value
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_Init
memset
MX_GPIO_Init
MX_DMA_Init
MX_ADC1_Init
MX_CAN_Init
MX_I2C1_Init
MX_SPI1_Init
MX_TIM1_Init
MX_TIM2_Init
MX_TIM3_Init
MX_TIM6_Init
MX_USART1_UART_Init
MX_USART2_UART_Init
HAL_TIM_PWM_Start
HAL_TIM_Base_Start_IT
HAL_ADC_Start_DMA
HAL_UART_Receive_IT
CAN_OBD_Init
u8g2_Setup_ssd1309_128x64_noname2_f
HAL_GPIO_WritePin
HAL_Delay
u8x8_InitDisplay
u8x8_SetPowerSave
u8x8_SetContrast
u8g2_ClearDisplay
u8g2_DrawXBMP
u8g2_SetFont
u8g2_DrawStr
u8g2_SendBuffer
ARM GAS  /var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//ccurIojW.s 			page 65


u8g2_ClearBuffer
HAL_UART_Transmit_printf
Gsens_ADXL345_Init
CAN_OBD_Response
defi_decoder
HAL_NVIC_DisableIRQ
htim1
htim2
htim3
htim6
hadc1
DEFI_value
UART1_Data
huart1
u8x8_gpio_and_delay_STM32F303
u8x8_byte_4wire_hw_spi
u8g2_cb_r0
u8g2_font_5x7_tf
huart2
flag_sw
UART1_RxData
rpm
flag_meas
flag_disp
draw_CircularMeter_Init
draw_CircularMeter
ADXL345_RegRead_1byte
draw_Wave_axis
draw_Wave
draw_BarGraph
draw_MeasUnit
u8g2_font_7x14B_tf
